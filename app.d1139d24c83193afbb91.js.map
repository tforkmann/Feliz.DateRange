{"version":3,"file":"app.d1139d24c83193afbb91.js","mappings":"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","sources":["webpack:///./src/Docs/output/fable_modules/fable-library.4.9.0/Util.js","webpack:///./src/Docs/output/fable_modules/fable-library.4.9.0/Types.js","webpack:///./src/Docs/output/fable_modules/fable-library.4.9.0/Date.js","webpack:///./src/Docs/output/fable_modules/fable-library.4.9.0/Numeric.js","webpack:///./src/Docs/output/fable_modules/fable-library.4.9.0/RegExp.js","webpack:///./src/Docs/output/fable_modules/fable-library.4.9.0/String.js","webpack:///./src/Docs/output/fable_modules/fable-library.4.9.0/Option.js","webpack:///./src/Docs/output/fable_modules/fable-library.4.9.0/Array.js","webpack:///./src/Docs/output/fable_modules/fable-library.4.9.0/List.js","webpack:///./src/Docs/output/fable_modules/fable-library.4.9.0/Seq.js","webpack:///./src/Docs/output/fable_modules/fable-library.4.9.0/FSharp.Core.js","webpack:///./src/Docs/output/fable_modules/fable-library.4.9.0/Native.js","webpack:///./src/Docs/output/fable_modules/fable-library.4.9.0/Set.js","webpack:///./src/Docs/output/fable_modules/Fable.Elmish.4.1.0/sub.fs.js","webpack:///./src/Docs/output/fable_modules/Fable.Elmish.4.1.0/cmd.fs.js","webpack:///./src/Docs/output/fable_modules/fable-library.4.9.0/Double.js","webpack:///./src/Docs/output/fable_modules/fable-library.4.9.0/Range.js","webpack:///./src/Docs/output/fable_modules/Fable.Elmish.4.1.0/ring.fs.js","webpack:///./src/Docs/output/fable_modules/Fable.Elmish.4.1.0/program.fs.js","webpack:///./src/Docs/output/fable_modules/Fable.Elmish.4.1.0/prelude.fs.js","webpack:///./src/Docs/output/fable_modules/fable-library.4.9.0/Int32.js","webpack:///./src/Docs/output/fable_modules/Fable.Elmish.React.4.0.0/common.fs.js","webpack:///./src/Docs/output/fable_modules/Fable.Elmish.React.4.0.0/react.fs.js","webpack:///./src/Docs/output/fable_modules/Feliz.2.7.0/Interop.fs.js","webpack:///./src/Docs/output/fable_modules/Feliz.2.7.0/React.fs.js","webpack:///./src/Docs/output/fable_modules/Feliz.2.7.0/ReactInterop.js","webpack:///./src/Docs/output/fable_modules/Feliz.Router.4.0.0/Router.fs.js","webpack:///./src/Docs/output/Router.js","webpack:///./src/Docs/output/fable_modules/Feliz.DaisyUI.4.2.0/DaisyUI.fs.js","webpack:///./src/Docs/output/SharedView.js","webpack:///./src/Docs/output/Pages/Use.js","webpack:///./src/Docs/output/fable_modules/fable-library.4.9.0/DateOffset.js","webpack:///./src/Docs/output/fable_modules/Feliz.DateRange.0.1.2/Interop.fs.js","webpack:///./src/Docs/output/fable_modules/Feliz.UseElmish.2.5.0/UseElmish.fs.js","webpack:///./src/Docs/output/Pages/DateRangeView.js","webpack:///./src/Docs/output/Pages/Install.js","webpack:///./src/Docs/output/View.js","webpack:///./src/Docs/output/fable_modules/Feliz.DaisyUI.4.2.0/Operators.fs.js","webpack:///./src/Docs/output/App.js"],"sourcesContent":["// tslint:disable:ban-types\nexport function isArrayLike(x) {\n    return Array.isArray(x) || ArrayBuffer.isView(x);\n}\nexport function isIterable(x) {\n    return x != null && typeof x === \"object\" && Symbol.iterator in x;\n}\nexport function isEnumerable(x) {\n    return x != null && typeof x.GetEnumerator === \"function\";\n}\nexport function isComparer(x) {\n    return x != null && typeof x.Compare === \"function\";\n}\nexport function isComparable(x) {\n    return x != null && typeof x.CompareTo === \"function\";\n}\nexport function isEquatable(x) {\n    return x != null && typeof x.Equals === \"function\";\n}\nexport function isHashable(x) {\n    return x != null && typeof x.GetHashCode === \"function\";\n}\nexport function isDisposable(x) {\n    return x != null && typeof x.Dispose === \"function\";\n}\nexport function disposeSafe(x) {\n    if (isDisposable(x)) {\n        x.Dispose();\n    }\n}\nexport function defaultOf() {\n    return null;\n}\nexport function sameConstructor(x, y) {\n    return Object.getPrototypeOf(x)?.constructor === Object.getPrototypeOf(y)?.constructor;\n}\nexport class Enumerable {\n    constructor(en) {\n        this.en = en;\n    }\n    GetEnumerator() { return this.en; }\n    \"System.Collections.IEnumerable.GetEnumerator\"() { return this.en; }\n    [Symbol.iterator]() {\n        return this;\n    }\n    next() {\n        const hasNext = this.en[\"System.Collections.IEnumerator.MoveNext\"]();\n        const current = hasNext ? this.en[\"System.Collections.Generic.IEnumerator`1.get_Current\"]() : undefined;\n        return { done: !hasNext, value: current };\n    }\n}\nexport class Enumerator {\n    constructor(iter) {\n        this.iter = iter;\n        this.current = defaultOf();\n    }\n    [\"System.Collections.Generic.IEnumerator`1.get_Current\"]() {\n        return this.current;\n    }\n    [\"System.Collections.IEnumerator.get_Current\"]() {\n        return this.current;\n    }\n    [\"System.Collections.IEnumerator.MoveNext\"]() {\n        const cur = this.iter.next();\n        this.current = cur.value;\n        return !cur.done;\n    }\n    [\"System.Collections.IEnumerator.Reset\"]() {\n        throw new Error(\"JS iterators cannot be reset\");\n    }\n    Dispose() {\n        return;\n    }\n}\nexport function toEnumerable(e) {\n    if (isEnumerable(e)) {\n        return e;\n    }\n    else {\n        return new Enumerable(new Enumerator(e[Symbol.iterator]()));\n    }\n}\nexport function getEnumerator(e) {\n    if (isEnumerable(e)) {\n        return e.GetEnumerator();\n    }\n    else {\n        return new Enumerator(e[Symbol.iterator]());\n    }\n}\nexport function toIterator(en) {\n    return {\n        next() {\n            const hasNext = en[\"System.Collections.IEnumerator.MoveNext\"]();\n            const current = hasNext ? en[\"System.Collections.Generic.IEnumerator`1.get_Current\"]() : undefined;\n            return { done: !hasNext, value: current };\n        },\n    };\n}\nexport function enumerableToIterator(e) {\n    return toIterator(toEnumerable(e).GetEnumerator());\n}\nexport class Comparer {\n    constructor(f) {\n        this.Compare = f || compare;\n    }\n}\nexport function comparerFromEqualityComparer(comparer) {\n    // Sometimes IEqualityComparer also implements IComparer\n    if (isComparer(comparer)) {\n        return new Comparer(comparer.Compare);\n    }\n    else {\n        return new Comparer((x, y) => {\n            const xhash = comparer.GetHashCode(x);\n            const yhash = comparer.GetHashCode(y);\n            if (xhash === yhash) {\n                return comparer.Equals(x, y) ? 0 : -1;\n            }\n            else {\n                return xhash < yhash ? -1 : 1;\n            }\n        });\n    }\n}\nexport function assertEqual(actual, expected, msg) {\n    if (!equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport function assertNotEqual(actual, expected, msg) {\n    if (equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport class Lazy {\n    constructor(factory) {\n        this.factory = factory;\n        this.isValueCreated = false;\n    }\n    get Value() {\n        if (!this.isValueCreated) {\n            this.createdValue = this.factory();\n            this.isValueCreated = true;\n        }\n        return this.createdValue;\n    }\n    get IsValueCreated() {\n        return this.isValueCreated;\n    }\n}\nexport function lazyFromValue(v) {\n    return new Lazy(() => v);\n}\nexport function padWithZeros(i, length) {\n    let str = i.toString(10);\n    while (str.length < length) {\n        str = \"0\" + str;\n    }\n    return str;\n}\nexport function padLeftAndRightWithZeros(i, lengthLeft, lengthRight) {\n    let str = i.toString(10);\n    while (str.length < lengthLeft) {\n        str = \"0\" + str;\n    }\n    while (str.length < lengthRight) {\n        str = str + \"0\";\n    }\n    return str;\n}\nexport function dateOffset(date) {\n    const date1 = date;\n    return typeof date1.offset === \"number\"\n        ? date1.offset\n        : (date.kind === 1 /* DateKind.UTC */\n            ? 0 : date.getTimezoneOffset() * -60000);\n}\nexport function int16ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport function int32ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFFFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport function int64ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xffffffffffffffffn + i + 1n : i;\n    return i.toString(radix);\n}\nexport class ObjectRef {\n    static id(o) {\n        if (!ObjectRef.idMap.has(o)) {\n            ObjectRef.idMap.set(o, ++ObjectRef.count);\n        }\n        return ObjectRef.idMap.get(o);\n    }\n}\nObjectRef.idMap = new WeakMap();\nObjectRef.count = 0;\nexport function stringHash(s) {\n    let i = 0;\n    let h = 5381;\n    const len = s.length;\n    while (i < len) {\n        h = (h * 33) ^ s.charCodeAt(i++);\n    }\n    return h;\n}\nexport function numberHash(x) {\n    return x * 2654435761 | 0;\n}\nexport function bigintHash(x) {\n    return stringHash(x.toString(32));\n}\n// From https://stackoverflow.com/a/37449594\nexport function combineHashCodes(hashes) {\n    let h1 = 0;\n    const len = hashes.length;\n    for (let i = 0; i < len; i++) {\n        const h2 = hashes[i];\n        h1 = ((h1 << 5) + h1) ^ h2;\n    }\n    return h1;\n}\nexport function physicalHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"bigint\":\n            return bigintHash(x);\n        case \"string\":\n            return stringHash(x);\n        default:\n            return numberHash(ObjectRef.id(x));\n    }\n}\nexport function identityHash(x) {\n    if (isHashable(x)) {\n        return x.GetHashCode();\n    }\n    else {\n        return physicalHash(x);\n    }\n}\nexport function dateHash(x) {\n    return x.getTime();\n}\nexport function arrayHash(x) {\n    const len = x.length;\n    const hashes = new Array(len);\n    for (let i = 0; i < len; i++) {\n        hashes[i] = structuralHash(x[i]);\n    }\n    return combineHashCodes(hashes);\n}\nexport function structuralHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"bigint\":\n            return bigintHash(x);\n        case \"string\":\n            return stringHash(x);\n        default: {\n            if (isHashable(x)) {\n                return x.GetHashCode();\n            }\n            else if (isArrayLike(x)) {\n                return arrayHash(x);\n            }\n            else if (x instanceof Date) {\n                return dateHash(x);\n            }\n            else if (Object.getPrototypeOf(x)?.constructor === Object) {\n                // TODO: check call-stack to prevent cyclic objects?\n                const hashes = Object.values(x).map((v) => structuralHash(v));\n                return combineHashCodes(hashes);\n            }\n            else {\n                // Classes don't implement GetHashCode by default, but must use identity hashing\n                return numberHash(ObjectRef.id(x));\n                // return stringHash(String(x));\n            }\n        }\n    }\n}\n// Intended for custom numeric types, like long or decimal\nexport function fastStructuralHash(x) {\n    return stringHash(String(x));\n}\n// Intended for declared types that may or may not implement GetHashCode\nexport function safeHash(x) {\n    // return x == null ? 0 : isHashable(x) ? x.GetHashCode() : numberHash(ObjectRef.id(x));\n    return identityHash(x);\n}\nexport function equalArraysWith(x, y, eq) {\n    if (x == null) {\n        return y == null;\n    }\n    if (y == null) {\n        return false;\n    }\n    if (x.length !== y.length) {\n        return false;\n    }\n    for (let i = 0; i < x.length; i++) {\n        if (!eq(x[i], y[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equalArrays(x, y) {\n    return equalArraysWith(x, y, equals);\n}\nfunction equalObjects(x, y) {\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return false;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0; i < xKeys.length; i++) {\n        if (xKeys[i] !== yKeys[i] || !equals(x[xKeys[i]], y[yKeys[i]])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function physicalEquality(x, y) {\n    return x === y;\n}\nexport function equals(x, y) {\n    if (x === y) {\n        return true;\n    }\n    else if (x == null) {\n        return y == null;\n    }\n    else if (y == null) {\n        return false;\n    }\n    else if (isEquatable(x)) {\n        return x.Equals(y);\n    }\n    else if (isArrayLike(x)) {\n        return isArrayLike(y) && equalArrays(x, y);\n    }\n    else if (typeof x !== \"object\") {\n        return false;\n    }\n    else if (x instanceof Date) {\n        return (y instanceof Date) && compareDates(x, y) === 0;\n    }\n    else {\n        return Object.getPrototypeOf(x)?.constructor === Object && equalObjects(x, y);\n    }\n}\nexport function compareDates(x, y) {\n    let xtime;\n    let ytime;\n    // DateTimeOffset and DateTime deals with equality differently.\n    if (\"offset\" in x && \"offset\" in y) {\n        xtime = x.getTime();\n        ytime = y.getTime();\n    }\n    else {\n        xtime = x.getTime() + dateOffset(x);\n        ytime = y.getTime() + dateOffset(y);\n    }\n    return xtime === ytime ? 0 : (xtime < ytime ? -1 : 1);\n}\nexport function comparePrimitives(x, y) {\n    return x === y ? 0 : (x < y ? -1 : 1);\n}\nexport function compareArraysWith(x, y, comp) {\n    if (x == null) {\n        return y == null ? 0 : 1;\n    }\n    if (y == null) {\n        return -1;\n    }\n    if (x.length !== y.length) {\n        return x.length < y.length ? -1 : 1;\n    }\n    for (let i = 0, j = 0; i < x.length; i++) {\n        j = comp(x[i], y[i]);\n        if (j !== 0) {\n            return j;\n        }\n    }\n    return 0;\n}\nexport function compareArrays(x, y) {\n    return compareArraysWith(x, y, compare);\n}\nfunction compareObjects(x, y) {\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return xKeys.length < yKeys.length ? -1 : 1;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0, j = 0; i < xKeys.length; i++) {\n        const key = xKeys[i];\n        if (key !== yKeys[i]) {\n            return key < yKeys[i] ? -1 : 1;\n        }\n        else {\n            j = compare(x[key], y[key]);\n            if (j !== 0) {\n                return j;\n            }\n        }\n    }\n    return 0;\n}\nexport function compare(x, y) {\n    if (x === y) {\n        return 0;\n    }\n    else if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    else if (y == null) {\n        return 1;\n    }\n    else if (isComparable(x)) {\n        return x.CompareTo(y);\n    }\n    else if (isArrayLike(x)) {\n        return isArrayLike(y) ? compareArrays(x, y) : -1;\n    }\n    else if (typeof x !== \"object\") {\n        return x < y ? -1 : 1;\n    }\n    else if (x instanceof Date) {\n        return y instanceof Date ? compareDates(x, y) : -1;\n    }\n    else {\n        return Object.getPrototypeOf(x)?.constructor === Object ? compareObjects(x, y) : -1;\n    }\n}\nexport function min(comparer, x, y) {\n    return comparer(x, y) < 0 ? x : y;\n}\nexport function max(comparer, x, y) {\n    return comparer(x, y) > 0 ? x : y;\n}\nexport function clamp(comparer, value, min, max) {\n    return (comparer(value, min) < 0) ? min : (comparer(value, max) > 0) ? max : value;\n}\nexport function createAtom(value) {\n    let atom = value;\n    return (...args) => {\n        if (args.length === 0) {\n            return atom;\n        }\n        else {\n            atom = args[0];\n        }\n    };\n}\nexport function createObj(fields) {\n    const obj = {};\n    for (const kv of fields) {\n        obj[kv[0]] = kv[1];\n    }\n    return obj;\n}\nexport function jsOptions(mutator) {\n    const opts = {};\n    mutator(opts);\n    return opts;\n}\nexport function round(value, digits = 0) {\n    const m = Math.pow(10, digits);\n    const n = +(digits ? value * m : value).toFixed(8);\n    const i = Math.floor(n);\n    const f = n - i;\n    const e = 1e-8;\n    const r = (f > 0.5 - e && f < 0.5 + e) ? ((i % 2 === 0) ? i : i + 1) : Math.round(n);\n    return digits ? r / m : r;\n}\nexport function sign(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n}\nexport function unescapeDataString(s) {\n    // https://stackoverflow.com/a/4458580/524236\n    return decodeURIComponent((s).replace(/\\+/g, \"%20\"));\n}\nexport function escapeDataString(s) {\n    return encodeURIComponent(s).replace(/!/g, \"%21\")\n        .replace(/'/g, \"%27\")\n        .replace(/\\(/g, \"%28\")\n        .replace(/\\)/g, \"%29\")\n        .replace(/\\*/g, \"%2A\");\n}\nexport function escapeUriString(s) {\n    return encodeURI(s);\n}\n// ICollection.Clear and Count members can be called on Arrays\n// or Dictionaries so we need a runtime check (see #1120)\nexport function count(col) {\n    if (isArrayLike(col)) {\n        return col.length;\n    }\n    else {\n        let count = 0;\n        for (const _ of col) {\n            count++;\n        }\n        return count;\n    }\n}\nexport function clear(col) {\n    if (isArrayLike(col)) {\n        col.splice(0);\n    }\n    else {\n        col.clear();\n    }\n}\nconst curried = new WeakMap();\nexport function uncurry2(f) {\n    if (f == null) {\n        return null;\n    }\n    const f2 = (a1, a2) => f(a1)(a2);\n    curried.set(f2, f);\n    return f2;\n}\nexport function curry2(f) {\n    return curried.get(f) ?? ((a1) => (a2) => f(a1, a2));\n}\nexport function uncurry3(f) {\n    if (f == null) {\n        return null;\n    }\n    const f2 = (a1, a2, a3) => f(a1)(a2)(a3);\n    curried.set(f2, f);\n    return f2;\n}\nexport function curry3(f) {\n    return curried.get(f)\n        ?? ((a1) => (a2) => (a3) => f(a1, a2, a3));\n}\nexport function uncurry4(f) {\n    if (f == null) {\n        return null;\n    }\n    const f2 = (a1, a2, a3, a4) => f(a1)(a2)(a3)(a4);\n    curried.set(f2, f);\n    return f2;\n}\nexport function curry4(f) {\n    return curried.get(f)\n        ?? ((a1) => (a2) => (a3) => (a4) => f(a1, a2, a3, a4));\n}\nexport function uncurry5(f) {\n    if (f == null) {\n        return null;\n    }\n    const f2 = (a1, a2, a3, a4, a5) => f(a1)(a2)(a3)(a4)(a5);\n    curried.set(f2, f);\n    return f2;\n}\nexport function curry5(f) {\n    return curried.get(f)\n        ?? ((a1) => (a2) => (a3) => (a4) => (a5) => f(a1, a2, a3, a4, a5));\n}\nexport function uncurry6(f) {\n    if (f == null) {\n        return null;\n    }\n    const f2 = (a1, a2, a3, a4, a5, a6) => f(a1)(a2)(a3)(a4)(a5)(a6);\n    curried.set(f2, f);\n    return f2;\n}\nexport function curry6(f) {\n    return curried.get(f)\n        ?? ((a1) => (a2) => (a3) => (a4) => (a5) => (a6) => f(a1, a2, a3, a4, a5, a6));\n}\nexport function uncurry7(f) {\n    if (f == null) {\n        return null;\n    }\n    const f2 = (a1, a2, a3, a4, a5, a6, a7) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7);\n    curried.set(f2, f);\n    return f2;\n}\nexport function curry7(f) {\n    return curried.get(f)\n        ?? ((a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => f(a1, a2, a3, a4, a5, a6, a7));\n}\nexport function uncurry8(f) {\n    if (f == null) {\n        return null;\n    }\n    const f2 = (a1, a2, a3, a4, a5, a6, a7, a8) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7)(a8);\n    curried.set(f2, f);\n    return f2;\n}\nexport function curry8(f) {\n    return curried.get(f)\n        ?? ((a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => f(a1, a2, a3, a4, a5, a6, a7, a8));\n}\nexport function uncurry9(f) {\n    if (f == null) {\n        return null;\n    }\n    const f2 = (a1, a2, a3, a4, a5, a6, a7, a8, a9) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7)(a8)(a9);\n    curried.set(f2, f);\n    return f2;\n}\nexport function curry9(f) {\n    return curried.get(f)\n        ?? ((a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => (a9) => f(a1, a2, a3, a4, a5, a6, a7, a8, a9));\n}\nexport function uncurry10(f) {\n    if (f == null) {\n        return null;\n    }\n    const f2 = (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7)(a8)(a9)(a10);\n    curried.set(f2, f);\n    return f2;\n}\nexport function curry10(f) {\n    return curried.get(f)\n        ?? ((a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => (a9) => (a10) => f(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10));\n}\nexport function uncurry11(f) {\n    if (f == null) {\n        return null;\n    }\n    const f2 = (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7)(a8)(a9)(a10)(a11);\n    curried.set(f2, f);\n    return f2;\n}\nexport function curry11(f) {\n    return curried.get(f)\n        ?? ((a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => (a9) => (a10) => (a11) => f(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11));\n}\nexport function uncurry12(f) {\n    if (f == null) {\n        return null;\n    }\n    const f2 = (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7)(a8)(a9)(a10)(a11)(a12);\n    curried.set(f2, f);\n    return f2;\n}\nexport function curry12(f) {\n    return curried.get(f)\n        ?? ((a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => (a9) => (a10) => (a11) => (a12) => f(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12));\n}\nexport function uncurry13(f) {\n    if (f == null) {\n        return null;\n    }\n    const f2 = (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7)(a8)(a9)(a10)(a11)(a12)(a13);\n    curried.set(f2, f);\n    return f2;\n}\nexport function curry13(f) {\n    return curried.get(f)\n        ?? ((a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => (a9) => (a10) => (a11) => (a12) => (a13) => f(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13));\n}\nexport function uncurry14(f) {\n    if (f == null) {\n        return null;\n    }\n    const f2 = (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7)(a8)(a9)(a10)(a11)(a12)(a13)(a14);\n    curried.set(f2, f);\n    return f2;\n}\nexport function curry14(f) {\n    return curried.get(f)\n        ?? ((a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => (a9) => (a10) => (a11) => (a12) => (a13) => (a14) => f(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14));\n}\nexport function uncurry15(f) {\n    if (f == null) {\n        return null;\n    }\n    const f2 = (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7)(a8)(a9)(a10)(a11)(a12)(a13)(a14)(a15);\n    curried.set(f2, f);\n    return f2;\n}\nexport function curry15(f) {\n    return curried.get(f)\n        ?? ((a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => (a9) => (a10) => (a11) => (a12) => (a13) => (a14) => (a15) => f(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15));\n}\nexport function uncurry16(f) {\n    if (f == null) {\n        return null;\n    }\n    const f2 = (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7)(a8)(a9)(a10)(a11)(a12)(a13)(a14)(a15)(a16);\n    curried.set(f2, f);\n    return f2;\n}\nexport function curry16(f) {\n    return curried.get(f)\n        ?? ((a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => (a9) => (a10) => (a11) => (a12) => (a13) => (a14) => (a15) => (a16) => f(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16));\n}\nexport function uncurry17(f) {\n    if (f == null) {\n        return null;\n    }\n    const f2 = (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7)(a8)(a9)(a10)(a11)(a12)(a13)(a14)(a15)(a16)(a17);\n    curried.set(f2, f);\n    return f2;\n}\nexport function curry17(f) {\n    return curried.get(f)\n        ?? ((a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => (a9) => (a10) => (a11) => (a12) => (a13) => (a14) => (a15) => (a16) => (a17) => f(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17));\n}\nexport function uncurry18(f) {\n    if (f == null) {\n        return null;\n    }\n    const f2 = (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7)(a8)(a9)(a10)(a11)(a12)(a13)(a14)(a15)(a16)(a17)(a18);\n    curried.set(f2, f);\n    return f2;\n}\nexport function curry18(f) {\n    return curried.get(f)\n        ?? ((a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => (a9) => (a10) => (a11) => (a12) => (a13) => (a14) => (a15) => (a16) => (a17) => (a18) => f(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18));\n}\nexport function uncurry19(f) {\n    if (f == null) {\n        return null;\n    }\n    const f2 = (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7)(a8)(a9)(a10)(a11)(a12)(a13)(a14)(a15)(a16)(a17)(a18)(a19);\n    curried.set(f2, f);\n    return f2;\n}\nexport function curry19(f) {\n    return curried.get(f)\n        ?? ((a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => (a9) => (a10) => (a11) => (a12) => (a13) => (a14) => (a15) => (a16) => (a17) => (a18) => (a19) => f(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19));\n}\nexport function uncurry20(f) {\n    if (f == null) {\n        return null;\n    }\n    const f2 = (a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7)(a8)(a9)(a10)(a11)(a12)(a13)(a14)(a15)(a16)(a17)(a18)(a19)(a20);\n    curried.set(f2, f);\n    return f2;\n}\nexport function curry20(f) {\n    return curried.get(f)\n        ?? ((a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => (a9) => (a10) => (a11) => (a12) => (a13) => (a14) => (a15) => (a16) => (a17) => (a18) => (a19) => (a20) => f(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20));\n}\n// More performant method to copy arrays, see #2352\nexport function copyToArray(source, sourceIndex, target, targetIndex, count) {\n    if (ArrayBuffer.isView(source) && ArrayBuffer.isView(target)) {\n        target.set(source.subarray(sourceIndex, sourceIndex + count), targetIndex);\n    }\n    else {\n        for (let i = 0; i < count; ++i) {\n            target[targetIndex + i] = source[sourceIndex + i];\n        }\n    }\n}\n","import { combineHashCodes, compare, compareArrays, equalArrays, equals, sameConstructor, numberHash, structuralHash } from \"./Util.js\";\nexport function seqToString(self) {\n    let count = 0;\n    let str = \"[\";\n    for (const x of self) {\n        if (count === 0) {\n            str += toString(x);\n        }\n        else if (count === 100) {\n            str += \"; ...\";\n            break;\n        }\n        else {\n            str += \"; \" + toString(x);\n        }\n        count++;\n    }\n    return str + \"]\";\n}\nexport function toString(x, callStack = 0) {\n    if (x != null && typeof x === \"object\") {\n        if (typeof x.toString === \"function\") {\n            return x.toString();\n        }\n        else if (Symbol.iterator in x) {\n            return seqToString(x);\n        }\n        else { // TODO: Date?\n            const cons = Object.getPrototypeOf(x)?.constructor;\n            return cons === Object && callStack < 10\n                // Same format as recordToString\n                ? \"{ \" + Object.entries(x).map(([k, v]) => k + \" = \" + toString(v, callStack + 1)).join(\"\\n  \") + \" }\"\n                : cons?.name ?? \"\";\n        }\n    }\n    return String(x);\n}\nexport function unionToString(name, fields) {\n    if (fields.length === 0) {\n        return name;\n    }\n    else {\n        let fieldStr;\n        let withParens = true;\n        if (fields.length === 1) {\n            fieldStr = toString(fields[0]);\n            withParens = fieldStr.indexOf(\" \") >= 0;\n        }\n        else {\n            fieldStr = fields.map((x) => toString(x)).join(\", \");\n        }\n        return name + (withParens ? \" (\" : \" \") + fieldStr + (withParens ? \")\" : \"\");\n    }\n}\nexport class Union {\n    get name() {\n        return this.cases()[this.tag];\n    }\n    toJSON() {\n        return this.fields.length === 0 ? this.name : [this.name].concat(this.fields);\n    }\n    toString() {\n        return unionToString(this.name, this.fields);\n    }\n    GetHashCode() {\n        const hashes = this.fields.map((x) => structuralHash(x));\n        hashes.splice(0, 0, numberHash(this.tag));\n        return combineHashCodes(hashes);\n    }\n    Equals(other) {\n        if (this === other) {\n            return true;\n        }\n        else if (!sameConstructor(this, other)) {\n            return false;\n        }\n        else if (this.tag === other.tag) {\n            return equalArrays(this.fields, other.fields);\n        }\n        else {\n            return false;\n        }\n    }\n    CompareTo(other) {\n        if (this === other) {\n            return 0;\n        }\n        else if (!sameConstructor(this, other)) {\n            return -1;\n        }\n        else if (this.tag === other.tag) {\n            return compareArrays(this.fields, other.fields);\n        }\n        else {\n            return this.tag < other.tag ? -1 : 1;\n        }\n    }\n}\nfunction recordToJSON(self) {\n    const o = {};\n    const keys = Object.keys(self);\n    for (let i = 0; i < keys.length; i++) {\n        o[keys[i]] = self[keys[i]];\n    }\n    return o;\n}\nfunction recordToString(self) {\n    return \"{ \" + Object.entries(self).map(([k, v]) => k + \" = \" + toString(v)).join(\"\\n  \") + \" }\";\n}\nfunction recordGetHashCode(self) {\n    const hashes = Object.values(self).map((v) => structuralHash(v));\n    return combineHashCodes(hashes);\n}\nfunction recordEquals(self, other) {\n    if (self === other) {\n        return true;\n    }\n    else if (!sameConstructor(self, other)) {\n        return false;\n    }\n    else {\n        const thisNames = Object.keys(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            if (!equals(self[thisNames[i]], other[thisNames[i]])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nfunction recordCompareTo(self, other) {\n    if (self === other) {\n        return 0;\n    }\n    else if (!sameConstructor(self, other)) {\n        return -1;\n    }\n    else {\n        const thisNames = Object.keys(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            const result = compare(self[thisNames[i]], other[thisNames[i]]);\n            if (result !== 0) {\n                return result;\n            }\n        }\n        return 0;\n    }\n}\nexport class Record {\n    toJSON() { return recordToJSON(this); }\n    toString() { return recordToString(this); }\n    GetHashCode() { return recordGetHashCode(this); }\n    Equals(other) { return recordEquals(this, other); }\n    CompareTo(other) { return recordCompareTo(this, other); }\n}\nexport class FSharpRef {\n    get contents() {\n        return this.getter();\n    }\n    set contents(v) {\n        this.setter(v);\n    }\n    constructor(contentsOrGetter, setter) {\n        if (typeof setter === \"function\") {\n            this.getter = contentsOrGetter;\n            this.setter = setter;\n        }\n        else {\n            this.getter = () => contentsOrGetter;\n            this.setter = (v) => { contentsOrGetter = v; };\n        }\n    }\n}\n// EXCEPTIONS\n// Exception is intentionally not derived from Error, for performance reasons (see #2160)\nexport class Exception {\n    constructor(message) {\n        this.message = message;\n    }\n}\nexport function isException(x) {\n    return x instanceof Exception || x instanceof Error;\n}\nexport function isPromise(x) {\n    return x instanceof Promise;\n}\nexport function ensureErrorOrException(e) {\n    // Exceptionally admitting promises as errors for compatibility with React.suspense (see #3298)\n    return (isException(e) || isPromise(e)) ? e : new Error(String(e));\n}\nexport class FSharpException extends Exception {\n    toJSON() { return recordToJSON(this); }\n    toString() { return recordToString(this); }\n    GetHashCode() { return recordGetHashCode(this); }\n    Equals(other) { return recordEquals(this, other); }\n    CompareTo(other) { return recordCompareTo(this, other); }\n}\nexport class MatchFailureException extends FSharpException {\n    constructor(arg1, arg2, arg3) {\n        super();\n        this.arg1 = arg1;\n        this.arg2 = arg2 | 0;\n        this.arg3 = arg3 | 0;\n        this.message = \"The match cases were incomplete\";\n    }\n}\nexport class Attribute {\n}\n","/**\n * DateTimeOffset functions.\n *\n * Note: Date instances are always DateObjects in local\n * timezone (because JS dates are all kinds of messed up).\n * A local date returns UTC epoch when `.getTime()` is called.\n *\n * Basically; invariant: date.getTime() always return UTC time.\n */\nimport { toInt64, toFloat64 } from \"./BigInt.js\";\nimport { compareDates, dateOffset, padWithZeros } from \"./Util.js\";\nexport function kind(value) {\n    return value.kind || 0;\n}\nexport function unixEpochMillisecondsToTicks(ms, offset) {\n    return toInt64(((BigInt(ms) + 62135596800000n) + BigInt(offset)) * 10000n);\n}\nexport function ticksToUnixEpochMilliseconds(ticks) {\n    return Number(((BigInt(ticks) / 10000n) - 62135596800000n));\n}\nexport function dateOffsetToString(offset) {\n    const isMinus = offset < 0;\n    offset = Math.abs(offset);\n    const hours = ~~(offset / 3600000);\n    const minutes = (offset % 3600000) / 60000;\n    return (isMinus ? \"-\" : \"+\") +\n        padWithZeros(hours, 2) + \":\" +\n        padWithZeros(minutes, 2);\n}\nexport function dateToHalfUTCString(date, half) {\n    const str = date.toISOString();\n    return half === \"first\"\n        ? str.substring(0, str.indexOf(\"T\"))\n        : str.substring(str.indexOf(\"T\") + 1, str.length - 1);\n}\nfunction dateToISOString(d, utc) {\n    if (utc) {\n        return d.toISOString();\n    }\n    else {\n        // JS Date is always local\n        const printOffset = d.kind == null ? true : d.kind === 2 /* DateKind.Local */;\n        return padWithZeros(d.getFullYear(), 4) + \"-\" +\n            padWithZeros(d.getMonth() + 1, 2) + \"-\" +\n            padWithZeros(d.getDate(), 2) + \"T\" +\n            padWithZeros(d.getHours(), 2) + \":\" +\n            padWithZeros(d.getMinutes(), 2) + \":\" +\n            padWithZeros(d.getSeconds(), 2) + \".\" +\n            padWithZeros(d.getMilliseconds(), 3) +\n            (printOffset ? dateOffsetToString(d.getTimezoneOffset() * -60000) : \"\");\n    }\n}\nfunction dateToISOStringWithOffset(dateWithOffset, offset) {\n    const str = dateWithOffset.toISOString();\n    return str.substring(0, str.length - 1) + dateOffsetToString(offset);\n}\nfunction dateToStringWithCustomFormat(date, format, utc) {\n    return format.replace(/(\\w)\\1*/g, (match) => {\n        let rep = Number.NaN;\n        switch (match.substring(0, 1)) {\n            case \"y\":\n                const y = utc ? date.getUTCFullYear() : date.getFullYear();\n                rep = match.length < 4 ? y % 100 : y;\n                break;\n            case \"M\":\n                rep = (utc ? date.getUTCMonth() : date.getMonth()) + 1;\n                break;\n            case \"d\":\n                rep = utc ? date.getUTCDate() : date.getDate();\n                break;\n            case \"H\":\n                rep = utc ? date.getUTCHours() : date.getHours();\n                break;\n            case \"h\":\n                const h = utc ? date.getUTCHours() : date.getHours();\n                rep = h > 12 ? h % 12 : h;\n                break;\n            case \"m\":\n                rep = utc ? date.getUTCMinutes() : date.getMinutes();\n                break;\n            case \"s\":\n                rep = utc ? date.getUTCSeconds() : date.getSeconds();\n                break;\n            case \"f\":\n                rep = utc ? date.getUTCMilliseconds() : date.getMilliseconds();\n                break;\n        }\n        if (Number.isNaN(rep)) {\n            return match;\n        }\n        else {\n            return padWithZeros(rep, match.length);\n        }\n    });\n}\nfunction dateToStringWithOffset(date, format) {\n    const d = new Date(date.getTime() + (date.offset ?? 0));\n    if (typeof format !== \"string\") {\n        return d.toISOString().replace(/\\.\\d+/, \"\").replace(/[A-Z]|\\.\\d+/g, \" \") + dateOffsetToString((date.offset ?? 0));\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\": return dateToHalfUTCString(d, \"first\");\n            case \"T\":\n            case \"t\": return dateToHalfUTCString(d, \"second\");\n            case \"O\":\n            case \"o\": return dateToISOStringWithOffset(d, (date.offset ?? 0));\n            default: throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(d, format, true);\n    }\n}\nfunction dateToStringWithKind(date, format) {\n    const utc = date.kind === 1 /* DateKind.UTC */;\n    if (typeof format !== \"string\") {\n        return utc ? date.toUTCString() : date.toLocaleString();\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\":\n                return utc ? dateToHalfUTCString(date, \"first\") : date.toLocaleDateString();\n            case \"T\":\n            case \"t\":\n                return utc ? dateToHalfUTCString(date, \"second\") : date.toLocaleTimeString();\n            case \"O\":\n            case \"o\":\n                return dateToISOString(date, utc);\n            default:\n                throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(date, format, utc);\n    }\n}\nexport function toString(date, format, _provider) {\n    return date.offset != null\n        ? dateToStringWithOffset(date, format)\n        : dateToStringWithKind(date, format);\n}\nexport function DateTime(value, kind) {\n    const d = new Date(value);\n    d.kind = (kind == null ? 0 /* DateKind.Unspecified */ : kind) | 0;\n    return d;\n}\nexport function fromTicks(ticks, kind) {\n    kind = kind != null ? kind : 2 /* DateKind.Local */; // better default than Unspecified\n    let date = DateTime(ticksToUnixEpochMilliseconds(ticks), kind);\n    // Ticks are local to offset (in this case, either UTC or Local/Unknown).\n    // If kind is anything but UTC, that means that the tick number was not\n    // in utc, thus getTime() cannot return UTC, and needs to be shifted.\n    if (kind !== 1 /* DateKind.UTC */) {\n        date = DateTime(date.getTime() - dateOffset(date), kind);\n    }\n    return date;\n}\nexport function fromDateTimeOffset(date, kind) {\n    switch (kind) {\n        case 1 /* DateKind.UTC */: return DateTime(date.getTime(), 1 /* DateKind.UTC */);\n        case 2 /* DateKind.Local */: return DateTime(date.getTime(), 2 /* DateKind.Local */);\n        default:\n            const d = DateTime(date.getTime() + (date.offset ?? 0), kind);\n            return DateTime(d.getTime() - dateOffset(d), kind);\n    }\n}\nexport function getTicks(date) {\n    return unixEpochMillisecondsToTicks(date.getTime(), dateOffset(date));\n}\nexport function minValue() {\n    // This is \"0001-01-01T00:00:00.000Z\", actual JS min value is -8640000000000000\n    return DateTime(-62135596800000, 0 /* DateKind.Unspecified */);\n}\nexport function maxValue() {\n    // This is \"9999-12-31T23:59:59.999Z\", actual JS max value is 8640000000000000\n    return DateTime(253402300799999, 0 /* DateKind.Unspecified */);\n}\nexport function parseRaw(input) {\n    function fail() {\n        throw new Error(`The string is not a valid Date: ${input}`);\n    }\n    if (input == null || input.trim() === \"\") {\n        fail();\n    }\n    // ISO dates without TZ are parsed as UTC. Adding time without TZ keeps them local.\n    if (input.length === 10 && input[4] === \"-\" && input[7] === \"-\") {\n        input += \"T00:00:00\";\n    }\n    let date = new Date(input);\n    let offset = null;\n    if (isNaN(date.getTime())) {\n        // Try to check strings JS Date cannot parse (see #1045, #1422)\n        // tslint:disable-next-line:max-line-length\n        const m = /^\\s*(\\d+[^\\w\\s:]\\d+[^\\w\\s:]\\d+)?\\s*(\\d+:\\d+(?::\\d+(?:\\.\\d+)?)?)?\\s*([AaPp][Mm])?\\s*(Z|[+-]([01]?\\d):?([0-5]?\\d)?)?\\s*$/.exec(input);\n        if (m != null) {\n            let baseDate;\n            let timeInSeconds = 0;\n            if (m[2] != null) {\n                const timeParts = m[2].split(\":\");\n                timeInSeconds =\n                    parseInt(timeParts[0], 10) * 3600 +\n                        parseInt(timeParts[1] || \"0\", 10) * 60 +\n                        parseFloat(timeParts[2] || \"0\");\n                if (m[3] != null && m[3].toUpperCase() === \"PM\") {\n                    timeInSeconds += 720;\n                }\n            }\n            if (m[4] != null) { // There's an offset, parse as UTC\n                if (m[1] != null) {\n                    baseDate = new Date(m[1] + \" UTC\");\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getUTCFullYear() + \"/\" + (d.getUTCMonth() + 1) + \"/\" + d.getUTCDate());\n                }\n                if (m[4] === \"Z\") {\n                    offset = \"Z\";\n                }\n                else {\n                    let offsetInMinutes = parseInt(m[5], 10) * 60 + parseInt(m[6] || \"0\", 10);\n                    if (m[4][0] === \"-\") {\n                        offsetInMinutes *= -1;\n                    }\n                    offset = offsetInMinutes;\n                    timeInSeconds -= offsetInMinutes * 60;\n                }\n            }\n            else {\n                if (m[1] != null) {\n                    baseDate = new Date(m[1]);\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getFullYear() + \"/\" + (d.getMonth() + 1) + \"/\" + d.getDate());\n                }\n            }\n            date = new Date(baseDate.getTime() + timeInSeconds * 1000);\n            // correct for daylight savings time\n            date = new Date(date.getTime() + (date.getTimezoneOffset() - baseDate.getTimezoneOffset()) * 60000);\n        }\n        else {\n            fail();\n        }\n        // Check again the date is valid after transformations, see #2229\n        if (isNaN(date.getTime())) {\n            fail();\n        }\n    }\n    return [date, offset];\n}\nexport function parse(str, detectUTC = false) {\n    const [date, offset] = parseRaw(str);\n    // .NET always parses DateTime as Local if there's offset info (even \"Z\")\n    // Newtonsoft.Json uses UTC if the offset is \"Z\"\n    const kind = offset != null\n        ? (detectUTC && offset === \"Z\" ? 1 /* DateKind.UTC */ : 2 /* DateKind.Local */)\n        : 0 /* DateKind.Unspecified */;\n    return DateTime(date.getTime(), kind);\n}\nexport function tryParse(v, defValue) {\n    try {\n        defValue.contents = parse(v);\n        return true;\n    }\n    catch (_err) {\n        return false;\n    }\n}\nexport function create(year, month, day, h = 0, m = 0, s = 0, ms = 0, kind) {\n    const date = kind === 1 /* DateKind.UTC */\n        ? new Date(Date.UTC(year, month - 1, day, h, m, s, ms))\n        : new Date(year, month - 1, day, h, m, s, ms);\n    if (year <= 99) {\n        if (kind === 1 /* DateKind.UTC */) {\n            date.setUTCFullYear(year, month - 1, day);\n        }\n        else {\n            date.setFullYear(year, month - 1, day);\n        }\n    }\n    const dateValue = date.getTime();\n    if (isNaN(dateValue)) {\n        throw new Error(\"The parameters describe an unrepresentable Date.\");\n    }\n    return DateTime(dateValue, kind);\n}\nexport function now() {\n    return DateTime(Date.now(), 2 /* DateKind.Local */);\n}\nexport function utcNow() {\n    return DateTime(Date.now(), 1 /* DateKind.UTC */);\n}\nexport function today() {\n    return date(now());\n}\nexport function isLeapYear(year) {\n    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n}\nexport function daysInMonth(year, month) {\n    return month === 2\n        ? (isLeapYear(year) ? 29 : 28)\n        : (month >= 8 ? (month % 2 === 0 ? 31 : 30) : (month % 2 === 0 ? 30 : 31));\n}\nexport function toUniversalTime(date) {\n    return date.kind === 1 /* DateKind.UTC */ ? date : DateTime(date.getTime(), 1 /* DateKind.UTC */);\n}\nexport function toLocalTime(date) {\n    return date.kind === 2 /* DateKind.Local */ ? date : DateTime(date.getTime(), 2 /* DateKind.Local */);\n}\nexport function specifyKind(d, kind) {\n    return create(year(d), month(d), day(d), hour(d), minute(d), second(d), millisecond(d), kind);\n}\nexport function timeOfDay(d) {\n    return hour(d) * 3600000\n        + minute(d) * 60000\n        + second(d) * 1000\n        + millisecond(d);\n}\nexport function date(d) {\n    return create(year(d), month(d), day(d), 0, 0, 0, 0, d.kind);\n}\nexport function day(d) {\n    return d.kind === 1 /* DateKind.UTC */ ? d.getUTCDate() : d.getDate();\n}\nexport function hour(d) {\n    return d.kind === 1 /* DateKind.UTC */ ? d.getUTCHours() : d.getHours();\n}\nexport function millisecond(d) {\n    return d.kind === 1 /* DateKind.UTC */ ? d.getUTCMilliseconds() : d.getMilliseconds();\n}\nexport function minute(d) {\n    return d.kind === 1 /* DateKind.UTC */ ? d.getUTCMinutes() : d.getMinutes();\n}\nexport function month(d) {\n    return (d.kind === 1 /* DateKind.UTC */ ? d.getUTCMonth() : d.getMonth()) + 1;\n}\nexport function second(d) {\n    return d.kind === 1 /* DateKind.UTC */ ? d.getUTCSeconds() : d.getSeconds();\n}\nexport function year(d) {\n    return d.kind === 1 /* DateKind.UTC */ ? d.getUTCFullYear() : d.getFullYear();\n}\nexport function dayOfWeek(d) {\n    return d.kind === 1 /* DateKind.UTC */ ? d.getUTCDay() : d.getDay();\n}\nexport function dayOfYear(d) {\n    const _year = year(d);\n    const _month = month(d);\n    let _day = day(d);\n    for (let i = 1; i < _month; i++) {\n        _day += daysInMonth(_year, i);\n    }\n    return _day;\n}\nexport function add(d, ts) {\n    const newDate = DateTime(d.getTime() + ts, d.kind);\n    if (d.kind === 2 /* DateKind.Local */) {\n        const oldTzOffset = d.getTimezoneOffset();\n        const newTzOffset = newDate.getTimezoneOffset();\n        return oldTzOffset !== newTzOffset\n            ? DateTime(newDate.getTime() + (newTzOffset - oldTzOffset) * 60000, d.kind)\n            : newDate;\n    }\n    else {\n        return newDate;\n    }\n}\nexport function addDays(d, v) {\n    return add(d, v * 86400000);\n}\nexport function addHours(d, v) {\n    return add(d, v * 3600000);\n}\nexport function addMinutes(d, v) {\n    return add(d, v * 60000);\n}\nexport function addSeconds(d, v) {\n    return add(d, v * 1000);\n}\nexport function addMilliseconds(d, v) {\n    return add(d, v);\n}\nexport function addTicks(d, v) {\n    return add(d, toFloat64(v / 10000n));\n}\nexport function addYears(d, v) {\n    const newMonth = month(d);\n    const newYear = year(d) + v;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function addMonths(d, v) {\n    let newMonth = month(d) + v;\n    let newMonth_ = 0;\n    let yearOffset = 0;\n    if (newMonth > 12) {\n        newMonth_ = newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12);\n        newMonth = newMonth_;\n    }\n    else if (newMonth < 1) {\n        newMonth_ = 12 + newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12) + (newMonth_ === 12 ? -1 : 0);\n        newMonth = newMonth_;\n    }\n    const newYear = year(d) + yearOffset;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function subtract(d, that) {\n    return typeof that === \"number\"\n        ? add(d, -that)\n        : d.getTime() - that.getTime();\n}\nexport function toLongDateString(d) {\n    return d.toDateString();\n}\nexport function toShortDateString(d) {\n    return d.toLocaleDateString();\n}\nexport function toLongTimeString(d) {\n    return d.toLocaleTimeString();\n}\nexport function toShortTimeString(d) {\n    return d.toLocaleTimeString().replace(/:\\d\\d(?!:)/, \"\");\n}\nexport function equals(d1, d2) {\n    return d1.getTime() === d2.getTime();\n}\nexport const compare = compareDates;\nexport const compareTo = compareDates;\nexport function op_Addition(x, y) {\n    return add(x, y);\n}\nexport function op_Subtraction(x, y) {\n    return subtract(x, y);\n}\nexport function isDaylightSavingTime(x) {\n    const jan = new Date(x.getFullYear(), 0, 1);\n    const jul = new Date(x.getFullYear(), 6, 1);\n    return isDST(jan.getTimezoneOffset(), jul.getTimezoneOffset(), x.getTimezoneOffset());\n}\nfunction isDST(janOffset, julOffset, tOffset) {\n    return Math.min(janOffset, julOffset) === tOffset;\n}\nexport default DateTime;\n","export const symbol = Symbol(\"numeric\");\nexport function isNumeric(x) {\n    return typeof x === \"number\" || typeof x === \"bigint\" || x?.[symbol];\n}\nexport function compare(x, y) {\n    if (typeof x === \"number\") {\n        return x < y ? -1 : (x > y ? 1 : 0);\n    }\n    else if (typeof x === \"bigint\") {\n        return x < y ? -1 : (x > y ? 1 : 0);\n    }\n    else {\n        return x.CompareTo(y);\n    }\n}\nexport function multiply(x, y) {\n    if (typeof x === \"number\") {\n        return x * y;\n    }\n    else if (typeof x === \"bigint\") {\n        return x * BigInt(y);\n    }\n    else {\n        return x[symbol]().multiply(y);\n    }\n}\nexport function toFixed(x, dp) {\n    if (typeof x === \"number\") {\n        return x.toFixed(dp);\n    }\n    else if (typeof x === \"bigint\") {\n        return x;\n    }\n    else {\n        return x[symbol]().toFixed(dp);\n    }\n}\nexport function toPrecision(x, sd) {\n    if (typeof x === \"number\") {\n        return x.toPrecision(sd);\n    }\n    else if (typeof x === \"bigint\") {\n        return x;\n    }\n    else {\n        return x[symbol]().toPrecision(sd);\n    }\n}\nexport function toExponential(x, dp) {\n    if (typeof x === \"number\") {\n        return x.toExponential(dp);\n    }\n    else if (typeof x === \"bigint\") {\n        return x;\n    }\n    else {\n        return x[symbol]().toExponential(dp);\n    }\n}\nexport function toHex(x) {\n    if (typeof x === \"number\") {\n        return (Number(x) >>> 0).toString(16);\n    }\n    else if (typeof x === \"bigint\") {\n        // TODO: properly handle other bit sizes\n        return BigInt.asUintN(64, x).toString(16);\n    }\n    else {\n        return x[symbol]().toHex();\n    }\n}\n","export function create(pattern, options = 0) {\n    // Supported RegexOptions\n    // * IgnoreCase:  0x0001\n    // * Multiline:   0x0002\n    // * Compiled:    0x0008 (ignored)\n    // * Singleline:  0x0010\n    // * ECMAScript:  0x0100 (ignored)\n    if ((options & ~(1 ^ 2 ^ 8 ^ 16 ^ 256)) !== 0) {\n        throw new Error(\"RegexOptions only supports: IgnoreCase, Multiline, Compiled, Singleline and ECMAScript\");\n    }\n    // Set always global and unicode flags for compatibility with dotnet, see #2925\n    let flags = \"gu\";\n    flags += options & 1 ? \"i\" : \"\"; // 0x0001 RegexOptions.IgnoreCase\n    flags += options & 2 ? \"m\" : \"\";\n    flags += options & 16 ? \"s\" : \"\";\n    return new RegExp(pattern, flags);\n}\n// From http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex\nexport function escape(str) {\n    return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\nexport function unescape(str) {\n    return str.replace(/\\\\([\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|])/g, \"$1\");\n}\nexport function isMatch(reg, input, startAt = 0) {\n    reg.lastIndex = startAt;\n    return reg.test(input);\n}\nexport function match(reg, input, startAt = 0) {\n    reg.lastIndex = startAt;\n    return reg.exec(input);\n}\nexport function matches(reg, input, startAt = 0) {\n    if (input == null) {\n        throw new Error(\"Input cannot ve null\");\n    }\n    if (!reg.global) {\n        throw new Error(\"Non-global RegExp\"); // Prevent infinite loop\n    }\n    reg.lastIndex = startAt;\n    const matches = [];\n    let m;\n    let lastMatchIndex = -1;\n    // tslint:disable-next-line:no-conditional-assignment\n    while ((m = reg.exec(input)) != null) {\n        // It can happen even global regex get stuck, see #2845\n        if (m.index === lastMatchIndex) {\n            reg.lastIndex++;\n        }\n        else {\n            lastMatchIndex = m.index;\n            matches.push(m);\n        }\n    }\n    return matches;\n}\nexport function options(reg) {\n    let options = 256; // ECMAScript\n    options |= reg.ignoreCase ? 1 : 0;\n    options |= reg.multiline ? 2 : 0;\n    return options;\n}\nexport function replace(reg, input, replacement, limit, offset = 0) {\n    function replacer() {\n        let res = arguments[0];\n        if (limit) {\n            limit--;\n            const match = [];\n            const len = arguments.length;\n            // arguments: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace#specifying_a_function_as_a_parameter\n            // * match: matched substring\n            // * p1, p2, ...: nth capture group string\n            // * offset: offset of matched substring\n            // * string: whole string examined\n            // * groups: named capturing groups\n            //           ONLY if regex contains a named capture group AND browser supports named groups\n            // -> last element can be groups OR input string\n            // -> check if last element is string\n            const withGroups = typeof arguments[len - 1] !== \"string\";\n            let pLast = withGroups ? len - 3 : len - 2;\n            for (let i = 0; i < pLast; i++) {\n                match.push(arguments[i]);\n            }\n            match.index = arguments[pLast++];\n            match.input = arguments[pLast++];\n            if (withGroups) {\n                match.groups = arguments[pLast];\n            }\n            res = replacement(match);\n        }\n        return res;\n    }\n    if (typeof reg === \"string\") {\n        const tmp = reg;\n        reg = create(input, limit ?? 0);\n        input = tmp;\n        limit = undefined;\n    }\n    if (typeof replacement === \"function\") {\n        limit = limit == null ? -1 : limit;\n        return input.substring(0, offset) + input.substring(offset).replace(reg, replacer);\n    }\n    else {\n        replacement =\n            replacement\n                // $0 doesn't work with JS regex, see #1155\n                .replace(/\\$0/g, (_s) => \"$&\")\n                // named groups in replacement are `${name}` in .Net, but `$<name>` in JS (in regex: groups are `(?<name>...)` in both)\n                .replace(/\\${([^}]+)}/g, \"\\$<$1>\");\n        if (limit != null) {\n            let m;\n            const sub1 = input.substring(offset);\n            const _matches = matches(reg, sub1);\n            const sub2 = matches.length > limit ? (m = _matches[limit - 1], sub1.substring(0, m.index + m[0].length)) : sub1;\n            return input.substring(0, offset) + sub2.replace(reg, replacement)\n                + input.substring(offset + sub2.length);\n        }\n        else {\n            return input.replace(reg, replacement);\n        }\n    }\n}\nexport function split(reg, input, limit, offset = 0) {\n    if (typeof reg === \"string\") {\n        const tmp = reg;\n        reg = create(input, limit ?? 0);\n        input = tmp;\n        limit = undefined;\n    }\n    input = input.substring(offset);\n    return input.split(reg, limit);\n}\n","import { toString as dateToString } from \"./Date.js\";\nimport { compare as numericCompare, isNumeric, multiply, toExponential, toFixed, toHex, toPrecision } from \"./Numeric.js\";\nimport { escape } from \"./RegExp.js\";\nimport { toString } from \"./Types.js\";\nconst fsFormatRegExp = /(^|[^%])%([0+\\- ]*)(\\*|\\d+)?(?:\\.(\\d+))?(\\w)/g;\nconst interpolateRegExp = /(?:(^|[^%])%([0+\\- ]*)(\\d+)?(?:\\.(\\d+))?(\\w))?%P\\(\\)/g;\nconst formatRegExp = /\\{(\\d+)(,-?\\d+)?(?:\\:([a-zA-Z])(\\d{0,2})|\\:(.+?))?\\}/g;\nfunction isLessThan(x, y) {\n    return numericCompare(x, y) < 0;\n}\nfunction cmp(x, y, ic) {\n    function isIgnoreCase(i) {\n        return i === true ||\n            i === 1 /* StringComparison.CurrentCultureIgnoreCase */ ||\n            i === 3 /* StringComparison.InvariantCultureIgnoreCase */ ||\n            i === 5 /* StringComparison.OrdinalIgnoreCase */;\n    }\n    function isOrdinal(i) {\n        return i === 4 /* StringComparison.Ordinal */ ||\n            i === 5 /* StringComparison.OrdinalIgnoreCase */;\n    }\n    if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    if (y == null) {\n        return 1;\n    } // everything is bigger than null\n    if (isOrdinal(ic)) {\n        if (isIgnoreCase(ic)) {\n            x = x.toLowerCase();\n            y = y.toLowerCase();\n        }\n        return (x === y) ? 0 : (x < y ? -1 : 1);\n    }\n    else {\n        if (isIgnoreCase(ic)) {\n            x = x.toLocaleLowerCase();\n            y = y.toLocaleLowerCase();\n        }\n        return x.localeCompare(y);\n    }\n}\nexport function compare(...args) {\n    switch (args.length) {\n        case 2: return cmp(args[0], args[1], false);\n        case 3: return cmp(args[0], args[1], args[2]);\n        case 4: return cmp(args[0], args[1], args[2] === true);\n        case 5: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), false);\n        case 6: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5]);\n        case 7: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5] === true);\n        default: throw new Error(\"String.compare: Unsupported number of parameters\");\n    }\n}\nexport function compareOrdinal(x, y) {\n    return cmp(x, y, 4 /* StringComparison.Ordinal */);\n}\nexport function compareTo(x, y) {\n    return cmp(x, y, 0 /* StringComparison.CurrentCulture */);\n}\nexport function startsWith(str, pattern, ic) {\n    if (str.length >= pattern.length) {\n        return cmp(str.substr(0, pattern.length), pattern, ic) === 0;\n    }\n    return false;\n}\nexport function indexOfAny(str, anyOf, ...args) {\n    if (str == null || str === \"\") {\n        return -1;\n    }\n    const startIndex = (args.length > 0) ? args[0] : 0;\n    if (startIndex < 0) {\n        throw new Error(\"Start index cannot be negative\");\n    }\n    const length = (args.length > 1) ? args[1] : str.length - startIndex;\n    if (length < 0) {\n        throw new Error(\"Length cannot be negative\");\n    }\n    if (startIndex + length > str.length) {\n        throw new Error(\"Invalid startIndex and length\");\n    }\n    const endIndex = startIndex + length;\n    const anyOfAsStr = \"\".concat.apply(\"\", anyOf);\n    for (let i = startIndex; i < endIndex; i++) {\n        if (anyOfAsStr.indexOf(str[i]) > -1) {\n            return i;\n        }\n    }\n    return -1;\n}\nexport function printf(input) {\n    return {\n        input,\n        cont: fsFormat(input),\n    };\n}\nexport function interpolate(str, values) {\n    let valIdx = 0;\n    let strIdx = 0;\n    let result = \"\";\n    interpolateRegExp.lastIndex = 0;\n    let match = interpolateRegExp.exec(str);\n    while (match) {\n        // The first group corresponds to the no-escape char (^|[^%]), the actual pattern starts in the next char\n        // Note: we don't use negative lookbehind because some browsers don't support it yet\n        const matchIndex = match.index + (match[1] || \"\").length;\n        result += str.substring(strIdx, matchIndex).replace(/%%/g, \"%\");\n        const [, , flags, padLength, precision, format] = match;\n        // Save interpolateRegExp.lastIndex before running formatReplacement because the values\n        // may also involve interpolation and make use of interpolateRegExp (see #3078)\n        strIdx = interpolateRegExp.lastIndex;\n        result += formatReplacement(values[valIdx++], flags, padLength, precision, format);\n        // Move interpolateRegExp.lastIndex one char behind to make sure we match the no-escape char next time\n        interpolateRegExp.lastIndex = strIdx - 1;\n        match = interpolateRegExp.exec(str);\n    }\n    result += str.substring(strIdx).replace(/%%/g, \"%\");\n    return result;\n}\nfunction continuePrint(cont, arg) {\n    return typeof arg === \"string\" ? cont(arg) : arg.cont(cont);\n}\nexport function toConsole(arg) {\n    // Don't remove the lambda here, see #1357\n    return continuePrint((x) => console.log(x), arg);\n}\nexport function toConsoleError(arg) {\n    return continuePrint((x) => console.error(x), arg);\n}\nexport function toText(arg) {\n    return continuePrint((x) => x, arg);\n}\nexport function toFail(arg) {\n    return continuePrint((x) => {\n        throw new Error(x);\n    }, arg);\n}\nfunction formatReplacement(rep, flags, padLength, precision, format) {\n    let sign = \"\";\n    flags = flags || \"\";\n    format = format || \"\";\n    if (isNumeric(rep)) {\n        if (format.toLowerCase() !== \"x\") {\n            if (isLessThan(rep, 0)) {\n                rep = multiply(rep, -1);\n                sign = \"-\";\n            }\n            else {\n                if (flags.indexOf(\" \") >= 0) {\n                    sign = \" \";\n                }\n                else if (flags.indexOf(\"+\") >= 0) {\n                    sign = \"+\";\n                }\n            }\n        }\n        precision = precision == null ? null : parseInt(precision, 10);\n        switch (format) {\n            case \"f\":\n            case \"F\":\n                precision = precision != null ? precision : 6;\n                rep = toFixed(rep, precision);\n                break;\n            case \"g\":\n            case \"G\":\n                rep = precision != null ? toPrecision(rep, precision) : toPrecision(rep);\n                break;\n            case \"e\":\n            case \"E\":\n                rep = precision != null ? toExponential(rep, precision) : toExponential(rep);\n                break;\n            case \"x\":\n                rep = toHex(rep);\n                break;\n            case \"X\":\n                rep = toHex(rep).toUpperCase();\n                break;\n            default: // AOid\n                rep = String(rep);\n                break;\n        }\n    }\n    else if (rep instanceof Date) {\n        rep = dateToString(rep);\n    }\n    else {\n        rep = toString(rep);\n    }\n    padLength = typeof padLength === \"number\" ? padLength : parseInt(padLength, 10);\n    if (!isNaN(padLength)) {\n        const zeroFlag = flags.indexOf(\"0\") >= 0; // Use '0' for left padding\n        const minusFlag = flags.indexOf(\"-\") >= 0; // Right padding\n        const ch = minusFlag || !zeroFlag ? \" \" : \"0\";\n        if (ch === \"0\") {\n            rep = pad(rep, padLength - sign.length, ch, minusFlag);\n            rep = sign + rep;\n        }\n        else {\n            rep = pad(sign + rep, padLength, ch, minusFlag);\n        }\n    }\n    else {\n        rep = sign + rep;\n    }\n    return rep;\n}\nfunction createPrinter(cont, _strParts, _matches, _result = \"\", padArg = -1) {\n    return (...args) => {\n        // Make copies of the values passed by reference because the function can be used multiple times\n        let result = _result;\n        const strParts = _strParts.slice();\n        const matches = _matches.slice();\n        for (const arg of args) {\n            const [, , flags, _padLength, precision, format] = matches[0];\n            let padLength = _padLength;\n            if (padArg >= 0) {\n                padLength = padArg;\n                padArg = -1;\n            }\n            else if (padLength === \"*\") {\n                if (arg < 0) {\n                    throw new Error(\"Non-negative number required\");\n                }\n                padArg = arg;\n                continue;\n            }\n            result += strParts[0];\n            result += formatReplacement(arg, flags, padLength, precision, format);\n            strParts.splice(0, 1);\n            matches.splice(0, 1);\n        }\n        if (matches.length === 0) {\n            result += strParts[0];\n            return cont(result);\n        }\n        else {\n            return createPrinter(cont, strParts, matches, result, padArg);\n        }\n    };\n}\nexport function fsFormat(str) {\n    return (cont) => {\n        fsFormatRegExp.lastIndex = 0;\n        const strParts = [];\n        const matches = [];\n        let strIdx = 0;\n        let match = fsFormatRegExp.exec(str);\n        while (match) {\n            // The first group corresponds to the no-escape char (^|[^%]), the actual pattern starts in the next char\n            // Note: we don't use negative lookbehind because some browsers don't support it yet\n            const matchIndex = match.index + (match[1] || \"\").length;\n            strParts.push(str.substring(strIdx, matchIndex).replace(/%%/g, \"%\"));\n            matches.push(match);\n            strIdx = fsFormatRegExp.lastIndex;\n            // Likewise we need to move fsFormatRegExp.lastIndex one char behind to make sure we match the no-escape char next time\n            fsFormatRegExp.lastIndex -= 1;\n            match = fsFormatRegExp.exec(str);\n        }\n        if (strParts.length === 0) {\n            return cont(str.replace(/%%/g, \"%\"));\n        }\n        else {\n            strParts.push(str.substring(strIdx).replace(/%%/g, \"%\"));\n            return createPrinter(cont, strParts, matches);\n        }\n    };\n}\nexport function format(str, ...args) {\n    let str2;\n    if (typeof str === \"object\") {\n        // Called with culture info\n        str2 = String(args[0]);\n        args.shift();\n    }\n    else {\n        str2 = str;\n    }\n    return str2.replace(formatRegExp, (_, idx, padLength, format, precision, pattern) => {\n        if (idx < 0 || idx >= args.length) {\n            throw new Error(\"Index must be greater or equal to zero and less than the arguments' length.\");\n        }\n        let rep = args[idx];\n        if (isNumeric(rep)) {\n            precision = precision == null ? null : parseInt(precision, 10);\n            switch (format) {\n                case \"f\":\n                case \"F\":\n                    precision = precision != null ? precision : 2;\n                    rep = toFixed(rep, precision);\n                    break;\n                case \"g\":\n                case \"G\":\n                    rep = precision != null ? toPrecision(rep, precision) : toPrecision(rep);\n                    break;\n                case \"e\":\n                case \"E\":\n                    rep = precision != null ? toExponential(rep, precision) : toExponential(rep);\n                    break;\n                case \"p\":\n                case \"P\":\n                    precision = precision != null ? precision : 2;\n                    rep = toFixed(multiply(rep, 100), precision) + \" %\";\n                    break;\n                case \"d\":\n                case \"D\":\n                    rep = precision != null ? padLeft(String(rep), precision, \"0\") : String(rep);\n                    break;\n                case \"x\":\n                case \"X\":\n                    rep = precision != null ? padLeft(toHex(rep), precision, \"0\") : toHex(rep);\n                    if (format === \"X\") {\n                        rep = rep.toUpperCase();\n                    }\n                    break;\n                default:\n                    if (pattern) {\n                        let sign = \"\";\n                        rep = pattern.replace(/([0#,]+)(\\.[0#]+)?/, (_, intPart, decimalPart) => {\n                            if (isLessThan(rep, 0)) {\n                                rep = multiply(rep, -1);\n                                sign = \"-\";\n                            }\n                            decimalPart = decimalPart == null ? \"\" : decimalPart.substring(1);\n                            rep = toFixed(rep, Math.max(decimalPart.length, 0));\n                            let [repInt, repDecimal] = rep.split(\".\");\n                            repDecimal || (repDecimal = \"\");\n                            const leftZeroes = intPart.replace(/,/g, \"\").replace(/^#+/, \"\").length;\n                            repInt = padLeft(repInt, leftZeroes, \"0\");\n                            const rightZeros = decimalPart.replace(/#+$/, \"\").length;\n                            if (rightZeros > repDecimal.length) {\n                                repDecimal = padRight(repDecimal, rightZeros, \"0\");\n                            }\n                            else if (rightZeros < repDecimal.length) {\n                                repDecimal = repDecimal.substring(0, rightZeros) + repDecimal.substring(rightZeros).replace(/0+$/, \"\");\n                            }\n                            // Thousands separator\n                            if (intPart.indexOf(\",\") > 0) {\n                                const i = repInt.length % 3;\n                                const thousandGroups = Math.floor(repInt.length / 3);\n                                let thousands = i > 0 ? repInt.substr(0, i) + (thousandGroups > 0 ? \",\" : \"\") : \"\";\n                                for (let j = 0; j < thousandGroups; j++) {\n                                    thousands += repInt.substr(i + j * 3, 3) + (j < thousandGroups - 1 ? \",\" : \"\");\n                                }\n                                repInt = thousands;\n                            }\n                            return repDecimal.length > 0 ? repInt + \".\" + repDecimal : repInt;\n                        });\n                        rep = sign + rep;\n                    }\n            }\n        }\n        else if (rep instanceof Date) {\n            rep = dateToString(rep, pattern || format);\n        }\n        else {\n            rep = toString(rep);\n        }\n        padLength = parseInt((padLength || \" \").substring(1), 10);\n        if (!isNaN(padLength)) {\n            rep = pad(String(rep), Math.abs(padLength), \" \", padLength < 0);\n        }\n        return rep;\n    });\n}\nexport function endsWith(str, search) {\n    const idx = str.lastIndexOf(search);\n    return idx >= 0 && idx === str.length - search.length;\n}\nexport function initialize(n, f) {\n    if (n < 0) {\n        throw new Error(\"String length must be non-negative\");\n    }\n    const xs = new Array(n);\n    for (let i = 0; i < n; i++) {\n        xs[i] = f(i);\n    }\n    return xs.join(\"\");\n}\nexport function insert(str, startIndex, value) {\n    if (startIndex < 0 || startIndex > str.length) {\n        throw new Error(\"startIndex is negative or greater than the length of this instance.\");\n    }\n    return str.substring(0, startIndex) + value + str.substring(startIndex);\n}\nexport function isNullOrEmpty(str) {\n    return typeof str !== \"string\" || str.length === 0;\n}\nexport function isNullOrWhiteSpace(str) {\n    return typeof str !== \"string\" || /^\\s*$/.test(str);\n}\nexport function concat(...xs) {\n    return xs.map((x) => String(x)).join(\"\");\n}\nexport function join(delimiter, xs) {\n    if (Array.isArray(xs)) {\n        return xs.join(delimiter);\n    }\n    else {\n        return Array.from(xs).join(delimiter);\n    }\n}\nexport function joinWithIndices(delimiter, xs, startIndex, count) {\n    const endIndexPlusOne = startIndex + count;\n    if (endIndexPlusOne > xs.length) {\n        throw new Error(\"Index and count must refer to a location within the buffer.\");\n    }\n    return xs.slice(startIndex, endIndexPlusOne).join(delimiter);\n}\nfunction notSupported(name) {\n    throw new Error(\"The environment doesn't support '\" + name + \"', please use a polyfill.\");\n}\nexport function toBase64String(inArray) {\n    let str = \"\";\n    for (let i = 0; i < inArray.length; i++) {\n        str += String.fromCharCode(inArray[i]);\n    }\n    return typeof btoa === \"function\" ? btoa(str) : notSupported(\"btoa\");\n}\nexport function fromBase64String(b64Encoded) {\n    const binary = typeof atob === \"function\" ? atob(b64Encoded) : notSupported(\"atob\");\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes;\n}\nfunction pad(str, len, ch, isRight) {\n    ch = ch || \" \";\n    len = len - str.length;\n    for (let i = 0; i < len; i++) {\n        str = isRight ? str + ch : ch + str;\n    }\n    return str;\n}\nexport function padLeft(str, len, ch) {\n    return pad(str, len, ch);\n}\nexport function padRight(str, len, ch) {\n    return pad(str, len, ch, true);\n}\nexport function remove(str, startIndex, count) {\n    if (startIndex >= str.length) {\n        throw new Error(\"startIndex must be less than length of string\");\n    }\n    if (typeof count === \"number\" && (startIndex + count) > str.length) {\n        throw new Error(\"Index and count must refer to a location within the string.\");\n    }\n    return str.slice(0, startIndex) + (typeof count === \"number\" ? str.substr(startIndex + count) : \"\");\n}\nexport function replace(str, search, replace) {\n    return str.replace(new RegExp(escape(search), \"g\"), replace);\n}\nexport function replicate(n, x) {\n    return initialize(n, () => x);\n}\nexport function getCharAtIndex(input, index) {\n    if (index < 0 || index >= input.length) {\n        throw new Error(\"Index was outside the bounds of the array.\");\n    }\n    return input[index];\n}\nexport function split(str, splitters, count, options) {\n    count = typeof count === \"number\" ? count : undefined;\n    options = typeof options === \"number\" ? options : 0;\n    if (count && count < 0) {\n        throw new Error(\"Count cannot be less than zero\");\n    }\n    if (count === 0) {\n        return [];\n    }\n    const removeEmpty = (options & 1) === 1;\n    const trim = (options & 2) === 2;\n    splitters = splitters || [];\n    splitters = splitters.filter(x => x).map(escape);\n    splitters = splitters.length > 0 ? splitters : [\"\\\\s\"];\n    const splits = [];\n    const reg = new RegExp(splitters.join(\"|\"), \"g\");\n    let findSplits = true;\n    let i = 0;\n    do {\n        const match = reg.exec(str);\n        if (match === null) {\n            const candidate = trim ? str.substring(i).trim() : str.substring(i);\n            if (!removeEmpty || candidate.length > 0) {\n                splits.push(candidate);\n            }\n            findSplits = false;\n        }\n        else {\n            const candidate = trim ? str.substring(i, match.index).trim() : str.substring(i, match.index);\n            if (!removeEmpty || candidate.length > 0) {\n                if (count != null && splits.length + 1 === count) {\n                    splits.push(trim ? str.substring(i).trim() : str.substring(i));\n                    findSplits = false;\n                }\n                else {\n                    splits.push(candidate);\n                }\n            }\n            i = reg.lastIndex;\n        }\n    } while (findSplits);\n    return splits;\n}\nexport function trim(str, ...chars) {\n    if (chars.length === 0) {\n        return str.trim();\n    }\n    const pattern = \"[\" + escape(chars.join(\"\")) + \"]+\";\n    return str.replace(new RegExp(\"^\" + pattern), \"\").replace(new RegExp(pattern + \"$\"), \"\");\n}\nexport function trimStart(str, ...chars) {\n    return chars.length === 0\n        ? str.trimStart()\n        : str.replace(new RegExp(\"^[\" + escape(chars.join(\"\")) + \"]+\"), \"\");\n}\nexport function trimEnd(str, ...chars) {\n    return chars.length === 0\n        ? str.trimEnd()\n        : str.replace(new RegExp(\"[\" + escape(chars.join(\"\")) + \"]+$\"), \"\");\n}\nexport function filter(pred, x) {\n    return x.split(\"\").filter((c) => pred(c)).join(\"\");\n}\nexport function substring(str, startIndex, length) {\n    if ((startIndex + (length || 0) > str.length)) {\n        throw new Error(\"Invalid startIndex and/or length\");\n    }\n    return length != null ? str.substr(startIndex, length) : str.substr(startIndex);\n}\nexport function fmt(strs, ...args) {\n    return ({ strs, args });\n}\nexport function fmtWith(fmts) {\n    return (strs, ...args) => ({ strs, args, fmts });\n}\nexport function getFormat(s) {\n    return s.fmts\n        ? s.strs.reduce((acc, newPart, index) => acc + `{${String(index - 1) + s.fmts[index - 1]}}` + newPart)\n        : s.strs.reduce((acc, newPart, index) => acc + `{${index - 1}}` + newPart);\n}\n","import { structuralHash, equals, compare } from \"./Util.js\";\n// Using a class here for better compatibility with TS files importing Some\nexport class Some {\n    constructor(value) {\n        this.value = value;\n    }\n    toJSON() {\n        return this.value;\n    }\n    // Don't add \"Some\" for consistency with erased options\n    toString() {\n        return String(this.value);\n    }\n    GetHashCode() {\n        return structuralHash(this.value);\n    }\n    Equals(other) {\n        if (other == null) {\n            return false;\n        }\n        else {\n            return equals(this.value, other instanceof Some ? other.value : other);\n        }\n    }\n    CompareTo(other) {\n        if (other == null) {\n            return 1;\n        }\n        else {\n            return compare(this.value, other instanceof Some ? other.value : other);\n        }\n    }\n}\nexport function value(x) {\n    if (x == null) {\n        throw new Error(\"Option has no value\");\n    }\n    else {\n        return x instanceof Some ? x.value : x;\n    }\n}\nexport function unwrap(opt) {\n    return opt instanceof Some ? opt.value : opt;\n}\nexport function some(x) {\n    return x == null || x instanceof Some ? new Some(x) : x;\n}\nexport function ofNullable(x) {\n    // This will fail with unit probably, an alternative would be:\n    // return x === null ? undefined : (x === undefined ? new Some(x) : x);\n    return x == null ? undefined : x;\n}\nexport function toNullable(x) {\n    return x == null ? null : value(x);\n}\nexport function flatten(x) {\n    return x == null ? undefined : value(x);\n}\nexport function toArray(opt) {\n    return (opt == null) ? [] : [value(opt)];\n}\nexport function defaultArg(opt, defaultValue) {\n    return (opt != null) ? value(opt) : defaultValue;\n}\nexport function defaultArgWith(opt, defThunk) {\n    return (opt != null) ? value(opt) : defThunk();\n}\nexport function orElse(opt, ifNone) {\n    return opt == null ? ifNone : opt;\n}\nexport function orElseWith(opt, ifNoneThunk) {\n    return opt == null ? ifNoneThunk() : opt;\n}\nexport function filter(predicate, opt) {\n    return (opt != null) ? (predicate(value(opt)) ? opt : undefined) : opt;\n}\nexport function map(mapping, opt) {\n    return (opt != null) ? some(mapping(value(opt))) : undefined;\n}\nexport function map2(mapping, opt1, opt2) {\n    return (opt1 != null && opt2 != null) ? mapping(value(opt1), value(opt2)) : undefined;\n}\nexport function map3(mapping, opt1, opt2, opt3) {\n    return (opt1 != null && opt2 != null && opt3 != null) ? mapping(value(opt1), value(opt2), value(opt3)) : undefined;\n}\nexport function bind(binder, opt) {\n    return opt != null ? binder(value(opt)) : undefined;\n}\nexport function tryOp(op, arg) {\n    try {\n        return some(op(arg));\n    }\n    catch {\n        return undefined;\n    }\n}\n","import { Helpers_allocateArrayFromCons } from \"./Native.js\";\nimport { value as value_2, map as map_1, defaultArg, some } from \"./Option.js\";\nimport { min as min_1, max as max_1 } from \"./Double.js\";\nimport { equals as equals_1, disposeSafe, getEnumerator, copyToArray, defaultOf } from \"./Util.js\";\nimport { SR_indexOutOfBounds } from \"./Global.js\";\nfunction indexNotFound() {\n    throw new Error(\"An index satisfying the predicate was not found in the collection.\");\n}\nfunction differentLengths() {\n    throw new Error(\"Arrays had different lengths\");\n}\nexport function append(array1, array2, cons) {\n    const len1 = array1.length | 0;\n    const len2 = array2.length | 0;\n    const newArray = Helpers_allocateArrayFromCons(cons, len1 + len2);\n    for (let i = 0; i <= (len1 - 1); i++) {\n        newArray[i] = array1[i];\n    }\n    for (let i_1 = 0; i_1 <= (len2 - 1); i_1++) {\n        newArray[i_1 + len1] = array2[i_1];\n    }\n    return newArray;\n}\nexport function filter(predicate, array) {\n    return array.filter(predicate);\n}\nexport function fill(target, targetIndex, count, value) {\n    const start = targetIndex | 0;\n    return target.fill(value, start, (start + count));\n}\nexport function getSubArray(array, start, count) {\n    const start_1 = start | 0;\n    return array.slice(start_1, (start_1 + count));\n}\nexport function last(array) {\n    if (array.length === 0) {\n        throw new Error(\"The input array was empty\\\\nParameter name: array\");\n    }\n    return array[array.length - 1];\n}\nexport function tryLast(array) {\n    if (array.length === 0) {\n        return void 0;\n    }\n    else {\n        return some(array[array.length - 1]);\n    }\n}\nexport function mapIndexed(f, source, cons) {\n    const len = source.length | 0;\n    const target = Helpers_allocateArrayFromCons(cons, len);\n    for (let i = 0; i <= (len - 1); i++) {\n        target[i] = f(i, source[i]);\n    }\n    return target;\n}\nexport function map(f, source, cons) {\n    const len = source.length | 0;\n    const target = Helpers_allocateArrayFromCons(cons, len);\n    for (let i = 0; i <= (len - 1); i++) {\n        target[i] = f(source[i]);\n    }\n    return target;\n}\nexport function mapIndexed2(f, source1, source2, cons) {\n    if (source1.length !== source2.length) {\n        throw new Error(\"Arrays had different lengths\");\n    }\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\n    for (let i = 0; i <= (source1.length - 1); i++) {\n        result[i] = f(i, source1[i], source2[i]);\n    }\n    return result;\n}\nexport function map2(f, source1, source2, cons) {\n    if (source1.length !== source2.length) {\n        throw new Error(\"Arrays had different lengths\");\n    }\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\n    for (let i = 0; i <= (source1.length - 1); i++) {\n        result[i] = f(source1[i], source2[i]);\n    }\n    return result;\n}\nexport function mapIndexed3(f, source1, source2, source3, cons) {\n    if ((source1.length !== source2.length) ? true : (source2.length !== source3.length)) {\n        throw new Error(\"Arrays had different lengths\");\n    }\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\n    for (let i = 0; i <= (source1.length - 1); i++) {\n        result[i] = f(i, source1[i], source2[i], source3[i]);\n    }\n    return result;\n}\nexport function map3(f, source1, source2, source3, cons) {\n    if ((source1.length !== source2.length) ? true : (source2.length !== source3.length)) {\n        throw new Error(\"Arrays had different lengths\");\n    }\n    const result = Helpers_allocateArrayFromCons(cons, source1.length);\n    for (let i = 0; i <= (source1.length - 1); i++) {\n        result[i] = f(source1[i], source2[i], source3[i]);\n    }\n    return result;\n}\nexport function mapFold(mapping, state, array, cons) {\n    const matchValue = array.length | 0;\n    if (matchValue === 0) {\n        return [[], state];\n    }\n    else {\n        let acc = state;\n        const res = Helpers_allocateArrayFromCons(cons, matchValue);\n        for (let i = 0; i <= (array.length - 1); i++) {\n            const patternInput = mapping(acc, array[i]);\n            res[i] = patternInput[0];\n            acc = patternInput[1];\n        }\n        return [res, acc];\n    }\n}\nexport function mapFoldBack(mapping, array, state, cons) {\n    const matchValue = array.length | 0;\n    if (matchValue === 0) {\n        return [[], state];\n    }\n    else {\n        let acc = state;\n        const res = Helpers_allocateArrayFromCons(cons, matchValue);\n        for (let i = array.length - 1; i >= 0; i--) {\n            const patternInput = mapping(array[i], acc);\n            res[i] = patternInput[0];\n            acc = patternInput[1];\n        }\n        return [res, acc];\n    }\n}\nexport function indexed(source) {\n    const len = source.length | 0;\n    const target = new Array(len);\n    for (let i = 0; i <= (len - 1); i++) {\n        target[i] = [i, source[i]];\n    }\n    return target;\n}\nexport function truncate(count, array) {\n    const count_1 = max_1(0, count) | 0;\n    return array.slice(0, (0 + count_1));\n}\nexport function concat(arrays, cons) {\n    const arrays_1 = Array.isArray(arrays) ? arrays : (Array.from(arrays));\n    const matchValue = arrays_1.length | 0;\n    switch (matchValue) {\n        case 0:\n            return Helpers_allocateArrayFromCons(cons, 0);\n        case 1:\n            return arrays_1[0];\n        default: {\n            let totalIdx = 0;\n            let totalLength = 0;\n            for (let idx = 0; idx <= (arrays_1.length - 1); idx++) {\n                const arr_1 = arrays_1[idx];\n                totalLength = ((totalLength + arr_1.length) | 0);\n            }\n            const result = Helpers_allocateArrayFromCons(cons, totalLength);\n            for (let idx_1 = 0; idx_1 <= (arrays_1.length - 1); idx_1++) {\n                const arr_2 = arrays_1[idx_1];\n                for (let j = 0; j <= (arr_2.length - 1); j++) {\n                    result[totalIdx] = arr_2[j];\n                    totalIdx = ((totalIdx + 1) | 0);\n                }\n            }\n            return result;\n        }\n    }\n}\nexport function collect(mapping, array, cons) {\n    return concat(map(mapping, array, defaultOf()), cons);\n}\nexport function where(predicate, array) {\n    return array.filter(predicate);\n}\nexport function indexOf(array, item_1, start, count, eq) {\n    const start_1 = defaultArg(start, 0) | 0;\n    const end$0027 = defaultArg(map_1((c) => (start_1 + c), count), array.length) | 0;\n    const loop = (i_mut) => {\n        loop: while (true) {\n            const i = i_mut;\n            if (i >= end$0027) {\n                return -1;\n            }\n            else if (eq.Equals(item_1, array[i])) {\n                return i | 0;\n            }\n            else {\n                i_mut = (i + 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(start_1) | 0;\n}\nexport function contains(value, array, eq) {\n    return indexOf(array, value, void 0, void 0, eq) >= 0;\n}\nexport function empty(cons) {\n    return Helpers_allocateArrayFromCons(cons, 0);\n}\nexport function singleton(value, cons) {\n    const ar = Helpers_allocateArrayFromCons(cons, 1);\n    ar[0] = value;\n    return ar;\n}\nexport function initialize(count, initializer, cons) {\n    if (count < 0) {\n        throw new Error(\"The input must be non-negative\\\\nParameter name: count\");\n    }\n    const result = Helpers_allocateArrayFromCons(cons, count);\n    for (let i = 0; i <= (count - 1); i++) {\n        result[i] = initializer(i);\n    }\n    return result;\n}\nexport function pairwise(array) {\n    if (array.length < 2) {\n        return [];\n    }\n    else {\n        const count = (array.length - 1) | 0;\n        const result = new Array(count);\n        for (let i = 0; i <= (count - 1); i++) {\n            result[i] = [array[i], array[i + 1]];\n        }\n        return result;\n    }\n}\nexport function replicate(count, initial, cons) {\n    if (count < 0) {\n        throw new Error(\"The input must be non-negative\\\\nParameter name: count\");\n    }\n    const result = Helpers_allocateArrayFromCons(cons, count);\n    for (let i = 0; i <= (result.length - 1); i++) {\n        result[i] = initial;\n    }\n    return result;\n}\nexport function copy(array) {\n    return array.slice();\n}\nexport function copyTo(source, sourceIndex, target, targetIndex, count) {\n    copyToArray(source, sourceIndex, target, targetIndex, count);\n}\nexport function reverse(array) {\n    const array_2 = array.slice();\n    return array_2.reverse();\n}\nexport function scan(folder, state, array, cons) {\n    const res = Helpers_allocateArrayFromCons(cons, array.length + 1);\n    res[0] = state;\n    for (let i = 0; i <= (array.length - 1); i++) {\n        res[i + 1] = folder(res[i], array[i]);\n    }\n    return res;\n}\nexport function scanBack(folder, array, state, cons) {\n    const res = Helpers_allocateArrayFromCons(cons, array.length + 1);\n    res[array.length] = state;\n    for (let i = array.length - 1; i >= 0; i--) {\n        res[i] = folder(array[i], res[i + 1]);\n    }\n    return res;\n}\nexport function skip(count, array, cons) {\n    if (count > array.length) {\n        throw new Error(\"count is greater than array length\\\\nParameter name: count\");\n    }\n    if (count === array.length) {\n        return Helpers_allocateArrayFromCons(cons, 0);\n    }\n    else {\n        const count_1 = ((count < 0) ? 0 : count) | 0;\n        return array.slice(count_1);\n    }\n}\nexport function skipWhile(predicate, array, cons) {\n    let count = 0;\n    while ((count < array.length) && predicate(array[count])) {\n        count = ((count + 1) | 0);\n    }\n    if (count === array.length) {\n        return Helpers_allocateArrayFromCons(cons, 0);\n    }\n    else {\n        const count_1 = count | 0;\n        return array.slice(count_1);\n    }\n}\nexport function take(count, array, cons) {\n    if (count < 0) {\n        throw new Error(\"The input must be non-negative\\\\nParameter name: count\");\n    }\n    if (count > array.length) {\n        throw new Error(\"count is greater than array length\\\\nParameter name: count\");\n    }\n    if (count === 0) {\n        return Helpers_allocateArrayFromCons(cons, 0);\n    }\n    else {\n        return array.slice(0, (0 + count));\n    }\n}\nexport function takeWhile(predicate, array, cons) {\n    let count = 0;\n    while ((count < array.length) && predicate(array[count])) {\n        count = ((count + 1) | 0);\n    }\n    if (count === 0) {\n        return Helpers_allocateArrayFromCons(cons, 0);\n    }\n    else {\n        const count_1 = count | 0;\n        return array.slice(0, (0 + count_1));\n    }\n}\nexport function addInPlace(x, array) {\n    array.push(x);\n}\nexport function addRangeInPlace(range, array) {\n    const enumerator = getEnumerator(range);\n    try {\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            addInPlace(enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), array);\n        }\n    }\n    finally {\n        disposeSafe(enumerator);\n    }\n}\nexport function insertRangeInPlace(index, range, array) {\n    let index_1;\n    let i = index;\n    const enumerator = getEnumerator(range);\n    try {\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            const x = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n            (index_1 = (i | 0), array.splice(index_1, 0, x));\n            i = ((i + 1) | 0);\n        }\n    }\n    finally {\n        disposeSafe(enumerator);\n    }\n}\nexport function removeInPlace(item_1, array, eq) {\n    const i = indexOf(array, item_1, void 0, void 0, eq) | 0;\n    if (i > -1) {\n        array.splice(i, 1);\n        return true;\n    }\n    else {\n        return false;\n    }\n}\nexport function removeAllInPlace(predicate, array) {\n    const countRemoveAll = (count) => {\n        const i = (array.findIndex(predicate)) | 0;\n        if (i > -1) {\n            array.splice(i, 1);\n            return (countRemoveAll(count) + 1) | 0;\n        }\n        else {\n            return count | 0;\n        }\n    };\n    return countRemoveAll(0) | 0;\n}\nexport function partition(f, source, cons) {\n    const len = source.length | 0;\n    const res1 = Helpers_allocateArrayFromCons(cons, len);\n    const res2 = Helpers_allocateArrayFromCons(cons, len);\n    let iTrue = 0;\n    let iFalse = 0;\n    for (let i = 0; i <= (len - 1); i++) {\n        if (f(source[i])) {\n            res1[iTrue] = source[i];\n            iTrue = ((iTrue + 1) | 0);\n        }\n        else {\n            res2[iFalse] = source[i];\n            iFalse = ((iFalse + 1) | 0);\n        }\n    }\n    return [truncate(iTrue, res1), truncate(iFalse, res2)];\n}\nexport function find(predicate, array) {\n    const matchValue = array.find(predicate);\n    if (matchValue == null) {\n        return indexNotFound();\n    }\n    else {\n        return value_2(matchValue);\n    }\n}\nexport function tryFind(predicate, array) {\n    return array.find(predicate);\n}\nexport function findIndex(predicate, array) {\n    const matchValue = (array.findIndex(predicate)) | 0;\n    if (matchValue > -1) {\n        return matchValue | 0;\n    }\n    else {\n        indexNotFound();\n        return -1;\n    }\n}\nexport function tryFindIndex(predicate, array) {\n    const matchValue = (array.findIndex(predicate)) | 0;\n    if (matchValue > -1) {\n        return matchValue;\n    }\n    else {\n        return void 0;\n    }\n}\nexport function pick(chooser, array) {\n    const loop = (i_mut) => {\n        loop: while (true) {\n            const i = i_mut;\n            if (i >= array.length) {\n                return indexNotFound();\n            }\n            else {\n                const matchValue = chooser(array[i]);\n                if (matchValue != null) {\n                    return value_2(matchValue);\n                }\n                else {\n                    i_mut = (i + 1);\n                    continue loop;\n                }\n            }\n            break;\n        }\n    };\n    return loop(0);\n}\nexport function tryPick(chooser, array) {\n    const loop = (i_mut) => {\n        loop: while (true) {\n            const i = i_mut;\n            if (i >= array.length) {\n                return void 0;\n            }\n            else {\n                const matchValue = chooser(array[i]);\n                if (matchValue == null) {\n                    i_mut = (i + 1);\n                    continue loop;\n                }\n                else {\n                    return matchValue;\n                }\n            }\n            break;\n        }\n    };\n    return loop(0);\n}\nexport function findBack(predicate, array) {\n    const loop = (i_mut) => {\n        loop: while (true) {\n            const i = i_mut;\n            if (i < 0) {\n                return indexNotFound();\n            }\n            else if (predicate(array[i])) {\n                return array[i];\n            }\n            else {\n                i_mut = (i - 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(array.length - 1);\n}\nexport function tryFindBack(predicate, array) {\n    const loop = (i_mut) => {\n        loop: while (true) {\n            const i = i_mut;\n            if (i < 0) {\n                return void 0;\n            }\n            else if (predicate(array[i])) {\n                return some(array[i]);\n            }\n            else {\n                i_mut = (i - 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(array.length - 1);\n}\nexport function findLastIndex(predicate, array) {\n    const loop = (i_mut) => {\n        loop: while (true) {\n            const i = i_mut;\n            if (i < 0) {\n                return -1;\n            }\n            else if (predicate(array[i])) {\n                return i | 0;\n            }\n            else {\n                i_mut = (i - 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(array.length - 1) | 0;\n}\nexport function findIndexBack(predicate, array) {\n    const loop = (i_mut) => {\n        loop: while (true) {\n            const i = i_mut;\n            if (i < 0) {\n                indexNotFound();\n                return -1;\n            }\n            else if (predicate(array[i])) {\n                return i | 0;\n            }\n            else {\n                i_mut = (i - 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(array.length - 1) | 0;\n}\nexport function tryFindIndexBack(predicate, array) {\n    const loop = (i_mut) => {\n        loop: while (true) {\n            const i = i_mut;\n            if (i < 0) {\n                return void 0;\n            }\n            else if (predicate(array[i])) {\n                return i;\n            }\n            else {\n                i_mut = (i - 1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(array.length - 1);\n}\nexport function choose(chooser, array, cons) {\n    const res = [];\n    for (let i = 0; i <= (array.length - 1); i++) {\n        const matchValue = chooser(array[i]);\n        if (matchValue != null) {\n            const y = value_2(matchValue);\n            res.push(y);\n        }\n    }\n    if (equals_1(cons, defaultOf())) {\n        return res;\n    }\n    else {\n        return map((x) => x, res, cons);\n    }\n}\nexport function foldIndexed(folder, state, array) {\n    return array.reduce(((delegateArg, delegateArg_1, delegateArg_2) => folder(delegateArg_2, delegateArg, delegateArg_1)), state);\n}\nexport function fold(folder, state, array) {\n    const folder_1 = folder;\n    return array.reduce((folder_1), state);\n}\nexport function iterate(action, array) {\n    for (let i = 0; i <= (array.length - 1); i++) {\n        action(array[i]);\n    }\n}\nexport function iterateIndexed(action, array) {\n    for (let i = 0; i <= (array.length - 1); i++) {\n        action(i, array[i]);\n    }\n}\nexport function iterate2(action, array1, array2) {\n    if (array1.length !== array2.length) {\n        differentLengths();\n    }\n    for (let i = 0; i <= (array1.length - 1); i++) {\n        action(array1[i], array2[i]);\n    }\n}\nexport function iterateIndexed2(action, array1, array2) {\n    if (array1.length !== array2.length) {\n        differentLengths();\n    }\n    for (let i = 0; i <= (array1.length - 1); i++) {\n        action(i, array1[i], array2[i]);\n    }\n}\nexport function isEmpty(array) {\n    return array.length === 0;\n}\nexport function forAll(predicate, array) {\n    return array.every(predicate);\n}\nexport function permute(f, array) {\n    const size = array.length | 0;\n    const res = array.slice();\n    const checkFlags = new Array(size);\n    iterateIndexed((i, x) => {\n        const j = f(i) | 0;\n        if ((j < 0) ? true : (j >= size)) {\n            throw new Error(\"Not a valid permutation\");\n        }\n        res[j] = x;\n        checkFlags[j] = 1;\n    }, array);\n    if (!(checkFlags.every((y) => (1 === y)))) {\n        throw new Error(\"Not a valid permutation\");\n    }\n    return res;\n}\nexport function setSlice(target, lower, upper, source) {\n    const lower_1 = defaultArg(lower, 0) | 0;\n    const upper_1 = defaultArg(upper, -1) | 0;\n    const length = (((upper_1 >= 0) ? upper_1 : (target.length - 1)) - lower_1) | 0;\n    for (let i = 0; i <= length; i++) {\n        target[i + lower_1] = source[i];\n    }\n}\nexport function sortInPlaceBy(projection, xs, comparer) {\n    xs.sort((x, y) => comparer.Compare(projection(x), projection(y)));\n}\nexport function sortInPlace(xs, comparer) {\n    xs.sort((x, y) => comparer.Compare(x, y));\n}\nexport function sort(xs, comparer) {\n    const xs_1 = xs.slice();\n    xs_1.sort((x, y) => comparer.Compare(x, y));\n    return xs_1;\n}\nexport function sortBy(projection, xs, comparer) {\n    const xs_1 = xs.slice();\n    xs_1.sort((x, y) => comparer.Compare(projection(x), projection(y)));\n    return xs_1;\n}\nexport function sortDescending(xs, comparer) {\n    const xs_1 = xs.slice();\n    xs_1.sort((x, y) => (comparer.Compare(x, y) * -1));\n    return xs_1;\n}\nexport function sortByDescending(projection, xs, comparer) {\n    const xs_1 = xs.slice();\n    xs_1.sort((x, y) => (comparer.Compare(projection(x), projection(y)) * -1));\n    return xs_1;\n}\nexport function sortWith(comparer, xs) {\n    const comparer_1 = comparer;\n    const xs_1 = xs.slice();\n    xs_1.sort(comparer_1);\n    return xs_1;\n}\nexport function allPairs(xs, ys) {\n    const len1 = xs.length | 0;\n    const len2 = ys.length | 0;\n    const res = new Array(len1 * len2);\n    for (let i = 0; i <= (xs.length - 1); i++) {\n        for (let j = 0; j <= (ys.length - 1); j++) {\n            res[(i * len2) + j] = [xs[i], ys[j]];\n        }\n    }\n    return res;\n}\nexport function unfold(generator, state) {\n    const res = [];\n    const loop = (state_1_mut) => {\n        loop: while (true) {\n            const state_1 = state_1_mut;\n            const matchValue = generator(state_1);\n            if (matchValue != null) {\n                const x = value_2(matchValue)[0];\n                const s = value_2(matchValue)[1];\n                res.push(x);\n                state_1_mut = s;\n                continue loop;\n            }\n            break;\n        }\n    };\n    loop(state);\n    return res;\n}\nexport function unzip(array) {\n    const len = array.length | 0;\n    const res1 = new Array(len);\n    const res2 = new Array(len);\n    iterateIndexed((i, tupledArg) => {\n        res1[i] = tupledArg[0];\n        res2[i] = tupledArg[1];\n    }, array);\n    return [res1, res2];\n}\nexport function unzip3(array) {\n    const len = array.length | 0;\n    const res1 = new Array(len);\n    const res2 = new Array(len);\n    const res3 = new Array(len);\n    iterateIndexed((i, tupledArg) => {\n        res1[i] = tupledArg[0];\n        res2[i] = tupledArg[1];\n        res3[i] = tupledArg[2];\n    }, array);\n    return [res1, res2, res3];\n}\nexport function zip(array1, array2) {\n    if (array1.length !== array2.length) {\n        differentLengths();\n    }\n    const result = new Array(array1.length);\n    for (let i = 0; i <= (array1.length - 1); i++) {\n        result[i] = [array1[i], array2[i]];\n    }\n    return result;\n}\nexport function zip3(array1, array2, array3) {\n    if ((array1.length !== array2.length) ? true : (array2.length !== array3.length)) {\n        differentLengths();\n    }\n    const result = new Array(array1.length);\n    for (let i = 0; i <= (array1.length - 1); i++) {\n        result[i] = [array1[i], array2[i], array3[i]];\n    }\n    return result;\n}\nexport function chunkBySize(chunkSize, array) {\n    if (chunkSize < 1) {\n        throw new Error(\"The input must be positive.\\\\nParameter name: size\");\n    }\n    if (array.length === 0) {\n        return [[]];\n    }\n    else {\n        const result = [];\n        for (let x = 0; x <= (~~Math.ceil(array.length / chunkSize) - 1); x++) {\n            let slice;\n            const start_1 = (x * chunkSize) | 0;\n            slice = (array.slice(start_1, (start_1 + chunkSize)));\n            result.push(slice);\n        }\n        return result;\n    }\n}\nexport function splitAt(index, array) {\n    if ((index < 0) ? true : (index > array.length)) {\n        throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n    }\n    return [array.slice(0, (0 + index)), array.slice(index)];\n}\nexport function compareWith(comparer, source1, source2) {\n    if (source1 == null) {\n        if (source2 == null) {\n            return 0;\n        }\n        else {\n            return -1;\n        }\n    }\n    else if (source2 == null) {\n        return 1;\n    }\n    else {\n        const len1 = source1.length | 0;\n        const len2 = source2.length | 0;\n        const len = ((len1 < len2) ? len1 : len2) | 0;\n        let i = 0;\n        let res = 0;\n        while ((res === 0) && (i < len)) {\n            res = (comparer(source1[i], source2[i]) | 0);\n            i = ((i + 1) | 0);\n        }\n        if (res !== 0) {\n            return res | 0;\n        }\n        else if (len1 > len2) {\n            return 1;\n        }\n        else if (len1 < len2) {\n            return -1;\n        }\n        else {\n            return 0;\n        }\n    }\n}\nexport function compareTo(comparer, source1, source2) {\n    if (source1 == null) {\n        if (source2 == null) {\n            return 0;\n        }\n        else {\n            return -1;\n        }\n    }\n    else if (source2 == null) {\n        return 1;\n    }\n    else {\n        const len1 = source1.length | 0;\n        const len2 = source2.length | 0;\n        if (len1 > len2) {\n            return 1;\n        }\n        else if (len1 < len2) {\n            return -1;\n        }\n        else {\n            let i = 0;\n            let res = 0;\n            while ((res === 0) && (i < len1)) {\n                res = (comparer(source1[i], source2[i]) | 0);\n                i = ((i + 1) | 0);\n            }\n            return res | 0;\n        }\n    }\n}\nexport function equalsWith(equals, array1, array2) {\n    if (array1 == null) {\n        if (array2 == null) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    else if (array2 == null) {\n        return false;\n    }\n    else {\n        let i = 0;\n        let result = true;\n        const length1 = array1.length | 0;\n        const length2 = array2.length | 0;\n        if (length1 > length2) {\n            return false;\n        }\n        else if (length1 < length2) {\n            return false;\n        }\n        else {\n            while ((i < length1) && result) {\n                result = equals(array1[i], array2[i]);\n                i = ((i + 1) | 0);\n            }\n            return result;\n        }\n    }\n}\nexport function exactlyOne(array) {\n    switch (array.length) {\n        case 1:\n            return array[0];\n        case 0:\n            throw new Error(\"The input sequence was empty\\\\nParameter name: array\");\n        default:\n            throw new Error(\"Input array too long\\\\nParameter name: array\");\n    }\n}\nexport function tryExactlyOne(array) {\n    if (array.length === 1) {\n        return some(array[0]);\n    }\n    else {\n        return void 0;\n    }\n}\nexport function head(array) {\n    if (array.length === 0) {\n        throw new Error(\"The input array was empty\\\\nParameter name: array\");\n    }\n    else {\n        return array[0];\n    }\n}\nexport function tryHead(array) {\n    if (array.length === 0) {\n        return void 0;\n    }\n    else {\n        return some(array[0]);\n    }\n}\nexport function tail(array) {\n    if (array.length === 0) {\n        throw new Error(\"Not enough elements\\\\nParameter name: array\");\n    }\n    return array.slice(1);\n}\nexport function item(index, array) {\n    return array[index];\n}\nexport function tryItem(index, array) {\n    if ((index < 0) ? true : (index >= array.length)) {\n        return void 0;\n    }\n    else {\n        return some(array[index]);\n    }\n}\nexport function foldBackIndexed(folder, array, state) {\n    return array.reduceRight(((delegateArg, delegateArg_1, delegateArg_2) => folder(delegateArg_2, delegateArg_1, delegateArg)), state);\n}\nexport function foldBack(folder, array, state) {\n    return array.reduceRight(((delegateArg, delegateArg_1) => folder(delegateArg_1, delegateArg)), state);\n}\nexport function foldIndexed2(folder, state, array1, array2) {\n    let acc = state;\n    if (array1.length !== array2.length) {\n        throw new Error(\"Arrays have different lengths\");\n    }\n    for (let i = 0; i <= (array1.length - 1); i++) {\n        acc = folder(i, acc, array1[i], array2[i]);\n    }\n    return acc;\n}\nexport function fold2(folder, state, array1, array2) {\n    return foldIndexed2((_arg, acc, x, y) => folder(acc, x, y), state, array1, array2);\n}\nexport function foldBackIndexed2(folder, array1, array2, state) {\n    let acc = state;\n    if (array1.length !== array2.length) {\n        differentLengths();\n    }\n    const size = array1.length | 0;\n    for (let i = 1; i <= size; i++) {\n        acc = folder(i - 1, array1[size - i], array2[size - i], acc);\n    }\n    return acc;\n}\nexport function foldBack2(f, array1, array2, state) {\n    return foldBackIndexed2((_arg, x, y, acc) => f(x, y, acc), array1, array2, state);\n}\nexport function reduce(reduction, array) {\n    if (array.length === 0) {\n        throw new Error(\"The input array was empty\");\n    }\n    const reduction_1 = reduction;\n    return array.reduce(reduction_1);\n}\nexport function reduceBack(reduction, array) {\n    if (array.length === 0) {\n        throw new Error(\"The input array was empty\");\n    }\n    const reduction_1 = reduction;\n    return array.reduceRight(reduction_1);\n}\nexport function forAll2(predicate, array1, array2) {\n    return fold2((acc, x, y) => (acc && predicate(x, y)), true, array1, array2);\n}\nexport function existsOffset(predicate_mut, array_mut, index_mut) {\n    existsOffset: while (true) {\n        const predicate = predicate_mut, array = array_mut, index = index_mut;\n        if (index === array.length) {\n            return false;\n        }\n        else if (predicate(array[index])) {\n            return true;\n        }\n        else {\n            predicate_mut = predicate;\n            array_mut = array;\n            index_mut = (index + 1);\n            continue existsOffset;\n        }\n        break;\n    }\n}\nexport function exists(predicate, array) {\n    return existsOffset(predicate, array, 0);\n}\nexport function existsOffset2(predicate_mut, array1_mut, array2_mut, index_mut) {\n    existsOffset2: while (true) {\n        const predicate = predicate_mut, array1 = array1_mut, array2 = array2_mut, index = index_mut;\n        if (index === array1.length) {\n            return false;\n        }\n        else if (predicate(array1[index], array2[index])) {\n            return true;\n        }\n        else {\n            predicate_mut = predicate;\n            array1_mut = array1;\n            array2_mut = array2;\n            index_mut = (index + 1);\n            continue existsOffset2;\n        }\n        break;\n    }\n}\nexport function exists2(predicate, array1, array2) {\n    if (array1.length !== array2.length) {\n        differentLengths();\n    }\n    return existsOffset2(predicate, array1, array2, 0);\n}\nexport function sum(array, adder) {\n    let acc = adder.GetZero();\n    for (let i = 0; i <= (array.length - 1); i++) {\n        acc = adder.Add(acc, array[i]);\n    }\n    return acc;\n}\nexport function sumBy(projection, array, adder) {\n    let acc = adder.GetZero();\n    for (let i = 0; i <= (array.length - 1); i++) {\n        acc = adder.Add(acc, projection(array[i]));\n    }\n    return acc;\n}\nexport function maxBy(projection, xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\n}\nexport function max(xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), xs);\n}\nexport function minBy(projection, xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\n}\nexport function min(xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\n}\nexport function average(array, averager) {\n    if (array.length === 0) {\n        throw new Error(\"The input array was empty\\\\nParameter name: array\");\n    }\n    let total = averager.GetZero();\n    for (let i = 0; i <= (array.length - 1); i++) {\n        total = averager.Add(total, array[i]);\n    }\n    return averager.DivideByInt(total, array.length);\n}\nexport function averageBy(projection, array, averager) {\n    if (array.length === 0) {\n        throw new Error(\"The input array was empty\\\\nParameter name: array\");\n    }\n    let total = averager.GetZero();\n    for (let i = 0; i <= (array.length - 1); i++) {\n        total = averager.Add(total, projection(array[i]));\n    }\n    return averager.DivideByInt(total, array.length);\n}\nexport function windowed(windowSize, source) {\n    if (windowSize <= 0) {\n        throw new Error(\"windowSize must be positive\");\n    }\n    let res;\n    const len = max_1(0, (source.length - windowSize) + 1) | 0;\n    res = (new Array(len));\n    for (let i = windowSize; i <= source.length; i++) {\n        res[i - windowSize] = source.slice(i - windowSize, (i - 1) + 1);\n    }\n    return res;\n}\nexport function splitInto(chunks, array) {\n    if (chunks < 1) {\n        throw new Error(\"The input must be positive.\\\\nParameter name: chunks\");\n    }\n    if (array.length === 0) {\n        return [[]];\n    }\n    else {\n        const result = [];\n        const chunks_1 = min_1(chunks, array.length) | 0;\n        const minChunkSize = ~~(array.length / chunks_1) | 0;\n        const chunksWithExtraItem = (array.length % chunks_1) | 0;\n        for (let i = 0; i <= (chunks_1 - 1); i++) {\n            const chunkSize = ((i < chunksWithExtraItem) ? (minChunkSize + 1) : minChunkSize) | 0;\n            let slice;\n            const start_1 = ((i * minChunkSize) + min_1(chunksWithExtraItem, i)) | 0;\n            slice = (array.slice(start_1, (start_1 + chunkSize)));\n            result.push(slice);\n        }\n        return result;\n    }\n}\nexport function transpose(arrays, cons) {\n    const arrays_1 = Array.isArray(arrays) ? arrays : (Array.from(arrays));\n    const len = arrays_1.length | 0;\n    if (len === 0) {\n        return new Array(0);\n    }\n    else {\n        const firstArray = arrays_1[0];\n        const lenInner = firstArray.length | 0;\n        if (!forAll((a) => (a.length === lenInner), arrays_1)) {\n            differentLengths();\n        }\n        const result = new Array(lenInner);\n        for (let i = 0; i <= (lenInner - 1); i++) {\n            result[i] = Helpers_allocateArrayFromCons(cons, len);\n            for (let j = 0; j <= (len - 1); j++) {\n                result[i][j] = arrays_1[j][i];\n            }\n        }\n        return result;\n    }\n}\nexport function insertAt(index, y, xs, cons) {\n    const len = xs.length | 0;\n    if ((index < 0) ? true : (index > len)) {\n        throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n    }\n    const target = Helpers_allocateArrayFromCons(cons, len + 1);\n    for (let i = 0; i <= (index - 1); i++) {\n        target[i] = xs[i];\n    }\n    target[index] = y;\n    for (let i_1 = index; i_1 <= (len - 1); i_1++) {\n        target[i_1 + 1] = xs[i_1];\n    }\n    return target;\n}\nexport function insertManyAt(index, ys, xs, cons) {\n    const len = xs.length | 0;\n    if ((index < 0) ? true : (index > len)) {\n        throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n    }\n    const ys_1 = Array.from(ys);\n    const len2 = ys_1.length | 0;\n    const target = Helpers_allocateArrayFromCons(cons, len + len2);\n    for (let i = 0; i <= (index - 1); i++) {\n        target[i] = xs[i];\n    }\n    for (let i_1 = 0; i_1 <= (len2 - 1); i_1++) {\n        target[index + i_1] = ys_1[i_1];\n    }\n    for (let i_2 = index; i_2 <= (len - 1); i_2++) {\n        target[i_2 + len2] = xs[i_2];\n    }\n    return target;\n}\nexport function removeAt(index, xs) {\n    if ((index < 0) ? true : (index >= xs.length)) {\n        throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n    }\n    let i = -1;\n    return filter((_arg) => {\n        i = ((i + 1) | 0);\n        return i !== index;\n    }, xs);\n}\nexport function removeManyAt(index, count, xs) {\n    let i = -1;\n    let status = -1;\n    const ys = filter((_arg) => {\n        i = ((i + 1) | 0);\n        if (i === index) {\n            status = 0;\n            return false;\n        }\n        else if (i > index) {\n            if (i < (index + count)) {\n                return false;\n            }\n            else {\n                status = 1;\n                return true;\n            }\n        }\n        else {\n            return true;\n        }\n    }, xs);\n    const status_1 = (((status === 0) && ((i + 1) === (index + count))) ? 1 : status) | 0;\n    if (status_1 < 1) {\n        throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + ((status_1 < 0) ? \"index\" : \"count\"));\n    }\n    return ys;\n}\nexport function updateAt(index, y, xs, cons) {\n    const len = xs.length | 0;\n    if ((index < 0) ? true : (index >= len)) {\n        throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n    }\n    const target = Helpers_allocateArrayFromCons(cons, len);\n    for (let i = 0; i <= (len - 1); i++) {\n        target[i] = ((i === index) ? y : xs[i]);\n    }\n    return target;\n}\n","import { join } from \"./String.js\";\nimport { defaultArg, some, value as value_1 } from \"./Option.js\";\nimport { disposeSafe, isArrayLike, defaultOf, toIterator, getEnumerator, compare, structuralHash, equals } from \"./Util.js\";\nimport { Record } from \"./Types.js\";\nimport { class_type, record_type, option_type } from \"./Reflection.js\";\nimport { SR_inputSequenceTooLong, SR_inputSequenceEmpty, SR_inputMustBeNonNegative, SR_notEnoughElements, SR_differentLengths, SR_keyNotFoundAlt, SR_indexOutOfBounds, SR_inputWasEmpty } from \"./Global.js\";\nimport { transpose as transpose_1, splitInto as splitInto_1, windowed as windowed_1, pairwise as pairwise_1, chunkBySize as chunkBySize_1, map as map_1, permute as permute_1, tryFindIndexBack as tryFindIndexBack_1, tryFindBack as tryFindBack_1, scanBack as scanBack_1, foldBack2 as foldBack2_1, foldBack as foldBack_1, fill } from \"./Array.js\";\nexport class FSharpList extends Record {\n    constructor(head, tail) {\n        super();\n        this.head = head;\n        this.tail = tail;\n    }\n    toString() {\n        const xs = this;\n        return (\"[\" + join(\"; \", xs)) + \"]\";\n    }\n    Equals(other) {\n        const xs = this;\n        if (xs === other) {\n            return true;\n        }\n        else {\n            const loop = (xs_1_mut, ys_1_mut) => {\n                loop: while (true) {\n                    const xs_1 = xs_1_mut, ys_1 = ys_1_mut;\n                    const matchValue = xs_1.tail;\n                    const matchValue_1 = ys_1.tail;\n                    if (matchValue != null) {\n                        if (matchValue_1 != null) {\n                            const xt = value_1(matchValue);\n                            const yt = value_1(matchValue_1);\n                            if (equals(xs_1.head, ys_1.head)) {\n                                xs_1_mut = xt;\n                                ys_1_mut = yt;\n                                continue loop;\n                            }\n                            else {\n                                return false;\n                            }\n                        }\n                        else {\n                            return false;\n                        }\n                    }\n                    else if (matchValue_1 != null) {\n                        return false;\n                    }\n                    else {\n                        return true;\n                    }\n                    break;\n                }\n            };\n            return loop(xs, other);\n        }\n    }\n    GetHashCode() {\n        const xs = this;\n        const loop = (i_mut, h_mut, xs_1_mut) => {\n            loop: while (true) {\n                const i = i_mut, h = h_mut, xs_1 = xs_1_mut;\n                const matchValue = xs_1.tail;\n                if (matchValue != null) {\n                    const t = value_1(matchValue);\n                    if (i > 18) {\n                        return h | 0;\n                    }\n                    else {\n                        i_mut = (i + 1);\n                        h_mut = (((h << 1) + structuralHash(xs_1.head)) + (631 * i));\n                        xs_1_mut = t;\n                        continue loop;\n                    }\n                }\n                else {\n                    return h | 0;\n                }\n                break;\n            }\n        };\n        return loop(0, 0, xs) | 0;\n    }\n    toJSON() {\n        const this$ = this;\n        return Array.from(this$);\n    }\n    CompareTo(other) {\n        const xs = this;\n        const loop = (xs_1_mut, ys_1_mut) => {\n            loop: while (true) {\n                const xs_1 = xs_1_mut, ys_1 = ys_1_mut;\n                const matchValue = xs_1.tail;\n                const matchValue_1 = ys_1.tail;\n                if (matchValue != null) {\n                    if (matchValue_1 != null) {\n                        const xt = value_1(matchValue);\n                        const yt = value_1(matchValue_1);\n                        const c = compare(xs_1.head, ys_1.head) | 0;\n                        if (c === 0) {\n                            xs_1_mut = xt;\n                            ys_1_mut = yt;\n                            continue loop;\n                        }\n                        else {\n                            return c | 0;\n                        }\n                    }\n                    else {\n                        return 1;\n                    }\n                }\n                else if (matchValue_1 != null) {\n                    return -1;\n                }\n                else {\n                    return 0;\n                }\n                break;\n            }\n        };\n        return loop(xs, other) | 0;\n    }\n    GetEnumerator() {\n        const xs = this;\n        return ListEnumerator$1_$ctor_3002E699(xs);\n    }\n    [Symbol.iterator]() {\n        return toIterator(getEnumerator(this));\n    }\n    \"System.Collections.IEnumerable.GetEnumerator\"() {\n        const xs = this;\n        return getEnumerator(xs);\n    }\n}\nexport function FSharpList_$reflection(gen0) {\n    return record_type(\"ListModule.FSharpList\", [gen0], FSharpList, () => [[\"head\", gen0], [\"tail\", option_type(FSharpList_$reflection(gen0))]]);\n}\nexport class ListEnumerator$1 {\n    constructor(xs) {\n        this.xs = xs;\n        this.it = this.xs;\n        this.current = defaultOf();\n    }\n    \"System.Collections.Generic.IEnumerator`1.get_Current\"() {\n        const _ = this;\n        return _.current;\n    }\n    \"System.Collections.IEnumerator.get_Current\"() {\n        const _ = this;\n        return _.current;\n    }\n    \"System.Collections.IEnumerator.MoveNext\"() {\n        const _ = this;\n        const matchValue = _.it.tail;\n        if (matchValue != null) {\n            const t = value_1(matchValue);\n            _.current = _.it.head;\n            _.it = t;\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n    \"System.Collections.IEnumerator.Reset\"() {\n        const _ = this;\n        _.it = _.xs;\n        _.current = defaultOf();\n    }\n    Dispose() {\n    }\n}\nexport function ListEnumerator$1_$reflection(gen0) {\n    return class_type(\"ListModule.ListEnumerator`1\", [gen0], ListEnumerator$1);\n}\nexport function ListEnumerator$1_$ctor_3002E699(xs) {\n    return new ListEnumerator$1(xs);\n}\nexport function FSharpList_get_Empty() {\n    return new FSharpList(defaultOf(), void 0);\n}\nexport function FSharpList_Cons_305B8EAC(x, xs) {\n    return new FSharpList(x, xs);\n}\nexport function FSharpList__get_IsEmpty(xs) {\n    return xs.tail == null;\n}\nexport function FSharpList__get_Length(xs) {\n    const loop = (i_mut, xs_1_mut) => {\n        loop: while (true) {\n            const i = i_mut, xs_1 = xs_1_mut;\n            const matchValue = xs_1.tail;\n            if (matchValue != null) {\n                i_mut = (i + 1);\n                xs_1_mut = value_1(matchValue);\n                continue loop;\n            }\n            else {\n                return i | 0;\n            }\n            break;\n        }\n    };\n    return loop(0, xs) | 0;\n}\nexport function FSharpList__get_Head(xs) {\n    const matchValue = xs.tail;\n    if (matchValue != null) {\n        return xs.head;\n    }\n    else {\n        throw new Error((SR_inputWasEmpty + \"\\\\nParameter name: \") + \"list\");\n    }\n}\nexport function FSharpList__get_Tail(xs) {\n    const matchValue = xs.tail;\n    if (matchValue != null) {\n        return value_1(matchValue);\n    }\n    else {\n        throw new Error((SR_inputWasEmpty + \"\\\\nParameter name: \") + \"list\");\n    }\n}\nexport function FSharpList__get_Item_Z524259A4(xs, index) {\n    const loop = (i_mut, xs_1_mut) => {\n        loop: while (true) {\n            const i = i_mut, xs_1 = xs_1_mut;\n            const matchValue = xs_1.tail;\n            if (matchValue != null) {\n                if (i === index) {\n                    return xs_1.head;\n                }\n                else {\n                    i_mut = (i + 1);\n                    xs_1_mut = value_1(matchValue);\n                    continue loop;\n                }\n            }\n            else {\n                throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n            }\n            break;\n        }\n    };\n    return loop(0, xs);\n}\nexport function indexNotFound() {\n    throw new Error(SR_keyNotFoundAlt);\n}\nexport function empty() {\n    return FSharpList_get_Empty();\n}\nexport function cons(x, xs) {\n    return FSharpList_Cons_305B8EAC(x, xs);\n}\nexport function singleton(x) {\n    return FSharpList_Cons_305B8EAC(x, FSharpList_get_Empty());\n}\nexport function isEmpty(xs) {\n    return FSharpList__get_IsEmpty(xs);\n}\nexport function length(xs) {\n    return FSharpList__get_Length(xs);\n}\nexport function head(xs) {\n    return FSharpList__get_Head(xs);\n}\nexport function tryHead(xs) {\n    if (FSharpList__get_IsEmpty(xs)) {\n        return void 0;\n    }\n    else {\n        return some(FSharpList__get_Head(xs));\n    }\n}\nexport function tail(xs) {\n    return FSharpList__get_Tail(xs);\n}\nexport function tryLast(xs_mut) {\n    tryLast: while (true) {\n        const xs = xs_mut;\n        if (FSharpList__get_IsEmpty(xs)) {\n            return void 0;\n        }\n        else {\n            const t = FSharpList__get_Tail(xs);\n            if (FSharpList__get_IsEmpty(t)) {\n                return some(FSharpList__get_Head(xs));\n            }\n            else {\n                xs_mut = t;\n                continue tryLast;\n            }\n        }\n        break;\n    }\n}\nexport function last(xs) {\n    const matchValue = tryLast(xs);\n    if (matchValue == null) {\n        throw new Error(SR_inputWasEmpty);\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\nexport function compareWith(comparer, xs, ys) {\n    const loop = (xs_1_mut, ys_1_mut) => {\n        loop: while (true) {\n            const xs_1 = xs_1_mut, ys_1 = ys_1_mut;\n            const matchValue = FSharpList__get_IsEmpty(xs_1);\n            const matchValue_1 = FSharpList__get_IsEmpty(ys_1);\n            if (matchValue) {\n                if (matchValue_1) {\n                    return 0;\n                }\n                else {\n                    return -1;\n                }\n            }\n            else if (matchValue_1) {\n                return 1;\n            }\n            else {\n                const c = comparer(FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1)) | 0;\n                if (c === 0) {\n                    xs_1_mut = FSharpList__get_Tail(xs_1);\n                    ys_1_mut = FSharpList__get_Tail(ys_1);\n                    continue loop;\n                }\n                else {\n                    return c | 0;\n                }\n            }\n            break;\n        }\n    };\n    return loop(xs, ys) | 0;\n}\nexport function toArray(xs) {\n    const len = FSharpList__get_Length(xs) | 0;\n    const res = fill(new Array(len), 0, len, null);\n    const loop = (i_mut, xs_1_mut) => {\n        loop: while (true) {\n            const i = i_mut, xs_1 = xs_1_mut;\n            if (!FSharpList__get_IsEmpty(xs_1)) {\n                res[i] = FSharpList__get_Head(xs_1);\n                i_mut = (i + 1);\n                xs_1_mut = FSharpList__get_Tail(xs_1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    loop(0, xs);\n    return res;\n}\nexport function fold(folder, state, xs) {\n    let acc = state;\n    let xs_1 = xs;\n    while (!FSharpList__get_IsEmpty(xs_1)) {\n        acc = folder(acc, head(xs_1));\n        xs_1 = FSharpList__get_Tail(xs_1);\n    }\n    return acc;\n}\nexport function reverse(xs) {\n    return fold((acc, x) => FSharpList_Cons_305B8EAC(x, acc), FSharpList_get_Empty(), xs);\n}\nexport function foldBack(folder, xs, state) {\n    return foldBack_1(folder, toArray(xs), state);\n}\nexport function foldIndexed(folder, state, xs) {\n    const loop = (i_mut, acc_mut, xs_1_mut) => {\n        loop: while (true) {\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut;\n            if (FSharpList__get_IsEmpty(xs_1)) {\n                return acc;\n            }\n            else {\n                i_mut = (i + 1);\n                acc_mut = folder(i, acc, FSharpList__get_Head(xs_1));\n                xs_1_mut = FSharpList__get_Tail(xs_1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(0, state, xs);\n}\nexport function fold2(folder, state, xs, ys) {\n    let acc = state;\n    let xs_1 = xs;\n    let ys_1 = ys;\n    while (!FSharpList__get_IsEmpty(xs_1) && !FSharpList__get_IsEmpty(ys_1)) {\n        acc = folder(acc, FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1));\n        xs_1 = FSharpList__get_Tail(xs_1);\n        ys_1 = FSharpList__get_Tail(ys_1);\n    }\n    return acc;\n}\nexport function foldBack2(folder, xs, ys, state) {\n    return foldBack2_1(folder, toArray(xs), toArray(ys), state);\n}\nexport function unfold(gen, state) {\n    const loop = (acc_mut, node_mut) => {\n        let t;\n        loop: while (true) {\n            const acc = acc_mut, node = node_mut;\n            const matchValue = gen(acc);\n            if (matchValue != null) {\n                acc_mut = value_1(matchValue)[1];\n                node_mut = ((t = (new FSharpList(value_1(matchValue)[0], void 0)), (node.tail = t, t)));\n                continue loop;\n            }\n            else {\n                return node;\n            }\n            break;\n        }\n    };\n    const root = FSharpList_get_Empty();\n    const node_1 = loop(state, root);\n    const t_2 = FSharpList_get_Empty();\n    node_1.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\nexport function iterate(action, xs) {\n    fold((unitVar, x) => {\n        action(x);\n    }, void 0, xs);\n}\nexport function iterate2(action, xs, ys) {\n    fold2((unitVar, x, y) => {\n        action(x, y);\n    }, void 0, xs, ys);\n}\nexport function iterateIndexed(action, xs) {\n    fold((i, x) => {\n        action(i, x);\n        return (i + 1) | 0;\n    }, 0, xs);\n}\nexport function iterateIndexed2(action, xs, ys) {\n    fold2((i, x, y) => {\n        action(i, x, y);\n        return (i + 1) | 0;\n    }, 0, xs, ys);\n}\nexport function toSeq(xs) {\n    return xs;\n}\nexport function ofArrayWithTail(xs, tail_1) {\n    let res = tail_1;\n    for (let i = xs.length - 1; i >= 0; i--) {\n        res = FSharpList_Cons_305B8EAC(xs[i], res);\n    }\n    return res;\n}\nexport function ofArray(xs) {\n    return ofArrayWithTail(xs, FSharpList_get_Empty());\n}\nexport function ofSeq(xs) {\n    let xs_3, t;\n    if (isArrayLike(xs)) {\n        return ofArray(xs);\n    }\n    else if (xs instanceof FSharpList) {\n        return xs;\n    }\n    else {\n        const root = FSharpList_get_Empty();\n        let node = root;\n        const enumerator = getEnumerator(xs);\n        try {\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                const x = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n                node = ((xs_3 = node, (t = (new FSharpList(x, void 0)), (xs_3.tail = t, t))));\n            }\n        }\n        finally {\n            disposeSafe(enumerator);\n        }\n        const xs_5 = node;\n        const t_2 = FSharpList_get_Empty();\n        xs_5.tail = t_2;\n        return FSharpList__get_Tail(root);\n    }\n}\nexport function concat(lists) {\n    const root = FSharpList_get_Empty();\n    let node = root;\n    const action = (xs) => {\n        node = fold((acc, x) => {\n            const t = new FSharpList(x, void 0);\n            acc.tail = t;\n            return t;\n        }, node, xs);\n    };\n    if (isArrayLike(lists)) {\n        const xs_3 = lists;\n        xs_3.forEach(action);\n    }\n    else if (lists instanceof FSharpList) {\n        iterate(action, lists);\n    }\n    else {\n        const enumerator = getEnumerator(lists);\n        try {\n            while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                action(enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n            }\n        }\n        finally {\n            disposeSafe(enumerator);\n        }\n    }\n    const xs_6 = node;\n    const t_2 = FSharpList_get_Empty();\n    xs_6.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\nexport function scan(folder, state, xs) {\n    let xs_4, t_2;\n    const root = FSharpList_get_Empty();\n    let node;\n    const t = new FSharpList(state, void 0);\n    root.tail = t;\n    node = t;\n    let acc = state;\n    let xs_3 = xs;\n    while (!FSharpList__get_IsEmpty(xs_3)) {\n        acc = folder(acc, FSharpList__get_Head(xs_3));\n        node = ((xs_4 = node, (t_2 = (new FSharpList(acc, void 0)), (xs_4.tail = t_2, t_2))));\n        xs_3 = FSharpList__get_Tail(xs_3);\n    }\n    const xs_6 = node;\n    const t_4 = FSharpList_get_Empty();\n    xs_6.tail = t_4;\n    return FSharpList__get_Tail(root);\n}\nexport function scanBack(folder, xs, state) {\n    return ofArray(scanBack_1(folder, toArray(xs), state));\n}\nexport function append(xs, ys) {\n    return fold((acc, x) => FSharpList_Cons_305B8EAC(x, acc), ys, reverse(xs));\n}\nexport function collect(mapping, xs) {\n    let xs_1, t;\n    const root = FSharpList_get_Empty();\n    let node = root;\n    let ys = xs;\n    while (!FSharpList__get_IsEmpty(ys)) {\n        let zs = mapping(FSharpList__get_Head(ys));\n        while (!FSharpList__get_IsEmpty(zs)) {\n            node = ((xs_1 = node, (t = (new FSharpList(FSharpList__get_Head(zs), void 0)), (xs_1.tail = t, t))));\n            zs = FSharpList__get_Tail(zs);\n        }\n        ys = FSharpList__get_Tail(ys);\n    }\n    const xs_3 = node;\n    const t_2 = FSharpList_get_Empty();\n    xs_3.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\nexport function mapIndexed(mapping, xs) {\n    const root = FSharpList_get_Empty();\n    const node = foldIndexed((i, acc, x) => {\n        const t = new FSharpList(mapping(i, x), void 0);\n        acc.tail = t;\n        return t;\n    }, root, xs);\n    const t_2 = FSharpList_get_Empty();\n    node.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\nexport function map(mapping, xs) {\n    const root = FSharpList_get_Empty();\n    const node = fold((acc, x) => {\n        const t = new FSharpList(mapping(x), void 0);\n        acc.tail = t;\n        return t;\n    }, root, xs);\n    const t_2 = FSharpList_get_Empty();\n    node.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\nexport function indexed(xs) {\n    return mapIndexed((i, x) => [i, x], xs);\n}\nexport function map2(mapping, xs, ys) {\n    const root = FSharpList_get_Empty();\n    const node = fold2((acc, x, y) => {\n        const t = new FSharpList(mapping(x, y), void 0);\n        acc.tail = t;\n        return t;\n    }, root, xs, ys);\n    const t_2 = FSharpList_get_Empty();\n    node.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\nexport function mapIndexed2(mapping, xs, ys) {\n    const loop = (i_mut, acc_mut, xs_1_mut, ys_1_mut) => {\n        let t;\n        loop: while (true) {\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut, ys_1 = ys_1_mut;\n            if (FSharpList__get_IsEmpty(xs_1) ? true : FSharpList__get_IsEmpty(ys_1)) {\n                return acc;\n            }\n            else {\n                i_mut = (i + 1);\n                acc_mut = ((t = (new FSharpList(mapping(i, FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1)), void 0)), (acc.tail = t, t)));\n                xs_1_mut = FSharpList__get_Tail(xs_1);\n                ys_1_mut = FSharpList__get_Tail(ys_1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    const root = FSharpList_get_Empty();\n    const node_1 = loop(0, root, xs, ys);\n    const t_2 = FSharpList_get_Empty();\n    node_1.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\nexport function map3(mapping, xs, ys, zs) {\n    const loop = (acc_mut, xs_1_mut, ys_1_mut, zs_1_mut) => {\n        let t;\n        loop: while (true) {\n            const acc = acc_mut, xs_1 = xs_1_mut, ys_1 = ys_1_mut, zs_1 = zs_1_mut;\n            if ((FSharpList__get_IsEmpty(xs_1) ? true : FSharpList__get_IsEmpty(ys_1)) ? true : FSharpList__get_IsEmpty(zs_1)) {\n                return acc;\n            }\n            else {\n                acc_mut = ((t = (new FSharpList(mapping(FSharpList__get_Head(xs_1), FSharpList__get_Head(ys_1), FSharpList__get_Head(zs_1)), void 0)), (acc.tail = t, t)));\n                xs_1_mut = FSharpList__get_Tail(xs_1);\n                ys_1_mut = FSharpList__get_Tail(ys_1);\n                zs_1_mut = FSharpList__get_Tail(zs_1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    const root = FSharpList_get_Empty();\n    const node_1 = loop(root, xs, ys, zs);\n    const t_2 = FSharpList_get_Empty();\n    node_1.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\nexport function mapFold(mapping, state, xs) {\n    const root = FSharpList_get_Empty();\n    const patternInput_1 = fold((tupledArg, x) => {\n        let t;\n        const patternInput = mapping(tupledArg[1], x);\n        return [(t = (new FSharpList(patternInput[0], void 0)), (tupledArg[0].tail = t, t)), patternInput[1]];\n    }, [root, state], xs);\n    const t_2 = FSharpList_get_Empty();\n    patternInput_1[0].tail = t_2;\n    return [FSharpList__get_Tail(root), patternInput_1[1]];\n}\nexport function mapFoldBack(mapping, xs, state) {\n    return mapFold((acc, x) => mapping(x, acc), state, reverse(xs));\n}\nexport function tryPick(f, xs) {\n    const loop = (xs_1_mut) => {\n        loop: while (true) {\n            const xs_1 = xs_1_mut;\n            if (FSharpList__get_IsEmpty(xs_1)) {\n                return void 0;\n            }\n            else {\n                const matchValue = f(FSharpList__get_Head(xs_1));\n                if (matchValue == null) {\n                    xs_1_mut = FSharpList__get_Tail(xs_1);\n                    continue loop;\n                }\n                else {\n                    return matchValue;\n                }\n            }\n            break;\n        }\n    };\n    return loop(xs);\n}\nexport function pick(f, xs) {\n    const matchValue = tryPick(f, xs);\n    if (matchValue == null) {\n        return indexNotFound();\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\nexport function tryFind(f, xs) {\n    return tryPick((x) => (f(x) ? some(x) : void 0), xs);\n}\nexport function find(f, xs) {\n    const matchValue = tryFind(f, xs);\n    if (matchValue == null) {\n        return indexNotFound();\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\nexport function tryFindBack(f, xs) {\n    return tryFindBack_1(f, toArray(xs));\n}\nexport function findBack(f, xs) {\n    const matchValue = tryFindBack(f, xs);\n    if (matchValue == null) {\n        return indexNotFound();\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\nexport function tryFindIndex(f, xs) {\n    const loop = (i_mut, xs_1_mut) => {\n        loop: while (true) {\n            const i = i_mut, xs_1 = xs_1_mut;\n            if (FSharpList__get_IsEmpty(xs_1)) {\n                return void 0;\n            }\n            else if (f(FSharpList__get_Head(xs_1))) {\n                return i;\n            }\n            else {\n                i_mut = (i + 1);\n                xs_1_mut = FSharpList__get_Tail(xs_1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(0, xs);\n}\nexport function findIndex(f, xs) {\n    const matchValue = tryFindIndex(f, xs);\n    if (matchValue == null) {\n        indexNotFound();\n        return -1;\n    }\n    else {\n        return value_1(matchValue) | 0;\n    }\n}\nexport function tryFindIndexBack(f, xs) {\n    return tryFindIndexBack_1(f, toArray(xs));\n}\nexport function findIndexBack(f, xs) {\n    const matchValue = tryFindIndexBack(f, xs);\n    if (matchValue == null) {\n        indexNotFound();\n        return -1;\n    }\n    else {\n        return value_1(matchValue) | 0;\n    }\n}\nexport function tryItem(n, xs) {\n    const loop = (i_mut, xs_1_mut) => {\n        loop: while (true) {\n            const i = i_mut, xs_1 = xs_1_mut;\n            if (FSharpList__get_IsEmpty(xs_1)) {\n                return void 0;\n            }\n            else if (i === n) {\n                return some(FSharpList__get_Head(xs_1));\n            }\n            else {\n                i_mut = (i + 1);\n                xs_1_mut = FSharpList__get_Tail(xs_1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    return loop(0, xs);\n}\nexport function item(n, xs) {\n    return FSharpList__get_Item_Z524259A4(xs, n);\n}\nexport function filter(f, xs) {\n    const root = FSharpList_get_Empty();\n    const node = fold((acc, x) => {\n        if (f(x)) {\n            const t = new FSharpList(x, void 0);\n            acc.tail = t;\n            return t;\n        }\n        else {\n            return acc;\n        }\n    }, root, xs);\n    const t_2 = FSharpList_get_Empty();\n    node.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\nexport function partition(f, xs) {\n    const matchValue = FSharpList_get_Empty();\n    const root2 = FSharpList_get_Empty();\n    const root1 = matchValue;\n    const patternInput_1 = fold((tupledArg, x) => {\n        let t, t_2;\n        const lacc = tupledArg[0];\n        const racc = tupledArg[1];\n        if (f(x)) {\n            return [(t = (new FSharpList(x, void 0)), (lacc.tail = t, t)), racc];\n        }\n        else {\n            return [lacc, (t_2 = (new FSharpList(x, void 0)), (racc.tail = t_2, t_2))];\n        }\n    }, [root1, root2], xs);\n    const t_4 = FSharpList_get_Empty();\n    patternInput_1[0].tail = t_4;\n    const t_5 = FSharpList_get_Empty();\n    patternInput_1[1].tail = t_5;\n    return [FSharpList__get_Tail(root1), FSharpList__get_Tail(root2)];\n}\nexport function choose(f, xs) {\n    const root = FSharpList_get_Empty();\n    const node = fold((acc, x) => {\n        const matchValue = f(x);\n        if (matchValue == null) {\n            return acc;\n        }\n        else {\n            const t = new FSharpList(value_1(matchValue), void 0);\n            acc.tail = t;\n            return t;\n        }\n    }, root, xs);\n    const t_2 = FSharpList_get_Empty();\n    node.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\nexport function contains(value, xs, eq) {\n    return tryFindIndex((v) => eq.Equals(value, v), xs) != null;\n}\nexport function initialize(n, f) {\n    let xs, t;\n    const root = FSharpList_get_Empty();\n    let node = root;\n    for (let i = 0; i <= (n - 1); i++) {\n        node = ((xs = node, (t = (new FSharpList(f(i), void 0)), (xs.tail = t, t))));\n    }\n    const xs_2 = node;\n    const t_2 = FSharpList_get_Empty();\n    xs_2.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\nexport function replicate(n, x) {\n    return initialize(n, (_arg) => x);\n}\nexport function reduce(f, xs) {\n    if (FSharpList__get_IsEmpty(xs)) {\n        throw new Error(SR_inputWasEmpty);\n    }\n    else {\n        return fold(f, head(xs), tail(xs));\n    }\n}\nexport function reduceBack(f, xs) {\n    if (FSharpList__get_IsEmpty(xs)) {\n        throw new Error(SR_inputWasEmpty);\n    }\n    else {\n        return foldBack(f, tail(xs), head(xs));\n    }\n}\nexport function forAll(f, xs) {\n    return fold((acc, x) => (acc && f(x)), true, xs);\n}\nexport function forAll2(f, xs, ys) {\n    return fold2((acc, x, y) => (acc && f(x, y)), true, xs, ys);\n}\nexport function exists(f, xs) {\n    return tryFindIndex(f, xs) != null;\n}\nexport function exists2(f_mut, xs_mut, ys_mut) {\n    exists2: while (true) {\n        const f = f_mut, xs = xs_mut, ys = ys_mut;\n        const matchValue = FSharpList__get_IsEmpty(xs);\n        const matchValue_1 = FSharpList__get_IsEmpty(ys);\n        let matchResult;\n        if (matchValue) {\n            if (matchValue_1) {\n                matchResult = 0;\n            }\n            else {\n                matchResult = 2;\n            }\n        }\n        else if (matchValue_1) {\n            matchResult = 2;\n        }\n        else {\n            matchResult = 1;\n        }\n        switch (matchResult) {\n            case 0:\n                return false;\n            case 1:\n                if (f(FSharpList__get_Head(xs), FSharpList__get_Head(ys))) {\n                    return true;\n                }\n                else {\n                    f_mut = f;\n                    xs_mut = FSharpList__get_Tail(xs);\n                    ys_mut = FSharpList__get_Tail(ys);\n                    continue exists2;\n                }\n            default:\n                throw new Error((SR_differentLengths + \"\\\\nParameter name: \") + \"list2\");\n        }\n        break;\n    }\n}\nexport function unzip(xs) {\n    return foldBack((tupledArg, tupledArg_1) => [FSharpList_Cons_305B8EAC(tupledArg[0], tupledArg_1[0]), FSharpList_Cons_305B8EAC(tupledArg[1], tupledArg_1[1])], xs, [FSharpList_get_Empty(), FSharpList_get_Empty()]);\n}\nexport function unzip3(xs) {\n    return foldBack((tupledArg, tupledArg_1) => [FSharpList_Cons_305B8EAC(tupledArg[0], tupledArg_1[0]), FSharpList_Cons_305B8EAC(tupledArg[1], tupledArg_1[1]), FSharpList_Cons_305B8EAC(tupledArg[2], tupledArg_1[2])], xs, [FSharpList_get_Empty(), FSharpList_get_Empty(), FSharpList_get_Empty()]);\n}\nexport function zip(xs, ys) {\n    return map2((x, y) => [x, y], xs, ys);\n}\nexport function zip3(xs, ys, zs) {\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\n}\nexport function sortWith(comparer, xs) {\n    const arr = toArray(xs);\n    arr.sort(comparer);\n    return ofArray(arr);\n}\nexport function sort(xs, comparer) {\n    return sortWith((x, y) => comparer.Compare(x, y), xs);\n}\nexport function sortBy(projection, xs, comparer) {\n    return sortWith((x, y) => comparer.Compare(projection(x), projection(y)), xs);\n}\nexport function sortDescending(xs, comparer) {\n    return sortWith((x, y) => (comparer.Compare(x, y) * -1), xs);\n}\nexport function sortByDescending(projection, xs, comparer) {\n    return sortWith((x, y) => (comparer.Compare(projection(x), projection(y)) * -1), xs);\n}\nexport function sum(xs, adder) {\n    return fold((acc, x) => adder.Add(acc, x), adder.GetZero(), xs);\n}\nexport function sumBy(f, xs, adder) {\n    return fold((acc, x) => adder.Add(acc, f(x)), adder.GetZero(), xs);\n}\nexport function maxBy(projection, xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\n}\nexport function max(xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), xs);\n}\nexport function minBy(projection, xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\n}\nexport function min(xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\n}\nexport function average(xs, averager) {\n    let count = 0;\n    const total = fold((acc, x) => {\n        count = ((count + 1) | 0);\n        return averager.Add(acc, x);\n    }, averager.GetZero(), xs);\n    return averager.DivideByInt(total, count);\n}\nexport function averageBy(f, xs, averager) {\n    let count = 0;\n    const total = fold((acc, x) => {\n        count = ((count + 1) | 0);\n        return averager.Add(acc, f(x));\n    }, averager.GetZero(), xs);\n    return averager.DivideByInt(total, count);\n}\nexport function permute(f, xs) {\n    return ofArray(permute_1(f, toArray(xs)));\n}\nexport function chunkBySize(chunkSize, xs) {\n    return ofArray(map_1(ofArray, chunkBySize_1(chunkSize, toArray(xs))));\n}\nexport function allPairs(xs, ys) {\n    const root = FSharpList_get_Empty();\n    let node = root;\n    iterate((x) => {\n        iterate((y) => {\n            let xs_1, t;\n            node = ((xs_1 = node, (t = (new FSharpList([x, y], void 0)), (xs_1.tail = t, t))));\n        }, ys);\n    }, xs);\n    const xs_3 = node;\n    const t_2 = FSharpList_get_Empty();\n    xs_3.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\nexport function skip(count_mut, xs_mut) {\n    skip: while (true) {\n        const count = count_mut, xs = xs_mut;\n        if (count <= 0) {\n            return xs;\n        }\n        else if (FSharpList__get_IsEmpty(xs)) {\n            throw new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"list\");\n        }\n        else {\n            count_mut = (count - 1);\n            xs_mut = FSharpList__get_Tail(xs);\n            continue skip;\n        }\n        break;\n    }\n}\nexport function skipWhile(predicate_mut, xs_mut) {\n    skipWhile: while (true) {\n        const predicate = predicate_mut, xs = xs_mut;\n        if (FSharpList__get_IsEmpty(xs)) {\n            return xs;\n        }\n        else if (!predicate(FSharpList__get_Head(xs))) {\n            return xs;\n        }\n        else {\n            predicate_mut = predicate;\n            xs_mut = FSharpList__get_Tail(xs);\n            continue skipWhile;\n        }\n        break;\n    }\n}\nexport function take(count, xs) {\n    if (count < 0) {\n        throw new Error((SR_inputMustBeNonNegative + \"\\\\nParameter name: \") + \"count\");\n    }\n    const loop = (i_mut, acc_mut, xs_1_mut) => {\n        let t;\n        loop: while (true) {\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut;\n            if (i <= 0) {\n                return acc;\n            }\n            else if (FSharpList__get_IsEmpty(xs_1)) {\n                throw new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"list\");\n            }\n            else {\n                i_mut = (i - 1);\n                acc_mut = ((t = (new FSharpList(FSharpList__get_Head(xs_1), void 0)), (acc.tail = t, t)));\n                xs_1_mut = FSharpList__get_Tail(xs_1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    const root = FSharpList_get_Empty();\n    const node = loop(count, root, xs);\n    const t_2 = FSharpList_get_Empty();\n    node.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\nexport function takeWhile(predicate, xs) {\n    const loop = (acc_mut, xs_1_mut) => {\n        let t;\n        loop: while (true) {\n            const acc = acc_mut, xs_1 = xs_1_mut;\n            if (FSharpList__get_IsEmpty(xs_1)) {\n                return acc;\n            }\n            else if (!predicate(FSharpList__get_Head(xs_1))) {\n                return acc;\n            }\n            else {\n                acc_mut = ((t = (new FSharpList(FSharpList__get_Head(xs_1), void 0)), (acc.tail = t, t)));\n                xs_1_mut = FSharpList__get_Tail(xs_1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    const root = FSharpList_get_Empty();\n    const node = loop(root, xs);\n    const t_2 = FSharpList_get_Empty();\n    node.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\nexport function truncate(count, xs) {\n    const loop = (i_mut, acc_mut, xs_1_mut) => {\n        let t;\n        loop: while (true) {\n            const i = i_mut, acc = acc_mut, xs_1 = xs_1_mut;\n            if (i <= 0) {\n                return acc;\n            }\n            else if (FSharpList__get_IsEmpty(xs_1)) {\n                return acc;\n            }\n            else {\n                i_mut = (i - 1);\n                acc_mut = ((t = (new FSharpList(FSharpList__get_Head(xs_1), void 0)), (acc.tail = t, t)));\n                xs_1_mut = FSharpList__get_Tail(xs_1);\n                continue loop;\n            }\n            break;\n        }\n    };\n    const root = FSharpList_get_Empty();\n    const node = loop(count, root, xs);\n    const t_2 = FSharpList_get_Empty();\n    node.tail = t_2;\n    return FSharpList__get_Tail(root);\n}\nexport function getSlice(startIndex, endIndex, xs) {\n    const len = length(xs) | 0;\n    let startIndex_1;\n    const index = defaultArg(startIndex, 0) | 0;\n    startIndex_1 = ((index < 0) ? 0 : index);\n    let endIndex_1;\n    const index_1 = defaultArg(endIndex, len - 1) | 0;\n    endIndex_1 = ((index_1 >= len) ? (len - 1) : index_1);\n    if (endIndex_1 < startIndex_1) {\n        return FSharpList_get_Empty();\n    }\n    else {\n        return take((endIndex_1 - startIndex_1) + 1, skip(startIndex_1, xs));\n    }\n}\nexport function splitAt(index, xs) {\n    if (index < 0) {\n        throw new Error((SR_inputMustBeNonNegative + \"\\\\nParameter name: \") + \"index\");\n    }\n    if (index > FSharpList__get_Length(xs)) {\n        throw new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"index\");\n    }\n    return [take(index, xs), skip(index, xs)];\n}\nexport function exactlyOne(xs) {\n    if (FSharpList__get_IsEmpty(xs)) {\n        throw new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"list\");\n    }\n    else if (FSharpList__get_IsEmpty(FSharpList__get_Tail(xs))) {\n        return FSharpList__get_Head(xs);\n    }\n    else {\n        throw new Error((SR_inputSequenceTooLong + \"\\\\nParameter name: \") + \"list\");\n    }\n}\nexport function tryExactlyOne(xs) {\n    if (!FSharpList__get_IsEmpty(xs) && FSharpList__get_IsEmpty(FSharpList__get_Tail(xs))) {\n        return some(FSharpList__get_Head(xs));\n    }\n    else {\n        return void 0;\n    }\n}\nexport function where(predicate, xs) {\n    return filter(predicate, xs);\n}\nexport function pairwise(xs) {\n    return ofArray(pairwise_1(toArray(xs)));\n}\nexport function windowed(windowSize, xs) {\n    return ofArray(map_1(ofArray, windowed_1(windowSize, toArray(xs))));\n}\nexport function splitInto(chunks, xs) {\n    return ofArray(map_1(ofArray, splitInto_1(chunks, toArray(xs))));\n}\nexport function transpose(lists) {\n    return ofArray(map_1(ofArray, transpose_1(map_1(toArray, Array.from(lists)))));\n}\nexport function insertAt(index, y, xs) {\n    let i = -1;\n    let isDone = false;\n    const result = fold((acc, x) => {\n        i = ((i + 1) | 0);\n        if (i === index) {\n            isDone = true;\n            return FSharpList_Cons_305B8EAC(x, FSharpList_Cons_305B8EAC(y, acc));\n        }\n        else {\n            return FSharpList_Cons_305B8EAC(x, acc);\n        }\n    }, FSharpList_get_Empty(), xs);\n    return reverse(isDone ? result : (((i + 1) === index) ? FSharpList_Cons_305B8EAC(y, result) : (() => {\n        throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n    })()));\n}\nexport function insertManyAt(index, ys, xs) {\n    let i = -1;\n    let isDone = false;\n    const ys_1 = ofSeq(ys);\n    const result = fold((acc, x) => {\n        i = ((i + 1) | 0);\n        if (i === index) {\n            isDone = true;\n            return FSharpList_Cons_305B8EAC(x, append(ys_1, acc));\n        }\n        else {\n            return FSharpList_Cons_305B8EAC(x, acc);\n        }\n    }, FSharpList_get_Empty(), xs);\n    return reverse(isDone ? result : (((i + 1) === index) ? append(ys_1, result) : (() => {\n        throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n    })()));\n}\nexport function removeAt(index, xs) {\n    let i = -1;\n    let isDone = false;\n    const ys = filter((_arg) => {\n        i = ((i + 1) | 0);\n        if (i === index) {\n            isDone = true;\n            return false;\n        }\n        else {\n            return true;\n        }\n    }, xs);\n    if (!isDone) {\n        throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n    }\n    return ys;\n}\nexport function removeManyAt(index, count, xs) {\n    let i = -1;\n    let status = -1;\n    const ys = filter((_arg) => {\n        i = ((i + 1) | 0);\n        if (i === index) {\n            status = 0;\n            return false;\n        }\n        else if (i > index) {\n            if (i < (index + count)) {\n                return false;\n            }\n            else {\n                status = 1;\n                return true;\n            }\n        }\n        else {\n            return true;\n        }\n    }, xs);\n    const status_1 = (((status === 0) && ((i + 1) === (index + count))) ? 1 : status) | 0;\n    if (status_1 < 1) {\n        throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + ((status_1 < 0) ? \"index\" : \"count\"));\n    }\n    return ys;\n}\nexport function updateAt(index, y, xs) {\n    let isDone = false;\n    const ys = mapIndexed((i, x) => {\n        if (i === index) {\n            isDone = true;\n            return y;\n        }\n        else {\n            return x;\n        }\n    }, xs);\n    if (!isDone) {\n        throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n    }\n    return ys;\n}\n","import { clear, defaultOf, equals, isDisposable, isArrayLike, toIterator, disposeSafe, getEnumerator } from \"./Util.js\";\nimport { toString } from \"./Types.js\";\nimport { class_type } from \"./Reflection.js\";\nimport { some, value as value_1 } from \"./Option.js\";\nimport { Operators_Lock, Operators_NullArg } from \"./FSharp.Core.js\";\nimport { chunkBySize as chunkBySize_1, permute as permute_1, transpose as transpose_1, map as map_1, windowed as windowed_1, splitInto as splitInto_1, pairwise as pairwise_1, scanBack as scanBack_1, reverse as reverse_1, mapFoldBack as mapFoldBack_1, mapFold as mapFold_1, tryItem as tryItem_1, tryHead as tryHead_1, foldBack2 as foldBack2_1, foldBack as foldBack_1, tryFindIndexBack as tryFindIndexBack_1, tryFindBack as tryFindBack_1, singleton as singleton_1 } from \"./Array.js\";\nimport { length as length_1, tryItem as tryItem_2, isEmpty as isEmpty_1, tryHead as tryHead_2, ofSeq as ofSeq_1, ofArray as ofArray_1, toArray as toArray_1, FSharpList } from \"./List.js\";\nimport { SR_indexOutOfBounds } from \"./Global.js\";\nexport const SR_enumerationAlreadyFinished = \"Enumeration already finished.\";\nexport const SR_enumerationNotStarted = \"Enumeration has not started. Call MoveNext.\";\nexport const SR_inputSequenceEmpty = \"The input sequence was empty.\";\nexport const SR_inputSequenceTooLong = \"The input sequence contains more than one element.\";\nexport const SR_keyNotFoundAlt = \"An index satisfying the predicate was not found in the collection.\";\nexport const SR_notEnoughElements = \"The input sequence has an insufficient number of elements.\";\nexport const SR_resetNotSupported = \"Reset is not supported on this enumerator.\";\nexport function Enumerator_noReset() {\n    throw new Error(SR_resetNotSupported);\n}\nexport function Enumerator_notStarted() {\n    throw new Error(SR_enumerationNotStarted);\n}\nexport function Enumerator_alreadyFinished() {\n    throw new Error(SR_enumerationAlreadyFinished);\n}\nexport class Enumerator_Seq {\n    constructor(f) {\n        this.f = f;\n    }\n    toString() {\n        const xs = this;\n        let i = 0;\n        let str = \"seq [\";\n        const e = getEnumerator(xs);\n        try {\n            while ((i < 4) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                if (i > 0) {\n                    str = (str + \"; \");\n                }\n                str = (str + toString(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()));\n                i = ((i + 1) | 0);\n            }\n            if (i === 4) {\n                str = (str + \"; ...\");\n            }\n            return str + \"]\";\n        }\n        finally {\n            disposeSafe(e);\n        }\n    }\n    GetEnumerator() {\n        const x = this;\n        return x.f();\n    }\n    [Symbol.iterator]() {\n        return toIterator(getEnumerator(this));\n    }\n    \"System.Collections.IEnumerable.GetEnumerator\"() {\n        const x = this;\n        return x.f();\n    }\n}\nexport function Enumerator_Seq_$reflection(gen0) {\n    return class_type(\"SeqModule.Enumerator.Seq\", [gen0], Enumerator_Seq);\n}\nexport function Enumerator_Seq_$ctor_673A07F2(f) {\n    return new Enumerator_Seq(f);\n}\nexport class Enumerator_FromFunctions$1 {\n    constructor(current, next, dispose) {\n        this.current = current;\n        this.next = next;\n        this.dispose = dispose;\n    }\n    \"System.Collections.Generic.IEnumerator`1.get_Current\"() {\n        const _ = this;\n        return _.current();\n    }\n    \"System.Collections.IEnumerator.get_Current\"() {\n        const _ = this;\n        return _.current();\n    }\n    \"System.Collections.IEnumerator.MoveNext\"() {\n        const _ = this;\n        return _.next();\n    }\n    \"System.Collections.IEnumerator.Reset\"() {\n        Enumerator_noReset();\n    }\n    Dispose() {\n        const _ = this;\n        _.dispose();\n    }\n}\nexport function Enumerator_FromFunctions$1_$reflection(gen0) {\n    return class_type(\"SeqModule.Enumerator.FromFunctions`1\", [gen0], Enumerator_FromFunctions$1);\n}\nexport function Enumerator_FromFunctions$1_$ctor_58C54629(current, next, dispose) {\n    return new Enumerator_FromFunctions$1(current, next, dispose);\n}\nexport function Enumerator_cast(e) {\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => e[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), () => e[\"System.Collections.IEnumerator.MoveNext\"](), () => {\n        const e_1 = e;\n        disposeSafe(e_1);\n    });\n}\nexport function Enumerator_concat(sources) {\n    let outerOpt = void 0;\n    let innerOpt = void 0;\n    let started = false;\n    let finished = false;\n    let curr = void 0;\n    const finish = () => {\n        finished = true;\n        if (innerOpt != null) {\n            const inner = value_1(innerOpt);\n            try {\n                disposeSafe(inner);\n            }\n            finally {\n                innerOpt = void 0;\n            }\n        }\n        if (outerOpt != null) {\n            const outer = value_1(outerOpt);\n            try {\n                disposeSafe(outer);\n            }\n            finally {\n                outerOpt = void 0;\n            }\n        }\n    };\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => {\n        if (!started) {\n            Enumerator_notStarted();\n        }\n        else if (finished) {\n            Enumerator_alreadyFinished();\n        }\n        if (curr != null) {\n            return value_1(curr);\n        }\n        else {\n            return Enumerator_alreadyFinished();\n        }\n    }, () => {\n        let copyOfStruct;\n        if (!started) {\n            started = true;\n        }\n        if (finished) {\n            return false;\n        }\n        else {\n            let res = void 0;\n            while (res == null) {\n                const outerOpt_1 = outerOpt;\n                const innerOpt_1 = innerOpt;\n                if (outerOpt_1 != null) {\n                    if (innerOpt_1 != null) {\n                        const inner_1 = value_1(innerOpt_1);\n                        if (inner_1[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                            curr = some(inner_1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n                            res = true;\n                        }\n                        else {\n                            try {\n                                disposeSafe(inner_1);\n                            }\n                            finally {\n                                innerOpt = void 0;\n                            }\n                        }\n                    }\n                    else {\n                        const outer_1 = value_1(outerOpt_1);\n                        if (outer_1[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                            const ie = outer_1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n                            innerOpt = ((copyOfStruct = ie, getEnumerator(copyOfStruct)));\n                        }\n                        else {\n                            finish();\n                            res = false;\n                        }\n                    }\n                }\n                else {\n                    outerOpt = getEnumerator(sources);\n                }\n            }\n            return value_1(res);\n        }\n    }, () => {\n        if (!finished) {\n            finish();\n        }\n    });\n}\nexport function Enumerator_enumerateThenFinally(f, e) {\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => e[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), () => e[\"System.Collections.IEnumerator.MoveNext\"](), () => {\n        try {\n            disposeSafe(e);\n        }\n        finally {\n            f();\n        }\n    });\n}\nexport function Enumerator_generateWhileSome(openf, compute, closef) {\n    let started = false;\n    let curr = void 0;\n    let state = some(openf());\n    const dispose = () => {\n        if (state != null) {\n            const x_1 = value_1(state);\n            try {\n                closef(x_1);\n            }\n            finally {\n                state = void 0;\n            }\n        }\n    };\n    const finish = () => {\n        try {\n            dispose();\n        }\n        finally {\n            curr = void 0;\n        }\n    };\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => {\n        if (!started) {\n            Enumerator_notStarted();\n        }\n        if (curr != null) {\n            return value_1(curr);\n        }\n        else {\n            return Enumerator_alreadyFinished();\n        }\n    }, () => {\n        if (!started) {\n            started = true;\n        }\n        if (state != null) {\n            const s = value_1(state);\n            let matchValue_1;\n            try {\n                matchValue_1 = compute(s);\n            }\n            catch (matchValue) {\n                finish();\n                throw matchValue;\n            }\n            if (matchValue_1 != null) {\n                curr = matchValue_1;\n                return true;\n            }\n            else {\n                finish();\n                return false;\n            }\n        }\n        else {\n            return false;\n        }\n    }, dispose);\n}\nexport function Enumerator_unfold(f, state) {\n    let curr = void 0;\n    let acc = state;\n    return Enumerator_FromFunctions$1_$ctor_58C54629(() => {\n        if (curr != null) {\n            const x = value_1(curr)[0];\n            const st = value_1(curr)[1];\n            return x;\n        }\n        else {\n            return Enumerator_notStarted();\n        }\n    }, () => {\n        curr = f(acc);\n        if (curr != null) {\n            const x_1 = value_1(curr)[0];\n            const st_1 = value_1(curr)[1];\n            acc = st_1;\n            return true;\n        }\n        else {\n            return false;\n        }\n    }, () => {\n    });\n}\nexport function indexNotFound() {\n    throw new Error(SR_keyNotFoundAlt);\n}\nexport function checkNonNull(argName, arg) {\n    if (arg == null) {\n        Operators_NullArg(argName);\n    }\n}\nexport function mkSeq(f) {\n    return Enumerator_Seq_$ctor_673A07F2(f);\n}\nexport function ofSeq(xs) {\n    checkNonNull(\"source\", xs);\n    return getEnumerator(xs);\n}\nexport function delay(generator) {\n    return mkSeq(() => getEnumerator(generator()));\n}\nexport function concat(sources) {\n    return mkSeq(() => Enumerator_concat(sources));\n}\nexport function unfold(generator, state) {\n    return mkSeq(() => Enumerator_unfold(generator, state));\n}\nexport function empty() {\n    return delay(() => (new Array(0)));\n}\nexport function singleton(x) {\n    return delay(() => singleton_1(x));\n}\nexport function ofArray(arr) {\n    return arr;\n}\nexport function toArray(xs) {\n    if (xs instanceof FSharpList) {\n        const a = xs;\n        return toArray_1(a);\n    }\n    else {\n        return Array.from(xs);\n    }\n}\nexport function ofList(xs) {\n    return xs;\n}\nexport function toList(xs) {\n    if (isArrayLike(xs)) {\n        return ofArray_1(xs);\n    }\n    else if (xs instanceof FSharpList) {\n        return xs;\n    }\n    else {\n        return ofSeq_1(xs);\n    }\n}\nexport function generate(create, compute, dispose) {\n    return mkSeq(() => Enumerator_generateWhileSome(create, compute, dispose));\n}\nexport function generateIndexed(create, compute, dispose) {\n    return mkSeq(() => {\n        let i = -1;\n        return Enumerator_generateWhileSome(create, (x) => {\n            i = ((i + 1) | 0);\n            return compute(i, x);\n        }, dispose);\n    });\n}\nexport function append(xs, ys) {\n    return concat([xs, ys]);\n}\nexport function cast(xs) {\n    return mkSeq(() => {\n        checkNonNull(\"source\", xs);\n        return Enumerator_cast(getEnumerator(xs));\n    });\n}\nexport function choose(chooser, xs) {\n    return generate(() => ofSeq(xs), (e) => {\n        let curr = void 0;\n        while ((curr == null) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            curr = chooser(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n        }\n        return curr;\n    }, (e_1) => {\n        disposeSafe(e_1);\n    });\n}\nexport function compareWith(comparer, xs, ys) {\n    const e1 = ofSeq(xs);\n    try {\n        const e2 = ofSeq(ys);\n        try {\n            let c = 0;\n            let b1 = e1[\"System.Collections.IEnumerator.MoveNext\"]();\n            let b2 = e2[\"System.Collections.IEnumerator.MoveNext\"]();\n            while (((c === 0) && b1) && b2) {\n                c = (comparer(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) | 0);\n                if (c === 0) {\n                    b1 = e1[\"System.Collections.IEnumerator.MoveNext\"]();\n                    b2 = e2[\"System.Collections.IEnumerator.MoveNext\"]();\n                }\n            }\n            return ((c !== 0) ? c : (b1 ? 1 : (b2 ? -1 : 0))) | 0;\n        }\n        finally {\n            disposeSafe(e2);\n        }\n    }\n    finally {\n        disposeSafe(e1);\n    }\n}\nexport function contains(value, xs, comparer) {\n    const e = ofSeq(xs);\n    try {\n        let found = false;\n        while (!found && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            found = comparer.Equals(value, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n        }\n        return found;\n    }\n    finally {\n        disposeSafe(e);\n    }\n}\nexport function enumerateFromFunctions(create, moveNext, current) {\n    return generate(create, (x) => (moveNext(x) ? some(current(x)) : void 0), (x_1) => {\n        const matchValue = x_1;\n        if (isDisposable(matchValue)) {\n            const id = matchValue;\n            disposeSafe(id);\n        }\n    });\n}\nexport function enumerateThenFinally(source, compensation) {\n    const compensation_1 = compensation;\n    return mkSeq(() => {\n        try {\n            return Enumerator_enumerateThenFinally(compensation_1, ofSeq(source));\n        }\n        catch (matchValue) {\n            compensation_1();\n            throw matchValue;\n        }\n    });\n}\nexport function enumerateUsing(resource, source) {\n    const compensation = () => {\n        if (equals(resource, defaultOf())) {\n        }\n        else {\n            let copyOfStruct = resource;\n            disposeSafe(copyOfStruct);\n        }\n    };\n    return mkSeq(() => {\n        try {\n            return Enumerator_enumerateThenFinally(compensation, ofSeq(source(resource)));\n        }\n        catch (matchValue_1) {\n            compensation();\n            throw matchValue_1;\n        }\n    });\n}\nexport function enumerateWhile(guard, xs) {\n    return concat(unfold((i) => (guard() ? [xs, i + 1] : void 0), 0));\n}\nexport function filter(f, xs) {\n    return choose((x) => {\n        if (f(x)) {\n            return some(x);\n        }\n        else {\n            return void 0;\n        }\n    }, xs);\n}\nexport function exists(predicate, xs) {\n    const e = ofSeq(xs);\n    try {\n        let found = false;\n        while (!found && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            found = predicate(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n        }\n        return found;\n    }\n    finally {\n        disposeSafe(e);\n    }\n}\nexport function exists2(predicate, xs, ys) {\n    const e1 = ofSeq(xs);\n    try {\n        const e2 = ofSeq(ys);\n        try {\n            let found = false;\n            while ((!found && e1[\"System.Collections.IEnumerator.MoveNext\"]()) && e2[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                found = predicate(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n            }\n            return found;\n        }\n        finally {\n            disposeSafe(e2);\n        }\n    }\n    finally {\n        disposeSafe(e1);\n    }\n}\nexport function exactlyOne(xs) {\n    const e = ofSeq(xs);\n    try {\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            const v = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n            if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                throw new Error((SR_inputSequenceTooLong + \"\\\\nParameter name: \") + \"source\");\n            }\n            else {\n                return v;\n            }\n        }\n        else {\n            throw new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"source\");\n        }\n    }\n    finally {\n        disposeSafe(e);\n    }\n}\nexport function tryExactlyOne(xs) {\n    const e = ofSeq(xs);\n    try {\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            const v = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n            return e[\"System.Collections.IEnumerator.MoveNext\"]() ? void 0 : some(v);\n        }\n        else {\n            return void 0;\n        }\n    }\n    finally {\n        disposeSafe(e);\n    }\n}\nexport function tryFind(predicate, xs) {\n    const e = ofSeq(xs);\n    try {\n        let res = void 0;\n        while ((res == null) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            const c = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n            if (predicate(c)) {\n                res = some(c);\n            }\n        }\n        return res;\n    }\n    finally {\n        disposeSafe(e);\n    }\n}\nexport function find(predicate, xs) {\n    const matchValue = tryFind(predicate, xs);\n    if (matchValue == null) {\n        return indexNotFound();\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\nexport function tryFindBack(predicate, xs) {\n    return tryFindBack_1(predicate, toArray(xs));\n}\nexport function findBack(predicate, xs) {\n    const matchValue = tryFindBack(predicate, xs);\n    if (matchValue == null) {\n        return indexNotFound();\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\nexport function tryFindIndex(predicate, xs) {\n    const e = ofSeq(xs);\n    try {\n        const loop = (i_mut) => {\n            loop: while (true) {\n                const i = i_mut;\n                if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                    if (predicate(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) {\n                        return i;\n                    }\n                    else {\n                        i_mut = (i + 1);\n                        continue loop;\n                    }\n                }\n                else {\n                    return void 0;\n                }\n                break;\n            }\n        };\n        return loop(0);\n    }\n    finally {\n        disposeSafe(e);\n    }\n}\nexport function findIndex(predicate, xs) {\n    const matchValue = tryFindIndex(predicate, xs);\n    if (matchValue == null) {\n        indexNotFound();\n        return -1;\n    }\n    else {\n        return value_1(matchValue) | 0;\n    }\n}\nexport function tryFindIndexBack(predicate, xs) {\n    return tryFindIndexBack_1(predicate, toArray(xs));\n}\nexport function findIndexBack(predicate, xs) {\n    const matchValue = tryFindIndexBack(predicate, xs);\n    if (matchValue == null) {\n        indexNotFound();\n        return -1;\n    }\n    else {\n        return value_1(matchValue) | 0;\n    }\n}\nexport function fold(folder, state, xs) {\n    const e = ofSeq(xs);\n    try {\n        let acc = state;\n        while (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            acc = folder(acc, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n        }\n        return acc;\n    }\n    finally {\n        disposeSafe(e);\n    }\n}\nexport function foldBack(folder, xs, state) {\n    return foldBack_1(folder, toArray(xs), state);\n}\nexport function fold2(folder, state, xs, ys) {\n    const e1 = ofSeq(xs);\n    try {\n        const e2 = ofSeq(ys);\n        try {\n            let acc = state;\n            while (e1[\"System.Collections.IEnumerator.MoveNext\"]() && e2[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                acc = folder(acc, e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n            }\n            return acc;\n        }\n        finally {\n            disposeSafe(e2);\n        }\n    }\n    finally {\n        disposeSafe(e1);\n    }\n}\nexport function foldBack2(folder, xs, ys, state) {\n    return foldBack2_1(folder, toArray(xs), toArray(ys), state);\n}\nexport function forAll(predicate, xs) {\n    return !exists((x) => !predicate(x), xs);\n}\nexport function forAll2(predicate, xs, ys) {\n    return !exists2((x, y) => !predicate(x, y), xs, ys);\n}\nexport function tryHead(xs) {\n    if (isArrayLike(xs)) {\n        return tryHead_1(xs);\n    }\n    else if (xs instanceof FSharpList) {\n        return tryHead_2(xs);\n    }\n    else {\n        const e = ofSeq(xs);\n        try {\n            return e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : void 0;\n        }\n        finally {\n            disposeSafe(e);\n        }\n    }\n}\nexport function head(xs) {\n    const matchValue = tryHead(xs);\n    if (matchValue == null) {\n        throw new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"source\");\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\nexport function initialize(count, f) {\n    return unfold((i) => ((i < count) ? [f(i), i + 1] : void 0), 0);\n}\nexport function initializeInfinite(f) {\n    return initialize(2147483647, f);\n}\nexport function isEmpty(xs) {\n    if (isArrayLike(xs)) {\n        const a = xs;\n        return a.length === 0;\n    }\n    else if (xs instanceof FSharpList) {\n        return isEmpty_1(xs);\n    }\n    else {\n        const e = ofSeq(xs);\n        try {\n            return !e[\"System.Collections.IEnumerator.MoveNext\"]();\n        }\n        finally {\n            disposeSafe(e);\n        }\n    }\n}\nexport function tryItem(index, xs) {\n    if (isArrayLike(xs)) {\n        return tryItem_1(index, xs);\n    }\n    else if (xs instanceof FSharpList) {\n        return tryItem_2(index, xs);\n    }\n    else {\n        const e = ofSeq(xs);\n        try {\n            const loop = (index_1_mut) => {\n                loop: while (true) {\n                    const index_1 = index_1_mut;\n                    if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                        return void 0;\n                    }\n                    else if (index_1 === 0) {\n                        return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n                    }\n                    else {\n                        index_1_mut = (index_1 - 1);\n                        continue loop;\n                    }\n                    break;\n                }\n            };\n            return loop(index);\n        }\n        finally {\n            disposeSafe(e);\n        }\n    }\n}\nexport function item(index, xs) {\n    const matchValue = tryItem(index, xs);\n    if (matchValue == null) {\n        throw new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"index\");\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\nexport function iterate(action, xs) {\n    fold((unitVar, x) => {\n        action(x);\n    }, void 0, xs);\n}\nexport function iterate2(action, xs, ys) {\n    fold2((unitVar, x, y) => {\n        action(x, y);\n    }, void 0, xs, ys);\n}\nexport function iterateIndexed(action, xs) {\n    fold((i, x) => {\n        action(i, x);\n        return (i + 1) | 0;\n    }, 0, xs);\n}\nexport function iterateIndexed2(action, xs, ys) {\n    fold2((i, x, y) => {\n        action(i, x, y);\n        return (i + 1) | 0;\n    }, 0, xs, ys);\n}\nexport function tryLast(xs) {\n    const e = ofSeq(xs);\n    try {\n        const loop = (acc_mut) => {\n            loop: while (true) {\n                const acc = acc_mut;\n                if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                    return acc;\n                }\n                else {\n                    acc_mut = e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n                    continue loop;\n                }\n                break;\n            }\n        };\n        return e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(loop(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : void 0;\n    }\n    finally {\n        disposeSafe(e);\n    }\n}\nexport function last(xs) {\n    const matchValue = tryLast(xs);\n    if (matchValue == null) {\n        throw new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"source\");\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\nexport function length(xs) {\n    if (isArrayLike(xs)) {\n        const a = xs;\n        return a.length | 0;\n    }\n    else if (xs instanceof FSharpList) {\n        return length_1(xs) | 0;\n    }\n    else {\n        const e = ofSeq(xs);\n        try {\n            let count = 0;\n            while (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                count = ((count + 1) | 0);\n            }\n            return count | 0;\n        }\n        finally {\n            disposeSafe(e);\n        }\n    }\n}\nexport function map(mapping, xs) {\n    return generate(() => ofSeq(xs), (e) => (e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(mapping(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : void 0), (e_1) => {\n        disposeSafe(e_1);\n    });\n}\nexport function mapIndexed(mapping, xs) {\n    return generateIndexed(() => ofSeq(xs), (i, e) => (e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(mapping(i, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : void 0), (e_1) => {\n        disposeSafe(e_1);\n    });\n}\nexport function indexed(xs) {\n    return mapIndexed((i, x) => [i, x], xs);\n}\nexport function map2(mapping, xs, ys) {\n    return generate(() => [ofSeq(xs), ofSeq(ys)], (tupledArg) => {\n        const e1 = tupledArg[0];\n        const e2 = tupledArg[1];\n        return (e1[\"System.Collections.IEnumerator.MoveNext\"]() && e2[\"System.Collections.IEnumerator.MoveNext\"]()) ? some(mapping(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : void 0;\n    }, (tupledArg_1) => {\n        try {\n            disposeSafe(tupledArg_1[0]);\n        }\n        finally {\n            disposeSafe(tupledArg_1[1]);\n        }\n    });\n}\nexport function mapIndexed2(mapping, xs, ys) {\n    return generateIndexed(() => [ofSeq(xs), ofSeq(ys)], (i, tupledArg) => {\n        const e1 = tupledArg[0];\n        const e2 = tupledArg[1];\n        return (e1[\"System.Collections.IEnumerator.MoveNext\"]() && e2[\"System.Collections.IEnumerator.MoveNext\"]()) ? some(mapping(i, e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : void 0;\n    }, (tupledArg_1) => {\n        try {\n            disposeSafe(tupledArg_1[0]);\n        }\n        finally {\n            disposeSafe(tupledArg_1[1]);\n        }\n    });\n}\nexport function map3(mapping, xs, ys, zs) {\n    return generate(() => [ofSeq(xs), ofSeq(ys), ofSeq(zs)], (tupledArg) => {\n        const e1 = tupledArg[0];\n        const e2 = tupledArg[1];\n        const e3 = tupledArg[2];\n        return ((e1[\"System.Collections.IEnumerator.MoveNext\"]() && e2[\"System.Collections.IEnumerator.MoveNext\"]()) && e3[\"System.Collections.IEnumerator.MoveNext\"]()) ? some(mapping(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), e3[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) : void 0;\n    }, (tupledArg_1) => {\n        try {\n            disposeSafe(tupledArg_1[0]);\n        }\n        finally {\n            try {\n                disposeSafe(tupledArg_1[1]);\n            }\n            finally {\n                disposeSafe(tupledArg_1[2]);\n            }\n        }\n    });\n}\nexport function readOnly(xs) {\n    checkNonNull(\"source\", xs);\n    return map((x) => x, xs);\n}\nexport class CachedSeq$1 {\n    constructor(cleanup, res) {\n        this.cleanup = cleanup;\n        this.res = res;\n    }\n    Dispose() {\n        const _ = this;\n        _.cleanup();\n    }\n    GetEnumerator() {\n        const _ = this;\n        return getEnumerator(_.res);\n    }\n    [Symbol.iterator]() {\n        return toIterator(getEnumerator(this));\n    }\n    \"System.Collections.IEnumerable.GetEnumerator\"() {\n        const _ = this;\n        return getEnumerator(_.res);\n    }\n}\nexport function CachedSeq$1_$reflection(gen0) {\n    return class_type(\"SeqModule.CachedSeq`1\", [gen0], CachedSeq$1);\n}\nexport function CachedSeq$1_$ctor_Z7A8347D4(cleanup, res) {\n    return new CachedSeq$1(cleanup, res);\n}\nexport function CachedSeq$1__Clear(_) {\n    _.cleanup();\n}\nexport function cache(source) {\n    checkNonNull(\"source\", source);\n    const prefix = [];\n    let enumeratorR = void 0;\n    return CachedSeq$1_$ctor_Z7A8347D4(() => {\n        Operators_Lock(prefix, () => {\n            clear(prefix);\n            let matchResult, e;\n            if (enumeratorR != null) {\n                if (value_1(enumeratorR) != null) {\n                    matchResult = 0;\n                    e = value_1(value_1(enumeratorR));\n                }\n                else {\n                    matchResult = 1;\n                }\n            }\n            else {\n                matchResult = 1;\n            }\n            switch (matchResult) {\n                case 0: {\n                    disposeSafe(e);\n                    break;\n                }\n            }\n            enumeratorR = void 0;\n        });\n    }, unfold((i_1) => Operators_Lock(prefix, () => {\n        if (i_1 < prefix.length) {\n            return [prefix[i_1], i_1 + 1];\n        }\n        else {\n            if (i_1 >= prefix.length) {\n                let optEnumerator_2;\n                if (enumeratorR != null) {\n                    optEnumerator_2 = value_1(enumeratorR);\n                }\n                else {\n                    const optEnumerator = getEnumerator(source);\n                    enumeratorR = some(optEnumerator);\n                    optEnumerator_2 = optEnumerator;\n                }\n                if (optEnumerator_2 == null) {\n                }\n                else {\n                    const enumerator = value_1(optEnumerator_2);\n                    if (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                        void (prefix.push(enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()));\n                    }\n                    else {\n                        disposeSafe(enumerator);\n                        enumeratorR = some(void 0);\n                    }\n                }\n            }\n            if (i_1 < prefix.length) {\n                return [prefix[i_1], i_1 + 1];\n            }\n            else {\n                return void 0;\n            }\n        }\n    }), 0));\n}\nexport function allPairs(xs, ys) {\n    const ysCache = cache(ys);\n    return delay(() => concat(map((x) => map((y) => [x, y], ysCache), xs)));\n}\nexport function mapFold(mapping, state, xs) {\n    const patternInput = mapFold_1(mapping, state, toArray(xs));\n    return [readOnly(patternInput[0]), patternInput[1]];\n}\nexport function mapFoldBack(mapping, xs, state) {\n    const patternInput = mapFoldBack_1(mapping, toArray(xs), state);\n    return [readOnly(patternInput[0]), patternInput[1]];\n}\nexport function tryPick(chooser, xs) {\n    const e = ofSeq(xs);\n    try {\n        let res = void 0;\n        while ((res == null) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            res = chooser(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n        }\n        return res;\n    }\n    finally {\n        disposeSafe(e);\n    }\n}\nexport function pick(chooser, xs) {\n    const matchValue = tryPick(chooser, xs);\n    if (matchValue == null) {\n        return indexNotFound();\n    }\n    else {\n        return value_1(matchValue);\n    }\n}\nexport function reduce(folder, xs) {\n    const e = ofSeq(xs);\n    try {\n        const loop = (acc_mut) => {\n            loop: while (true) {\n                const acc = acc_mut;\n                if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                    acc_mut = folder(acc, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n                    continue loop;\n                }\n                else {\n                    return acc;\n                }\n                break;\n            }\n        };\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            return loop(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n        }\n        else {\n            throw new Error(SR_inputSequenceEmpty);\n        }\n    }\n    finally {\n        disposeSafe(e);\n    }\n}\nexport function reduceBack(folder, xs) {\n    const arr = toArray(xs);\n    if (arr.length > 0) {\n        return arr.reduceRight(folder);\n    }\n    else {\n        throw new Error(SR_inputSequenceEmpty);\n    }\n}\nexport function replicate(n, x) {\n    return initialize(n, (_arg) => x);\n}\nexport function reverse(xs) {\n    return delay(() => ofArray(reverse_1(toArray(xs))));\n}\nexport function scan(folder, state, xs) {\n    return delay(() => {\n        let acc = state;\n        return concat([singleton(state), map((x) => {\n                acc = folder(acc, x);\n                return acc;\n            }, xs)]);\n    });\n}\nexport function scanBack(folder, xs, state) {\n    return delay(() => ofArray(scanBack_1(folder, toArray(xs), state)));\n}\nexport function skip(count, source) {\n    return mkSeq(() => {\n        const e = ofSeq(source);\n        try {\n            for (let _ = 1; _ <= count; _++) {\n                if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                    throw new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"source\");\n                }\n            }\n            return Enumerator_enumerateThenFinally(() => {\n            }, e);\n        }\n        catch (matchValue) {\n            disposeSafe(e);\n            throw matchValue;\n        }\n    });\n}\nexport function skipWhile(predicate, xs) {\n    return delay(() => {\n        let skipped = true;\n        return filter((x) => {\n            if (skipped) {\n                skipped = predicate(x);\n            }\n            return !skipped;\n        }, xs);\n    });\n}\nexport function tail(xs) {\n    return skip(1, xs);\n}\nexport function take(count, xs) {\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\n        if (i < count) {\n            if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n            }\n            else {\n                throw new Error((SR_notEnoughElements + \"\\\\nParameter name: \") + \"source\");\n            }\n        }\n        else {\n            return void 0;\n        }\n    }, (e_1) => {\n        disposeSafe(e_1);\n    });\n}\nexport function takeWhile(predicate, xs) {\n    return generate(() => ofSeq(xs), (e) => ((e[\"System.Collections.IEnumerator.MoveNext\"]() && predicate(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]())) ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : void 0), (e_1) => {\n        disposeSafe(e_1);\n    });\n}\nexport function truncate(count, xs) {\n    return generateIndexed(() => ofSeq(xs), (i, e) => (((i < count) && e[\"System.Collections.IEnumerator.MoveNext\"]()) ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : void 0), (e_1) => {\n        disposeSafe(e_1);\n    });\n}\nexport function zip(xs, ys) {\n    return map2((x, y) => [x, y], xs, ys);\n}\nexport function zip3(xs, ys, zs) {\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\n}\nexport function collect(mapping, xs) {\n    return delay(() => concat(map(mapping, xs)));\n}\nexport function where(predicate, xs) {\n    return filter(predicate, xs);\n}\nexport function pairwise(xs) {\n    return delay(() => ofArray(pairwise_1(toArray(xs))));\n}\nexport function splitInto(chunks, xs) {\n    return delay(() => ofArray(splitInto_1(chunks, toArray(xs))));\n}\nexport function windowed(windowSize, xs) {\n    return delay(() => ofArray(windowed_1(windowSize, toArray(xs))));\n}\nexport function transpose(xss) {\n    return delay(() => ofArray(map_1(ofArray, transpose_1(map_1(toArray, toArray(xss))))));\n}\nexport function sortWith(comparer, xs) {\n    return delay(() => {\n        const arr = toArray(xs);\n        arr.sort(comparer);\n        return ofArray(arr);\n    });\n}\nexport function sort(xs, comparer) {\n    return sortWith((x, y) => comparer.Compare(x, y), xs);\n}\nexport function sortBy(projection, xs, comparer) {\n    return sortWith((x, y) => comparer.Compare(projection(x), projection(y)), xs);\n}\nexport function sortDescending(xs, comparer) {\n    return sortWith((x, y) => (comparer.Compare(x, y) * -1), xs);\n}\nexport function sortByDescending(projection, xs, comparer) {\n    return sortWith((x, y) => (comparer.Compare(projection(x), projection(y)) * -1), xs);\n}\nexport function sum(xs, adder) {\n    return fold((acc, x) => adder.Add(acc, x), adder.GetZero(), xs);\n}\nexport function sumBy(f, xs, adder) {\n    return fold((acc, x) => adder.Add(acc, f(x)), adder.GetZero(), xs);\n}\nexport function maxBy(projection, xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? y : x), xs);\n}\nexport function max(xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? y : x), xs);\n}\nexport function minBy(projection, xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(projection(y), projection(x)) > 0) ? x : y), xs);\n}\nexport function min(xs, comparer) {\n    return reduce((x, y) => ((comparer.Compare(y, x) > 0) ? x : y), xs);\n}\nexport function average(xs, averager) {\n    let count = 0;\n    const total = fold((acc, x) => {\n        count = ((count + 1) | 0);\n        return averager.Add(acc, x);\n    }, averager.GetZero(), xs);\n    if (count === 0) {\n        throw new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"source\");\n    }\n    else {\n        return averager.DivideByInt(total, count);\n    }\n}\nexport function averageBy(f, xs, averager) {\n    let count = 0;\n    const total = fold((acc, x) => {\n        count = ((count + 1) | 0);\n        return averager.Add(acc, f(x));\n    }, averager.GetZero(), xs);\n    if (count === 0) {\n        throw new Error((SR_inputSequenceEmpty + \"\\\\nParameter name: \") + \"source\");\n    }\n    else {\n        return averager.DivideByInt(total, count);\n    }\n}\nexport function permute(f, xs) {\n    return delay(() => ofArray(permute_1(f, toArray(xs))));\n}\nexport function chunkBySize(chunkSize, xs) {\n    return delay(() => ofArray(chunkBySize_1(chunkSize, toArray(xs))));\n}\nexport function insertAt(index, y, xs) {\n    let isDone = false;\n    if (index < 0) {\n        throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n    }\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\n        if ((isDone ? true : (i < index)) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n        }\n        else if (i === index) {\n            isDone = true;\n            return some(y);\n        }\n        else {\n            if (!isDone) {\n                throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n            }\n            return void 0;\n        }\n    }, (e_1) => {\n        disposeSafe(e_1);\n    });\n}\nexport function insertManyAt(index, ys, xs) {\n    let status = -1;\n    if (index < 0) {\n        throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n    }\n    return generateIndexed(() => [ofSeq(xs), ofSeq(ys)], (i, tupledArg) => {\n        const e1 = tupledArg[0];\n        const e2 = tupledArg[1];\n        if (i === index) {\n            status = 0;\n        }\n        let inserted;\n        if (status === 0) {\n            if (e2[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                inserted = some(e2[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n            }\n            else {\n                status = 1;\n                inserted = void 0;\n            }\n        }\n        else {\n            inserted = void 0;\n        }\n        if (inserted == null) {\n            if (e1[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                return some(e1[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n            }\n            else {\n                if (status < 1) {\n                    throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n                }\n                return void 0;\n            }\n        }\n        else {\n            return some(value_1(inserted));\n        }\n    }, (tupledArg_1) => {\n        disposeSafe(tupledArg_1[0]);\n        disposeSafe(tupledArg_1[1]);\n    });\n}\nexport function removeAt(index, xs) {\n    let isDone = false;\n    if (index < 0) {\n        throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n    }\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\n        if ((isDone ? true : (i < index)) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n        }\n        else if ((i === index) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            isDone = true;\n            return e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : void 0;\n        }\n        else {\n            if (!isDone) {\n                throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n            }\n            return void 0;\n        }\n    }, (e_1) => {\n        disposeSafe(e_1);\n    });\n}\nexport function removeManyAt(index, count, xs) {\n    if (index < 0) {\n        throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n    }\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\n        if (i < index) {\n            if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n            }\n            else {\n                throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n            }\n        }\n        else {\n            if (i === index) {\n                for (let _ = 1; _ <= count; _++) {\n                    if (!e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                        throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"count\");\n                    }\n                }\n            }\n            return e[\"System.Collections.IEnumerator.MoveNext\"]() ? some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]()) : void 0;\n        }\n    }, (e_1) => {\n        disposeSafe(e_1);\n    });\n}\nexport function updateAt(index, y, xs) {\n    let isDone = false;\n    if (index < 0) {\n        throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n    }\n    return generateIndexed(() => ofSeq(xs), (i, e) => {\n        if ((isDone ? true : (i < index)) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            return some(e[\"System.Collections.Generic.IEnumerator`1.get_Current\"]());\n        }\n        else if ((i === index) && e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            isDone = true;\n            return some(y);\n        }\n        else {\n            if (!isDone) {\n                throw new Error((SR_indexOutOfBounds + \"\\\\nParameter name: \") + \"index\");\n            }\n            return void 0;\n        }\n    }, (e_1) => {\n        disposeSafe(e_1);\n    });\n}\n","import { disposeSafe, defaultOf, structuralHash, equals } from \"./Util.js\";\nimport { HashIdentity_Structural, ComparisonIdentity_Structural } from \"./FSharp.Collections.js\";\nimport { StringBuilder__Append_Z721C83C5 } from \"./System.Text.js\";\nexport const LanguagePrimitives_GenericEqualityComparer = {\n    \"System.Collections.IEqualityComparer.Equals541DA560\"(x, y) {\n        return equals(x, y);\n    },\n    \"System.Collections.IEqualityComparer.GetHashCode4E60E31B\"(x_1) {\n        return structuralHash(x_1);\n    },\n};\nexport const LanguagePrimitives_GenericEqualityERComparer = {\n    \"System.Collections.IEqualityComparer.Equals541DA560\"(x, y) {\n        return equals(x, y);\n    },\n    \"System.Collections.IEqualityComparer.GetHashCode4E60E31B\"(x_1) {\n        return structuralHash(x_1);\n    },\n};\nexport function LanguagePrimitives_FastGenericComparer() {\n    return ComparisonIdentity_Structural();\n}\nexport function LanguagePrimitives_FastGenericComparerFromTable() {\n    return ComparisonIdentity_Structural();\n}\nexport function LanguagePrimitives_FastGenericEqualityComparer() {\n    return HashIdentity_Structural();\n}\nexport function LanguagePrimitives_FastGenericEqualityComparerFromTable() {\n    return HashIdentity_Structural();\n}\nexport function Operators_Failure(message) {\n    return new Error(message);\n}\nexport function Operators_FailurePattern(exn) {\n    return exn.message;\n}\nexport function Operators_NullArg(x) {\n    throw new Error(x);\n}\nexport function Operators_Using(resource, action) {\n    try {\n        return action(resource);\n    }\n    finally {\n        if (equals(resource, defaultOf())) {\n        }\n        else {\n            let copyOfStruct = resource;\n            disposeSafe(copyOfStruct);\n        }\n    }\n}\nexport function Operators_Lock(_lockObj, action) {\n    return action();\n}\nexport function ExtraTopLevelOperators_LazyPattern(input) {\n    return input.Value;\n}\nexport function PrintfModule_PrintFormatToStringBuilderThen(continuation, builder, format) {\n    return format.cont((s) => {\n        StringBuilder__Append_Z721C83C5(builder, s);\n        return continuation();\n    });\n}\nexport function PrintfModule_PrintFormatToStringBuilder(builder, format) {\n    return PrintfModule_PrintFormatToStringBuilderThen(() => {\n    }, builder, format);\n}\n","export function Helpers_allocateArrayFromCons(cons, len) {\n    if ((typeof cons) === \"function\") {\n        return new cons(len);\n    }\n    else {\n        return new Array(len);\n    }\n}\n","import { record_type, bool_type, list_type, option_type, class_type } from \"./Reflection.js\";\nimport { some, value as value_3 } from \"./Option.js\";\nimport { structuralHash, toIterator, disposeSafe, getEnumerator, isArrayLike } from \"./Util.js\";\nimport { toString, Record } from \"./Types.js\";\nimport { fold as fold_2, cons, singleton as singleton_1, empty as empty_1, ofArrayWithTail, tail, head, isEmpty as isEmpty_1, FSharpList } from \"./List.js\";\nimport { fold as fold_1, fill } from \"./Array.js\";\nimport { join } from \"./String.js\";\nimport { exists as exists_1, cache, forAll as forAll_1, fold as fold_3, reduce, iterate as iterate_1, map as map_1 } from \"./Seq.js\";\nimport { HashSet__get_Comparer, HashSet_$ctor_Z6150332D, HashSet } from \"./MutableSet.js\";\nexport class SetTreeLeaf$1 {\n    constructor(k) {\n        this.k = k;\n    }\n}\nexport function SetTreeLeaf$1_$reflection(gen0) {\n    return class_type(\"Set.SetTreeLeaf`1\", [gen0], SetTreeLeaf$1);\n}\nexport function SetTreeLeaf$1_$ctor_2B595(k) {\n    return new SetTreeLeaf$1(k);\n}\nexport function SetTreeLeaf$1__get_Key(_) {\n    return _.k;\n}\nexport class SetTreeNode$1 extends SetTreeLeaf$1 {\n    constructor(v, left, right, h) {\n        super(v);\n        this.left = left;\n        this.right = right;\n        this.h = (h | 0);\n    }\n}\nexport function SetTreeNode$1_$reflection(gen0) {\n    return class_type(\"Set.SetTreeNode`1\", [gen0], SetTreeNode$1, SetTreeLeaf$1_$reflection(gen0));\n}\nexport function SetTreeNode$1_$ctor_5F465FC9(v, left, right, h) {\n    return new SetTreeNode$1(v, left, right, h);\n}\nexport function SetTreeNode$1__get_Left(_) {\n    return _.left;\n}\nexport function SetTreeNode$1__get_Right(_) {\n    return _.right;\n}\nexport function SetTreeNode$1__get_Height(_) {\n    return _.h;\n}\nexport function SetTreeModule_empty() {\n    return void 0;\n}\nexport function SetTreeModule_countAux(t_mut, acc_mut) {\n    SetTreeModule_countAux: while (true) {\n        const t = t_mut, acc = acc_mut;\n        if (t != null) {\n            const t2 = value_3(t);\n            if (t2 instanceof SetTreeNode$1) {\n                const tn = t2;\n                t_mut = SetTreeNode$1__get_Left(tn);\n                acc_mut = SetTreeModule_countAux(SetTreeNode$1__get_Right(tn), acc + 1);\n                continue SetTreeModule_countAux;\n            }\n            else {\n                return (acc + 1) | 0;\n            }\n        }\n        else {\n            return acc | 0;\n        }\n        break;\n    }\n}\nexport function SetTreeModule_count(s) {\n    return SetTreeModule_countAux(s, 0);\n}\nexport function SetTreeModule_mk(l, k, r) {\n    let tn, tn_1;\n    let hl;\n    const t = l;\n    if (t != null) {\n        const t2 = value_3(t);\n        hl = ((t2 instanceof SetTreeNode$1) ? ((tn = t2, SetTreeNode$1__get_Height(tn))) : 1);\n    }\n    else {\n        hl = 0;\n    }\n    let hr;\n    const t_1 = r;\n    if (t_1 != null) {\n        const t2_1 = value_3(t_1);\n        hr = ((t2_1 instanceof SetTreeNode$1) ? ((tn_1 = t2_1, SetTreeNode$1__get_Height(tn_1))) : 1);\n    }\n    else {\n        hr = 0;\n    }\n    const m = ((hl < hr) ? hr : hl) | 0;\n    if (m === 0) {\n        return SetTreeLeaf$1_$ctor_2B595(k);\n    }\n    else {\n        return SetTreeNode$1_$ctor_5F465FC9(k, l, r, m + 1);\n    }\n}\nexport function SetTreeModule_rebalance(t1, v, t2) {\n    let tn, tn_1, t_2, t2_3, tn_2, t_3, t2_4, tn_3;\n    let t1h;\n    const t = t1;\n    if (t != null) {\n        const t2_1 = value_3(t);\n        t1h = ((t2_1 instanceof SetTreeNode$1) ? ((tn = t2_1, SetTreeNode$1__get_Height(tn))) : 1);\n    }\n    else {\n        t1h = 0;\n    }\n    let t2h;\n    const t_1 = t2;\n    if (t_1 != null) {\n        const t2_2 = value_3(t_1);\n        t2h = ((t2_2 instanceof SetTreeNode$1) ? ((tn_1 = t2_2, SetTreeNode$1__get_Height(tn_1))) : 1);\n    }\n    else {\n        t2h = 0;\n    }\n    if (t2h > (t1h + 2)) {\n        const matchValue = value_3(t2);\n        if (matchValue instanceof SetTreeNode$1) {\n            const t2$0027 = matchValue;\n            if (((t_2 = SetTreeNode$1__get_Left(t2$0027), (t_2 != null) ? ((t2_3 = value_3(t_2), (t2_3 instanceof SetTreeNode$1) ? ((tn_2 = t2_3, SetTreeNode$1__get_Height(tn_2))) : 1)) : 0)) > (t1h + 1)) {\n                const matchValue_1 = value_3(SetTreeNode$1__get_Left(t2$0027));\n                if (matchValue_1 instanceof SetTreeNode$1) {\n                    const t2l = matchValue_1;\n                    return SetTreeModule_mk(SetTreeModule_mk(t1, v, SetTreeNode$1__get_Left(t2l)), SetTreeLeaf$1__get_Key(t2l), SetTreeModule_mk(SetTreeNode$1__get_Right(t2l), SetTreeLeaf$1__get_Key(t2$0027), SetTreeNode$1__get_Right(t2$0027)));\n                }\n                else {\n                    throw new Error(\"internal error: Set.rebalance\");\n                }\n            }\n            else {\n                return SetTreeModule_mk(SetTreeModule_mk(t1, v, SetTreeNode$1__get_Left(t2$0027)), SetTreeLeaf$1__get_Key(t2$0027), SetTreeNode$1__get_Right(t2$0027));\n            }\n        }\n        else {\n            throw new Error(\"internal error: Set.rebalance\");\n        }\n    }\n    else if (t1h > (t2h + 2)) {\n        const matchValue_2 = value_3(t1);\n        if (matchValue_2 instanceof SetTreeNode$1) {\n            const t1$0027 = matchValue_2;\n            if (((t_3 = SetTreeNode$1__get_Right(t1$0027), (t_3 != null) ? ((t2_4 = value_3(t_3), (t2_4 instanceof SetTreeNode$1) ? ((tn_3 = t2_4, SetTreeNode$1__get_Height(tn_3))) : 1)) : 0)) > (t2h + 1)) {\n                const matchValue_3 = value_3(SetTreeNode$1__get_Right(t1$0027));\n                if (matchValue_3 instanceof SetTreeNode$1) {\n                    const t1r = matchValue_3;\n                    return SetTreeModule_mk(SetTreeModule_mk(SetTreeNode$1__get_Left(t1$0027), SetTreeLeaf$1__get_Key(t1$0027), SetTreeNode$1__get_Left(t1r)), SetTreeLeaf$1__get_Key(t1r), SetTreeModule_mk(SetTreeNode$1__get_Right(t1r), v, t2));\n                }\n                else {\n                    throw new Error(\"internal error: Set.rebalance\");\n                }\n            }\n            else {\n                return SetTreeModule_mk(SetTreeNode$1__get_Left(t1$0027), SetTreeLeaf$1__get_Key(t1$0027), SetTreeModule_mk(SetTreeNode$1__get_Right(t1$0027), v, t2));\n            }\n        }\n        else {\n            throw new Error(\"internal error: Set.rebalance\");\n        }\n    }\n    else {\n        return SetTreeModule_mk(t1, v, t2);\n    }\n}\nexport function SetTreeModule_add(comparer, k, t) {\n    if (t != null) {\n        const t2 = value_3(t);\n        const c = comparer.Compare(k, SetTreeLeaf$1__get_Key(t2)) | 0;\n        if (t2 instanceof SetTreeNode$1) {\n            const tn = t2;\n            if (c < 0) {\n                return SetTreeModule_rebalance(SetTreeModule_add(comparer, k, SetTreeNode$1__get_Left(tn)), SetTreeLeaf$1__get_Key(tn), SetTreeNode$1__get_Right(tn));\n            }\n            else if (c === 0) {\n                return t;\n            }\n            else {\n                return SetTreeModule_rebalance(SetTreeNode$1__get_Left(tn), SetTreeLeaf$1__get_Key(tn), SetTreeModule_add(comparer, k, SetTreeNode$1__get_Right(tn)));\n            }\n        }\n        else {\n            const c_1 = comparer.Compare(k, SetTreeLeaf$1__get_Key(t2)) | 0;\n            if (c_1 < 0) {\n                return SetTreeNode$1_$ctor_5F465FC9(k, SetTreeModule_empty(), t, 2);\n            }\n            else if (c_1 === 0) {\n                return t;\n            }\n            else {\n                return SetTreeNode$1_$ctor_5F465FC9(k, t, SetTreeModule_empty(), 2);\n            }\n        }\n    }\n    else {\n        return SetTreeLeaf$1_$ctor_2B595(k);\n    }\n}\nexport function SetTreeModule_balance(comparer, t1, k, t2) {\n    if (t1 != null) {\n        const t1$0027 = value_3(t1);\n        if (t2 != null) {\n            const t2$0027 = value_3(t2);\n            if (t1$0027 instanceof SetTreeNode$1) {\n                const t1n = t1$0027;\n                if (t2$0027 instanceof SetTreeNode$1) {\n                    const t2n = t2$0027;\n                    if ((SetTreeNode$1__get_Height(t1n) + 2) < SetTreeNode$1__get_Height(t2n)) {\n                        return SetTreeModule_rebalance(SetTreeModule_balance(comparer, t1, k, SetTreeNode$1__get_Left(t2n)), SetTreeLeaf$1__get_Key(t2n), SetTreeNode$1__get_Right(t2n));\n                    }\n                    else if ((SetTreeNode$1__get_Height(t2n) + 2) < SetTreeNode$1__get_Height(t1n)) {\n                        return SetTreeModule_rebalance(SetTreeNode$1__get_Left(t1n), SetTreeLeaf$1__get_Key(t1n), SetTreeModule_balance(comparer, SetTreeNode$1__get_Right(t1n), k, t2));\n                    }\n                    else {\n                        return SetTreeModule_mk(t1, k, t2);\n                    }\n                }\n                else {\n                    return SetTreeModule_add(comparer, k, SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2$0027), t1));\n                }\n            }\n            else {\n                return SetTreeModule_add(comparer, k, SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t1$0027), t2));\n            }\n        }\n        else {\n            return SetTreeModule_add(comparer, k, t1);\n        }\n    }\n    else {\n        return SetTreeModule_add(comparer, k, t2);\n    }\n}\nexport function SetTreeModule_split(comparer, pivot, t) {\n    if (t != null) {\n        const t2 = value_3(t);\n        if (t2 instanceof SetTreeNode$1) {\n            const tn = t2;\n            const c = comparer.Compare(pivot, SetTreeLeaf$1__get_Key(tn)) | 0;\n            if (c < 0) {\n                const patternInput = SetTreeModule_split(comparer, pivot, SetTreeNode$1__get_Left(tn));\n                return [patternInput[0], patternInput[1], SetTreeModule_balance(comparer, patternInput[2], SetTreeLeaf$1__get_Key(tn), SetTreeNode$1__get_Right(tn))];\n            }\n            else if (c === 0) {\n                return [SetTreeNode$1__get_Left(tn), true, SetTreeNode$1__get_Right(tn)];\n            }\n            else {\n                const patternInput_1 = SetTreeModule_split(comparer, pivot, SetTreeNode$1__get_Right(tn));\n                return [SetTreeModule_balance(comparer, SetTreeNode$1__get_Left(tn), SetTreeLeaf$1__get_Key(tn), patternInput_1[0]), patternInput_1[1], patternInput_1[2]];\n            }\n        }\n        else {\n            const c_1 = comparer.Compare(SetTreeLeaf$1__get_Key(t2), pivot) | 0;\n            if (c_1 < 0) {\n                return [t, false, SetTreeModule_empty()];\n            }\n            else if (c_1 === 0) {\n                return [SetTreeModule_empty(), true, SetTreeModule_empty()];\n            }\n            else {\n                return [SetTreeModule_empty(), false, t];\n            }\n        }\n    }\n    else {\n        return [SetTreeModule_empty(), false, SetTreeModule_empty()];\n    }\n}\nexport function SetTreeModule_spliceOutSuccessor(t) {\n    if (t != null) {\n        const t2 = value_3(t);\n        if (t2 instanceof SetTreeNode$1) {\n            const tn = t2;\n            if (SetTreeNode$1__get_Left(tn) == null) {\n                return [SetTreeLeaf$1__get_Key(tn), SetTreeNode$1__get_Right(tn)];\n            }\n            else {\n                const patternInput = SetTreeModule_spliceOutSuccessor(SetTreeNode$1__get_Left(tn));\n                return [patternInput[0], SetTreeModule_mk(patternInput[1], SetTreeLeaf$1__get_Key(tn), SetTreeNode$1__get_Right(tn))];\n            }\n        }\n        else {\n            return [SetTreeLeaf$1__get_Key(t2), SetTreeModule_empty()];\n        }\n    }\n    else {\n        throw new Error(\"internal error: Set.spliceOutSuccessor\");\n    }\n}\nexport function SetTreeModule_remove(comparer, k, t) {\n    if (t != null) {\n        const t2 = value_3(t);\n        const c = comparer.Compare(k, SetTreeLeaf$1__get_Key(t2)) | 0;\n        if (t2 instanceof SetTreeNode$1) {\n            const tn = t2;\n            if (c < 0) {\n                return SetTreeModule_rebalance(SetTreeModule_remove(comparer, k, SetTreeNode$1__get_Left(tn)), SetTreeLeaf$1__get_Key(tn), SetTreeNode$1__get_Right(tn));\n            }\n            else if (c === 0) {\n                if (SetTreeNode$1__get_Left(tn) == null) {\n                    return SetTreeNode$1__get_Right(tn);\n                }\n                else if (SetTreeNode$1__get_Right(tn) == null) {\n                    return SetTreeNode$1__get_Left(tn);\n                }\n                else {\n                    const patternInput = SetTreeModule_spliceOutSuccessor(SetTreeNode$1__get_Right(tn));\n                    return SetTreeModule_mk(SetTreeNode$1__get_Left(tn), patternInput[0], patternInput[1]);\n                }\n            }\n            else {\n                return SetTreeModule_rebalance(SetTreeNode$1__get_Left(tn), SetTreeLeaf$1__get_Key(tn), SetTreeModule_remove(comparer, k, SetTreeNode$1__get_Right(tn)));\n            }\n        }\n        else if (c === 0) {\n            return SetTreeModule_empty();\n        }\n        else {\n            return t;\n        }\n    }\n    else {\n        return t;\n    }\n}\nexport function SetTreeModule_mem(comparer_mut, k_mut, t_mut) {\n    SetTreeModule_mem: while (true) {\n        const comparer = comparer_mut, k = k_mut, t = t_mut;\n        if (t != null) {\n            const t2 = value_3(t);\n            const c = comparer.Compare(k, SetTreeLeaf$1__get_Key(t2)) | 0;\n            if (t2 instanceof SetTreeNode$1) {\n                const tn = t2;\n                if (c < 0) {\n                    comparer_mut = comparer;\n                    k_mut = k;\n                    t_mut = SetTreeNode$1__get_Left(tn);\n                    continue SetTreeModule_mem;\n                }\n                else if (c === 0) {\n                    return true;\n                }\n                else {\n                    comparer_mut = comparer;\n                    k_mut = k;\n                    t_mut = SetTreeNode$1__get_Right(tn);\n                    continue SetTreeModule_mem;\n                }\n            }\n            else {\n                return c === 0;\n            }\n        }\n        else {\n            return false;\n        }\n        break;\n    }\n}\nexport function SetTreeModule_iter(f_mut, t_mut) {\n    SetTreeModule_iter: while (true) {\n        const f = f_mut, t = t_mut;\n        if (t != null) {\n            const t2 = value_3(t);\n            if (t2 instanceof SetTreeNode$1) {\n                const tn = t2;\n                SetTreeModule_iter(f, SetTreeNode$1__get_Left(tn));\n                f(SetTreeLeaf$1__get_Key(tn));\n                f_mut = f;\n                t_mut = SetTreeNode$1__get_Right(tn);\n                continue SetTreeModule_iter;\n            }\n            else {\n                f(SetTreeLeaf$1__get_Key(t2));\n            }\n        }\n        break;\n    }\n}\nexport function SetTreeModule_foldBackOpt(f_mut, t_mut, x_mut) {\n    SetTreeModule_foldBackOpt: while (true) {\n        const f = f_mut, t = t_mut, x = x_mut;\n        if (t != null) {\n            const t2 = value_3(t);\n            if (t2 instanceof SetTreeNode$1) {\n                const tn = t2;\n                f_mut = f;\n                t_mut = SetTreeNode$1__get_Left(tn);\n                x_mut = f(SetTreeLeaf$1__get_Key(tn), SetTreeModule_foldBackOpt(f, SetTreeNode$1__get_Right(tn), x));\n                continue SetTreeModule_foldBackOpt;\n            }\n            else {\n                return f(SetTreeLeaf$1__get_Key(t2), x);\n            }\n        }\n        else {\n            return x;\n        }\n        break;\n    }\n}\nexport function SetTreeModule_foldBack(f, m, x) {\n    return SetTreeModule_foldBackOpt(f, m, x);\n}\nexport function SetTreeModule_foldOpt(f_mut, x_mut, t_mut) {\n    SetTreeModule_foldOpt: while (true) {\n        const f = f_mut, x = x_mut, t = t_mut;\n        if (t != null) {\n            const t2 = value_3(t);\n            if (t2 instanceof SetTreeNode$1) {\n                const tn = t2;\n                f_mut = f;\n                x_mut = f(SetTreeModule_foldOpt(f, x, SetTreeNode$1__get_Left(tn)), SetTreeLeaf$1__get_Key(tn));\n                t_mut = SetTreeNode$1__get_Right(tn);\n                continue SetTreeModule_foldOpt;\n            }\n            else {\n                return f(x, SetTreeLeaf$1__get_Key(t2));\n            }\n        }\n        else {\n            return x;\n        }\n        break;\n    }\n}\nexport function SetTreeModule_fold(f, x, m) {\n    return SetTreeModule_foldOpt(f, x, m);\n}\nexport function SetTreeModule_forall(f_mut, t_mut) {\n    SetTreeModule_forall: while (true) {\n        const f = f_mut, t = t_mut;\n        if (t != null) {\n            const t2 = value_3(t);\n            if (t2 instanceof SetTreeNode$1) {\n                const tn = t2;\n                if (f(SetTreeLeaf$1__get_Key(tn)) && SetTreeModule_forall(f, SetTreeNode$1__get_Left(tn))) {\n                    f_mut = f;\n                    t_mut = SetTreeNode$1__get_Right(tn);\n                    continue SetTreeModule_forall;\n                }\n                else {\n                    return false;\n                }\n            }\n            else {\n                return f(SetTreeLeaf$1__get_Key(t2));\n            }\n        }\n        else {\n            return true;\n        }\n        break;\n    }\n}\nexport function SetTreeModule_exists(f_mut, t_mut) {\n    SetTreeModule_exists: while (true) {\n        const f = f_mut, t = t_mut;\n        if (t != null) {\n            const t2 = value_3(t);\n            if (t2 instanceof SetTreeNode$1) {\n                const tn = t2;\n                if (f(SetTreeLeaf$1__get_Key(tn)) ? true : SetTreeModule_exists(f, SetTreeNode$1__get_Left(tn))) {\n                    return true;\n                }\n                else {\n                    f_mut = f;\n                    t_mut = SetTreeNode$1__get_Right(tn);\n                    continue SetTreeModule_exists;\n                }\n            }\n            else {\n                return f(SetTreeLeaf$1__get_Key(t2));\n            }\n        }\n        else {\n            return false;\n        }\n        break;\n    }\n}\nexport function SetTreeModule_subset(comparer, a, b) {\n    return SetTreeModule_forall((x) => SetTreeModule_mem(comparer, x, b), a);\n}\nexport function SetTreeModule_properSubset(comparer, a, b) {\n    if (SetTreeModule_forall((x) => SetTreeModule_mem(comparer, x, b), a)) {\n        return SetTreeModule_exists((x_1) => !SetTreeModule_mem(comparer, x_1, a), b);\n    }\n    else {\n        return false;\n    }\n}\nexport function SetTreeModule_filterAux(comparer_mut, f_mut, t_mut, acc_mut) {\n    SetTreeModule_filterAux: while (true) {\n        const comparer = comparer_mut, f = f_mut, t = t_mut, acc = acc_mut;\n        if (t != null) {\n            const t2 = value_3(t);\n            if (t2 instanceof SetTreeNode$1) {\n                const tn = t2;\n                const acc_1 = f(SetTreeLeaf$1__get_Key(tn)) ? SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(tn), acc) : acc;\n                comparer_mut = comparer;\n                f_mut = f;\n                t_mut = SetTreeNode$1__get_Left(tn);\n                acc_mut = SetTreeModule_filterAux(comparer, f, SetTreeNode$1__get_Right(tn), acc_1);\n                continue SetTreeModule_filterAux;\n            }\n            else if (f(SetTreeLeaf$1__get_Key(t2))) {\n                return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2), acc);\n            }\n            else {\n                return acc;\n            }\n        }\n        else {\n            return acc;\n        }\n        break;\n    }\n}\nexport function SetTreeModule_filter(comparer, f, s) {\n    return SetTreeModule_filterAux(comparer, f, s, SetTreeModule_empty());\n}\nexport function SetTreeModule_diffAux(comparer_mut, t_mut, acc_mut) {\n    SetTreeModule_diffAux: while (true) {\n        const comparer = comparer_mut, t = t_mut, acc = acc_mut;\n        if (acc == null) {\n            return acc;\n        }\n        else if (t != null) {\n            const t2 = value_3(t);\n            if (t2 instanceof SetTreeNode$1) {\n                const tn = t2;\n                comparer_mut = comparer;\n                t_mut = SetTreeNode$1__get_Left(tn);\n                acc_mut = SetTreeModule_diffAux(comparer, SetTreeNode$1__get_Right(tn), SetTreeModule_remove(comparer, SetTreeLeaf$1__get_Key(tn), acc));\n                continue SetTreeModule_diffAux;\n            }\n            else {\n                return SetTreeModule_remove(comparer, SetTreeLeaf$1__get_Key(t2), acc);\n            }\n        }\n        else {\n            return acc;\n        }\n        break;\n    }\n}\nexport function SetTreeModule_diff(comparer, a, b) {\n    return SetTreeModule_diffAux(comparer, b, a);\n}\nexport function SetTreeModule_union(comparer, t1, t2) {\n    if (t1 != null) {\n        const t1$0027 = value_3(t1);\n        if (t2 != null) {\n            const t2$0027 = value_3(t2);\n            if (t1$0027 instanceof SetTreeNode$1) {\n                const t1n = t1$0027;\n                if (t2$0027 instanceof SetTreeNode$1) {\n                    const t2n = t2$0027;\n                    if (SetTreeNode$1__get_Height(t1n) > SetTreeNode$1__get_Height(t2n)) {\n                        const patternInput = SetTreeModule_split(comparer, SetTreeLeaf$1__get_Key(t1n), t2);\n                        return SetTreeModule_balance(comparer, SetTreeModule_union(comparer, SetTreeNode$1__get_Left(t1n), patternInput[0]), SetTreeLeaf$1__get_Key(t1n), SetTreeModule_union(comparer, SetTreeNode$1__get_Right(t1n), patternInput[2]));\n                    }\n                    else {\n                        const patternInput_1 = SetTreeModule_split(comparer, SetTreeLeaf$1__get_Key(t2n), t1);\n                        return SetTreeModule_balance(comparer, SetTreeModule_union(comparer, SetTreeNode$1__get_Left(t2n), patternInput_1[0]), SetTreeLeaf$1__get_Key(t2n), SetTreeModule_union(comparer, SetTreeNode$1__get_Right(t2n), patternInput_1[2]));\n                    }\n                }\n                else {\n                    return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2$0027), t1);\n                }\n            }\n            else {\n                return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t1$0027), t2);\n            }\n        }\n        else {\n            return t1;\n        }\n    }\n    else {\n        return t2;\n    }\n}\nexport function SetTreeModule_intersectionAux(comparer_mut, b_mut, t_mut, acc_mut) {\n    SetTreeModule_intersectionAux: while (true) {\n        const comparer = comparer_mut, b = b_mut, t = t_mut, acc = acc_mut;\n        if (t != null) {\n            const t2 = value_3(t);\n            if (t2 instanceof SetTreeNode$1) {\n                const tn = t2;\n                const acc_1 = SetTreeModule_intersectionAux(comparer, b, SetTreeNode$1__get_Right(tn), acc);\n                const acc_2 = SetTreeModule_mem(comparer, SetTreeLeaf$1__get_Key(tn), b) ? SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(tn), acc_1) : acc_1;\n                comparer_mut = comparer;\n                b_mut = b;\n                t_mut = SetTreeNode$1__get_Left(tn);\n                acc_mut = acc_2;\n                continue SetTreeModule_intersectionAux;\n            }\n            else if (SetTreeModule_mem(comparer, SetTreeLeaf$1__get_Key(t2), b)) {\n                return SetTreeModule_add(comparer, SetTreeLeaf$1__get_Key(t2), acc);\n            }\n            else {\n                return acc;\n            }\n        }\n        else {\n            return acc;\n        }\n        break;\n    }\n}\nexport function SetTreeModule_intersection(comparer, a, b) {\n    return SetTreeModule_intersectionAux(comparer, b, a, SetTreeModule_empty());\n}\nexport function SetTreeModule_partition1(comparer, f, k, acc1, acc2) {\n    if (f(k)) {\n        return [SetTreeModule_add(comparer, k, acc1), acc2];\n    }\n    else {\n        return [acc1, SetTreeModule_add(comparer, k, acc2)];\n    }\n}\nexport function SetTreeModule_partitionAux(comparer_mut, f_mut, t_mut, acc__mut, acc__1_mut) {\n    SetTreeModule_partitionAux: while (true) {\n        const comparer = comparer_mut, f = f_mut, t = t_mut, acc_ = acc__mut, acc__1 = acc__1_mut;\n        const acc = [acc_, acc__1];\n        if (t != null) {\n            const t2 = value_3(t);\n            if (t2 instanceof SetTreeNode$1) {\n                const tn = t2;\n                const acc_1 = SetTreeModule_partitionAux(comparer, f, SetTreeNode$1__get_Right(tn), acc[0], acc[1]);\n                const acc_4 = SetTreeModule_partition1(comparer, f, SetTreeLeaf$1__get_Key(tn), acc_1[0], acc_1[1]);\n                comparer_mut = comparer;\n                f_mut = f;\n                t_mut = SetTreeNode$1__get_Left(tn);\n                acc__mut = acc_4[0];\n                acc__1_mut = acc_4[1];\n                continue SetTreeModule_partitionAux;\n            }\n            else {\n                return SetTreeModule_partition1(comparer, f, SetTreeLeaf$1__get_Key(t2), acc[0], acc[1]);\n            }\n        }\n        else {\n            return acc;\n        }\n        break;\n    }\n}\nexport function SetTreeModule_partition(comparer, f, s) {\n    return SetTreeModule_partitionAux(comparer, f, s, SetTreeModule_empty(), SetTreeModule_empty());\n}\nexport function SetTreeModule_minimumElementAux(t_mut, n_mut) {\n    SetTreeModule_minimumElementAux: while (true) {\n        const t = t_mut, n = n_mut;\n        if (t != null) {\n            const t2 = value_3(t);\n            if (t2 instanceof SetTreeNode$1) {\n                const tn = t2;\n                t_mut = SetTreeNode$1__get_Left(tn);\n                n_mut = SetTreeLeaf$1__get_Key(tn);\n                continue SetTreeModule_minimumElementAux;\n            }\n            else {\n                return SetTreeLeaf$1__get_Key(t2);\n            }\n        }\n        else {\n            return n;\n        }\n        break;\n    }\n}\nexport function SetTreeModule_minimumElementOpt(t) {\n    if (t != null) {\n        const t2 = value_3(t);\n        if (t2 instanceof SetTreeNode$1) {\n            const tn = t2;\n            return some(SetTreeModule_minimumElementAux(SetTreeNode$1__get_Left(tn), SetTreeLeaf$1__get_Key(tn)));\n        }\n        else {\n            return some(SetTreeLeaf$1__get_Key(t2));\n        }\n    }\n    else {\n        return void 0;\n    }\n}\nexport function SetTreeModule_maximumElementAux(t_mut, n_mut) {\n    SetTreeModule_maximumElementAux: while (true) {\n        const t = t_mut, n = n_mut;\n        if (t != null) {\n            const t2 = value_3(t);\n            if (t2 instanceof SetTreeNode$1) {\n                const tn = t2;\n                t_mut = SetTreeNode$1__get_Right(tn);\n                n_mut = SetTreeLeaf$1__get_Key(tn);\n                continue SetTreeModule_maximumElementAux;\n            }\n            else {\n                return SetTreeLeaf$1__get_Key(t2);\n            }\n        }\n        else {\n            return n;\n        }\n        break;\n    }\n}\nexport function SetTreeModule_maximumElementOpt(t) {\n    if (t != null) {\n        const t2 = value_3(t);\n        if (t2 instanceof SetTreeNode$1) {\n            const tn = t2;\n            return some(SetTreeModule_maximumElementAux(SetTreeNode$1__get_Right(tn), SetTreeLeaf$1__get_Key(tn)));\n        }\n        else {\n            return some(SetTreeLeaf$1__get_Key(t2));\n        }\n    }\n    else {\n        return void 0;\n    }\n}\nexport function SetTreeModule_minimumElement(s) {\n    const matchValue = SetTreeModule_minimumElementOpt(s);\n    if (matchValue == null) {\n        throw new Error(\"Set contains no elements\");\n    }\n    else {\n        return value_3(matchValue);\n    }\n}\nexport function SetTreeModule_maximumElement(s) {\n    const matchValue = SetTreeModule_maximumElementOpt(s);\n    if (matchValue == null) {\n        throw new Error(\"Set contains no elements\");\n    }\n    else {\n        return value_3(matchValue);\n    }\n}\nexport class SetTreeModule_SetIterator$1 extends Record {\n    constructor(stack, started) {\n        super();\n        this.stack = stack;\n        this.started = started;\n    }\n}\nexport function SetTreeModule_SetIterator$1_$reflection(gen0) {\n    return record_type(\"Set.SetTreeModule.SetIterator`1\", [gen0], SetTreeModule_SetIterator$1, () => [[\"stack\", list_type(option_type(SetTreeLeaf$1_$reflection(gen0)))], [\"started\", bool_type]]);\n}\nexport function SetTreeModule_collapseLHS(stack_mut) {\n    SetTreeModule_collapseLHS: while (true) {\n        const stack = stack_mut;\n        if (!isEmpty_1(stack)) {\n            const x = head(stack);\n            const rest = tail(stack);\n            if (x != null) {\n                const x2 = value_3(x);\n                if (x2 instanceof SetTreeNode$1) {\n                    const xn = x2;\n                    stack_mut = ofArrayWithTail([SetTreeNode$1__get_Left(xn), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(xn)), SetTreeNode$1__get_Right(xn)], rest);\n                    continue SetTreeModule_collapseLHS;\n                }\n                else {\n                    return stack;\n                }\n            }\n            else {\n                stack_mut = rest;\n                continue SetTreeModule_collapseLHS;\n            }\n        }\n        else {\n            return empty_1();\n        }\n        break;\n    }\n}\nexport function SetTreeModule_mkIterator(s) {\n    return new SetTreeModule_SetIterator$1(SetTreeModule_collapseLHS(singleton_1(s)), false);\n}\nexport function SetTreeModule_notStarted() {\n    throw new Error(\"Enumeration not started\");\n}\nexport function SetTreeModule_alreadyFinished() {\n    throw new Error(\"Enumeration already started\");\n}\nexport function SetTreeModule_current(i) {\n    if (i.started) {\n        const matchValue = i.stack;\n        if (isEmpty_1(matchValue)) {\n            return SetTreeModule_alreadyFinished();\n        }\n        else if (head(matchValue) != null) {\n            const t = value_3(head(matchValue));\n            return SetTreeLeaf$1__get_Key(t);\n        }\n        else {\n            throw new Error(\"Please report error: Set iterator, unexpected stack for current\");\n        }\n    }\n    else {\n        return SetTreeModule_notStarted();\n    }\n}\nexport function SetTreeModule_moveNext(i) {\n    if (i.started) {\n        const matchValue = i.stack;\n        if (!isEmpty_1(matchValue)) {\n            if (head(matchValue) != null) {\n                const t = value_3(head(matchValue));\n                if (t instanceof SetTreeNode$1) {\n                    throw new Error(\"Please report error: Set iterator, unexpected stack for moveNext\");\n                }\n                else {\n                    i.stack = SetTreeModule_collapseLHS(tail(matchValue));\n                    return !isEmpty_1(i.stack);\n                }\n            }\n            else {\n                throw new Error(\"Please report error: Set iterator, unexpected stack for moveNext\");\n            }\n        }\n        else {\n            return false;\n        }\n    }\n    else {\n        i.started = true;\n        return !isEmpty_1(i.stack);\n    }\n}\nexport function SetTreeModule_mkIEnumerator(s) {\n    let i = SetTreeModule_mkIterator(s);\n    return {\n        \"System.Collections.Generic.IEnumerator`1.get_Current\"() {\n            return SetTreeModule_current(i);\n        },\n        \"System.Collections.IEnumerator.get_Current\"() {\n            return SetTreeModule_current(i);\n        },\n        \"System.Collections.IEnumerator.MoveNext\"() {\n            return SetTreeModule_moveNext(i);\n        },\n        \"System.Collections.IEnumerator.Reset\"() {\n            i = SetTreeModule_mkIterator(s);\n        },\n        Dispose() {\n        },\n    };\n}\n/**\n * Set comparison.  Note this can be expensive.\n */\nexport function SetTreeModule_compareStacks(comparer_mut, l1_mut, l2_mut) {\n    SetTreeModule_compareStacks: while (true) {\n        const comparer = comparer_mut, l1 = l1_mut, l2 = l2_mut;\n        if (!isEmpty_1(l1)) {\n            if (!isEmpty_1(l2)) {\n                if (head(l2) != null) {\n                    if (head(l1) != null) {\n                        const x1_3 = value_3(head(l1));\n                        const x2_3 = value_3(head(l2));\n                        if (x1_3 instanceof SetTreeNode$1) {\n                            const x1n_2 = x1_3;\n                            if (SetTreeNode$1__get_Left(x1n_2) == null) {\n                                if (x2_3 instanceof SetTreeNode$1) {\n                                    const x2n_2 = x2_3;\n                                    if (SetTreeNode$1__get_Left(x2n_2) == null) {\n                                        const c = comparer.Compare(SetTreeLeaf$1__get_Key(x1n_2), SetTreeLeaf$1__get_Key(x2n_2)) | 0;\n                                        if (c !== 0) {\n                                            return c | 0;\n                                        }\n                                        else {\n                                            comparer_mut = comparer;\n                                            l1_mut = cons(SetTreeNode$1__get_Right(x1n_2), tail(l1));\n                                            l2_mut = cons(SetTreeNode$1__get_Right(x2n_2), tail(l2));\n                                            continue SetTreeModule_compareStacks;\n                                        }\n                                    }\n                                    else {\n                                        let matchResult, t1_6, x1_4, t2_6, x2_4;\n                                        if (!isEmpty_1(l1)) {\n                                            if (head(l1) != null) {\n                                                matchResult = 0;\n                                                t1_6 = tail(l1);\n                                                x1_4 = value_3(head(l1));\n                                            }\n                                            else if (!isEmpty_1(l2)) {\n                                                if (head(l2) != null) {\n                                                    matchResult = 1;\n                                                    t2_6 = tail(l2);\n                                                    x2_4 = value_3(head(l2));\n                                                }\n                                                else {\n                                                    matchResult = 2;\n                                                }\n                                            }\n                                            else {\n                                                matchResult = 2;\n                                            }\n                                        }\n                                        else if (!isEmpty_1(l2)) {\n                                            if (head(l2) != null) {\n                                                matchResult = 1;\n                                                t2_6 = tail(l2);\n                                                x2_4 = value_3(head(l2));\n                                            }\n                                            else {\n                                                matchResult = 2;\n                                            }\n                                        }\n                                        else {\n                                            matchResult = 2;\n                                        }\n                                        switch (matchResult) {\n                                            case 0:\n                                                if (x1_4 instanceof SetTreeNode$1) {\n                                                    const x1n_3 = x1_4;\n                                                    comparer_mut = comparer;\n                                                    l1_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x1n_3), SetTreeNode$1_$ctor_5F465FC9(SetTreeLeaf$1__get_Key(x1n_3), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1n_3), 0)], t1_6);\n                                                    l2_mut = l2;\n                                                    continue SetTreeModule_compareStacks;\n                                                }\n                                                else {\n                                                    comparer_mut = comparer;\n                                                    l1_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_4))], t1_6);\n                                                    l2_mut = l2;\n                                                    continue SetTreeModule_compareStacks;\n                                                }\n                                            case 1:\n                                                if (x2_4 instanceof SetTreeNode$1) {\n                                                    const x2n_3 = x2_4;\n                                                    comparer_mut = comparer;\n                                                    l1_mut = l1;\n                                                    l2_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2n_3), SetTreeNode$1_$ctor_5F465FC9(SetTreeLeaf$1__get_Key(x2n_3), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2n_3), 0)], t2_6);\n                                                    continue SetTreeModule_compareStacks;\n                                                }\n                                                else {\n                                                    comparer_mut = comparer;\n                                                    l1_mut = l1;\n                                                    l2_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_4))], t2_6);\n                                                    continue SetTreeModule_compareStacks;\n                                                }\n                                            default:\n                                                throw new Error(\"unexpected state in SetTree.compareStacks\");\n                                        }\n                                    }\n                                }\n                                else {\n                                    const c_1 = comparer.Compare(SetTreeLeaf$1__get_Key(x1n_2), SetTreeLeaf$1__get_Key(x2_3)) | 0;\n                                    if (c_1 !== 0) {\n                                        return c_1 | 0;\n                                    }\n                                    else {\n                                        comparer_mut = comparer;\n                                        l1_mut = cons(SetTreeNode$1__get_Right(x1n_2), tail(l1));\n                                        l2_mut = cons(SetTreeModule_empty(), tail(l2));\n                                        continue SetTreeModule_compareStacks;\n                                    }\n                                }\n                            }\n                            else {\n                                let matchResult_1, t1_7, x1_5, t2_7, x2_5;\n                                if (!isEmpty_1(l1)) {\n                                    if (head(l1) != null) {\n                                        matchResult_1 = 0;\n                                        t1_7 = tail(l1);\n                                        x1_5 = value_3(head(l1));\n                                    }\n                                    else if (!isEmpty_1(l2)) {\n                                        if (head(l2) != null) {\n                                            matchResult_1 = 1;\n                                            t2_7 = tail(l2);\n                                            x2_5 = value_3(head(l2));\n                                        }\n                                        else {\n                                            matchResult_1 = 2;\n                                        }\n                                    }\n                                    else {\n                                        matchResult_1 = 2;\n                                    }\n                                }\n                                else if (!isEmpty_1(l2)) {\n                                    if (head(l2) != null) {\n                                        matchResult_1 = 1;\n                                        t2_7 = tail(l2);\n                                        x2_5 = value_3(head(l2));\n                                    }\n                                    else {\n                                        matchResult_1 = 2;\n                                    }\n                                }\n                                else {\n                                    matchResult_1 = 2;\n                                }\n                                switch (matchResult_1) {\n                                    case 0:\n                                        if (x1_5 instanceof SetTreeNode$1) {\n                                            const x1n_4 = x1_5;\n                                            comparer_mut = comparer;\n                                            l1_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x1n_4), SetTreeNode$1_$ctor_5F465FC9(SetTreeLeaf$1__get_Key(x1n_4), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1n_4), 0)], t1_7);\n                                            l2_mut = l2;\n                                            continue SetTreeModule_compareStacks;\n                                        }\n                                        else {\n                                            comparer_mut = comparer;\n                                            l1_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_5))], t1_7);\n                                            l2_mut = l2;\n                                            continue SetTreeModule_compareStacks;\n                                        }\n                                    case 1:\n                                        if (x2_5 instanceof SetTreeNode$1) {\n                                            const x2n_4 = x2_5;\n                                            comparer_mut = comparer;\n                                            l1_mut = l1;\n                                            l2_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2n_4), SetTreeNode$1_$ctor_5F465FC9(SetTreeLeaf$1__get_Key(x2n_4), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2n_4), 0)], t2_7);\n                                            continue SetTreeModule_compareStacks;\n                                        }\n                                        else {\n                                            comparer_mut = comparer;\n                                            l1_mut = l1;\n                                            l2_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_5))], t2_7);\n                                            continue SetTreeModule_compareStacks;\n                                        }\n                                    default:\n                                        throw new Error(\"unexpected state in SetTree.compareStacks\");\n                                }\n                            }\n                        }\n                        else if (x2_3 instanceof SetTreeNode$1) {\n                            const x2n_5 = x2_3;\n                            if (SetTreeNode$1__get_Left(x2n_5) == null) {\n                                const c_2 = comparer.Compare(SetTreeLeaf$1__get_Key(x1_3), SetTreeLeaf$1__get_Key(x2n_5)) | 0;\n                                if (c_2 !== 0) {\n                                    return c_2 | 0;\n                                }\n                                else {\n                                    comparer_mut = comparer;\n                                    l1_mut = cons(SetTreeModule_empty(), tail(l1));\n                                    l2_mut = cons(SetTreeNode$1__get_Right(x2n_5), tail(l2));\n                                    continue SetTreeModule_compareStacks;\n                                }\n                            }\n                            else {\n                                let matchResult_2, t1_8, x1_6, t2_8, x2_6;\n                                if (!isEmpty_1(l1)) {\n                                    if (head(l1) != null) {\n                                        matchResult_2 = 0;\n                                        t1_8 = tail(l1);\n                                        x1_6 = value_3(head(l1));\n                                    }\n                                    else if (!isEmpty_1(l2)) {\n                                        if (head(l2) != null) {\n                                            matchResult_2 = 1;\n                                            t2_8 = tail(l2);\n                                            x2_6 = value_3(head(l2));\n                                        }\n                                        else {\n                                            matchResult_2 = 2;\n                                        }\n                                    }\n                                    else {\n                                        matchResult_2 = 2;\n                                    }\n                                }\n                                else if (!isEmpty_1(l2)) {\n                                    if (head(l2) != null) {\n                                        matchResult_2 = 1;\n                                        t2_8 = tail(l2);\n                                        x2_6 = value_3(head(l2));\n                                    }\n                                    else {\n                                        matchResult_2 = 2;\n                                    }\n                                }\n                                else {\n                                    matchResult_2 = 2;\n                                }\n                                switch (matchResult_2) {\n                                    case 0:\n                                        if (x1_6 instanceof SetTreeNode$1) {\n                                            const x1n_5 = x1_6;\n                                            comparer_mut = comparer;\n                                            l1_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x1n_5), SetTreeNode$1_$ctor_5F465FC9(SetTreeLeaf$1__get_Key(x1n_5), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1n_5), 0)], t1_8);\n                                            l2_mut = l2;\n                                            continue SetTreeModule_compareStacks;\n                                        }\n                                        else {\n                                            comparer_mut = comparer;\n                                            l1_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_6))], t1_8);\n                                            l2_mut = l2;\n                                            continue SetTreeModule_compareStacks;\n                                        }\n                                    case 1:\n                                        if (x2_6 instanceof SetTreeNode$1) {\n                                            const x2n_6 = x2_6;\n                                            comparer_mut = comparer;\n                                            l1_mut = l1;\n                                            l2_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2n_6), SetTreeNode$1_$ctor_5F465FC9(SetTreeLeaf$1__get_Key(x2n_6), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2n_6), 0)], t2_8);\n                                            continue SetTreeModule_compareStacks;\n                                        }\n                                        else {\n                                            comparer_mut = comparer;\n                                            l1_mut = l1;\n                                            l2_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_6))], t2_8);\n                                            continue SetTreeModule_compareStacks;\n                                        }\n                                    default:\n                                        throw new Error(\"unexpected state in SetTree.compareStacks\");\n                                }\n                            }\n                        }\n                        else {\n                            const c_3 = comparer.Compare(SetTreeLeaf$1__get_Key(x1_3), SetTreeLeaf$1__get_Key(x2_3)) | 0;\n                            if (c_3 !== 0) {\n                                return c_3 | 0;\n                            }\n                            else {\n                                comparer_mut = comparer;\n                                l1_mut = tail(l1);\n                                l2_mut = tail(l2);\n                                continue SetTreeModule_compareStacks;\n                            }\n                        }\n                    }\n                    else {\n                        const x2 = value_3(head(l2));\n                        let matchResult_3, t1_2, x1, t2_2, x2_1;\n                        if (!isEmpty_1(l1)) {\n                            if (head(l1) != null) {\n                                matchResult_3 = 0;\n                                t1_2 = tail(l1);\n                                x1 = value_3(head(l1));\n                            }\n                            else if (!isEmpty_1(l2)) {\n                                if (head(l2) != null) {\n                                    matchResult_3 = 1;\n                                    t2_2 = tail(l2);\n                                    x2_1 = value_3(head(l2));\n                                }\n                                else {\n                                    matchResult_3 = 2;\n                                }\n                            }\n                            else {\n                                matchResult_3 = 2;\n                            }\n                        }\n                        else if (!isEmpty_1(l2)) {\n                            if (head(l2) != null) {\n                                matchResult_3 = 1;\n                                t2_2 = tail(l2);\n                                x2_1 = value_3(head(l2));\n                            }\n                            else {\n                                matchResult_3 = 2;\n                            }\n                        }\n                        else {\n                            matchResult_3 = 2;\n                        }\n                        switch (matchResult_3) {\n                            case 0:\n                                if (x1 instanceof SetTreeNode$1) {\n                                    const x1n = x1;\n                                    comparer_mut = comparer;\n                                    l1_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x1n), SetTreeNode$1_$ctor_5F465FC9(SetTreeLeaf$1__get_Key(x1n), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1n), 0)], t1_2);\n                                    l2_mut = l2;\n                                    continue SetTreeModule_compareStacks;\n                                }\n                                else {\n                                    comparer_mut = comparer;\n                                    l1_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1))], t1_2);\n                                    l2_mut = l2;\n                                    continue SetTreeModule_compareStacks;\n                                }\n                            case 1:\n                                if (x2_1 instanceof SetTreeNode$1) {\n                                    const x2n = x2_1;\n                                    comparer_mut = comparer;\n                                    l1_mut = l1;\n                                    l2_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2n), SetTreeNode$1_$ctor_5F465FC9(SetTreeLeaf$1__get_Key(x2n), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2n), 0)], t2_2);\n                                    continue SetTreeModule_compareStacks;\n                                }\n                                else {\n                                    comparer_mut = comparer;\n                                    l1_mut = l1;\n                                    l2_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_1))], t2_2);\n                                    continue SetTreeModule_compareStacks;\n                                }\n                            default:\n                                throw new Error(\"unexpected state in SetTree.compareStacks\");\n                        }\n                    }\n                }\n                else if (head(l1) != null) {\n                    const x1_1 = value_3(head(l1));\n                    let matchResult_4, t1_4, x1_2, t2_4, x2_2;\n                    if (!isEmpty_1(l1)) {\n                        if (head(l1) != null) {\n                            matchResult_4 = 0;\n                            t1_4 = tail(l1);\n                            x1_2 = value_3(head(l1));\n                        }\n                        else if (!isEmpty_1(l2)) {\n                            if (head(l2) != null) {\n                                matchResult_4 = 1;\n                                t2_4 = tail(l2);\n                                x2_2 = value_3(head(l2));\n                            }\n                            else {\n                                matchResult_4 = 2;\n                            }\n                        }\n                        else {\n                            matchResult_4 = 2;\n                        }\n                    }\n                    else if (!isEmpty_1(l2)) {\n                        if (head(l2) != null) {\n                            matchResult_4 = 1;\n                            t2_4 = tail(l2);\n                            x2_2 = value_3(head(l2));\n                        }\n                        else {\n                            matchResult_4 = 2;\n                        }\n                    }\n                    else {\n                        matchResult_4 = 2;\n                    }\n                    switch (matchResult_4) {\n                        case 0:\n                            if (x1_2 instanceof SetTreeNode$1) {\n                                const x1n_1 = x1_2;\n                                comparer_mut = comparer;\n                                l1_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x1n_1), SetTreeNode$1_$ctor_5F465FC9(SetTreeLeaf$1__get_Key(x1n_1), SetTreeModule_empty(), SetTreeNode$1__get_Right(x1n_1), 0)], t1_4);\n                                l2_mut = l2;\n                                continue SetTreeModule_compareStacks;\n                            }\n                            else {\n                                comparer_mut = comparer;\n                                l1_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x1_2))], t1_4);\n                                l2_mut = l2;\n                                continue SetTreeModule_compareStacks;\n                            }\n                        case 1:\n                            if (x2_2 instanceof SetTreeNode$1) {\n                                const x2n_1 = x2_2;\n                                comparer_mut = comparer;\n                                l1_mut = l1;\n                                l2_mut = ofArrayWithTail([SetTreeNode$1__get_Left(x2n_1), SetTreeNode$1_$ctor_5F465FC9(SetTreeLeaf$1__get_Key(x2n_1), SetTreeModule_empty(), SetTreeNode$1__get_Right(x2n_1), 0)], t2_4);\n                                continue SetTreeModule_compareStacks;\n                            }\n                            else {\n                                comparer_mut = comparer;\n                                l1_mut = l1;\n                                l2_mut = ofArrayWithTail([SetTreeModule_empty(), SetTreeLeaf$1_$ctor_2B595(SetTreeLeaf$1__get_Key(x2_2))], t2_4);\n                                continue SetTreeModule_compareStacks;\n                            }\n                        default:\n                            throw new Error(\"unexpected state in SetTree.compareStacks\");\n                    }\n                }\n                else {\n                    comparer_mut = comparer;\n                    l1_mut = tail(l1);\n                    l2_mut = tail(l2);\n                    continue SetTreeModule_compareStacks;\n                }\n            }\n            else {\n                return 1;\n            }\n        }\n        else if (isEmpty_1(l2)) {\n            return 0;\n        }\n        else {\n            return -1;\n        }\n        break;\n    }\n}\nexport function SetTreeModule_compare(comparer, t1, t2) {\n    if (t1 == null) {\n        if (t2 == null) {\n            return 0;\n        }\n        else {\n            return -1;\n        }\n    }\n    else if (t2 == null) {\n        return 1;\n    }\n    else {\n        return SetTreeModule_compareStacks(comparer, singleton_1(t1), singleton_1(t2)) | 0;\n    }\n}\nexport function SetTreeModule_choose(s) {\n    return SetTreeModule_minimumElement(s);\n}\nexport function SetTreeModule_toList(t) {\n    const loop = (t$0027_mut, acc_mut) => {\n        loop: while (true) {\n            const t$0027 = t$0027_mut, acc = acc_mut;\n            if (t$0027 != null) {\n                const t2 = value_3(t$0027);\n                if (t2 instanceof SetTreeNode$1) {\n                    const tn = t2;\n                    t$0027_mut = SetTreeNode$1__get_Left(tn);\n                    acc_mut = cons(SetTreeLeaf$1__get_Key(tn), loop(SetTreeNode$1__get_Right(tn), acc));\n                    continue loop;\n                }\n                else {\n                    return cons(SetTreeLeaf$1__get_Key(t2), acc);\n                }\n            }\n            else {\n                return acc;\n            }\n            break;\n        }\n    };\n    return loop(t, empty_1());\n}\nexport function SetTreeModule_copyToArray(s, arr, i) {\n    let j = i;\n    SetTreeModule_iter((x) => {\n        arr[j] = x;\n        j = ((j + 1) | 0);\n    }, s);\n}\nexport function SetTreeModule_toArray(s) {\n    const n = SetTreeModule_count(s) | 0;\n    const res = fill(new Array(n), 0, n, null);\n    SetTreeModule_copyToArray(s, res, 0);\n    return res;\n}\nexport function SetTreeModule_mkFromEnumerator(comparer_mut, acc_mut, e_mut) {\n    SetTreeModule_mkFromEnumerator: while (true) {\n        const comparer = comparer_mut, acc = acc_mut, e = e_mut;\n        if (e[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            comparer_mut = comparer;\n            acc_mut = SetTreeModule_add(comparer, e[\"System.Collections.Generic.IEnumerator`1.get_Current\"](), acc);\n            e_mut = e;\n            continue SetTreeModule_mkFromEnumerator;\n        }\n        else {\n            return acc;\n        }\n        break;\n    }\n}\nexport function SetTreeModule_ofArray(comparer, l) {\n    return fold_1((acc, k) => SetTreeModule_add(comparer, k, acc), SetTreeModule_empty(), l);\n}\nexport function SetTreeModule_ofList(comparer, l) {\n    return fold_2((acc, k) => SetTreeModule_add(comparer, k, acc), SetTreeModule_empty(), l);\n}\nexport function SetTreeModule_ofSeq(comparer, c) {\n    if (isArrayLike(c)) {\n        return SetTreeModule_ofArray(comparer, c);\n    }\n    else if (c instanceof FSharpList) {\n        return SetTreeModule_ofList(comparer, c);\n    }\n    else {\n        const ie = getEnumerator(c);\n        try {\n            return SetTreeModule_mkFromEnumerator(comparer, SetTreeModule_empty(), ie);\n        }\n        finally {\n            disposeSafe(ie);\n        }\n    }\n}\nexport class FSharpSet {\n    constructor(comparer, tree) {\n        this.comparer = comparer;\n        this.tree = tree;\n    }\n    GetHashCode() {\n        const this$ = this;\n        return FSharpSet__ComputeHashCode(this$) | 0;\n    }\n    Equals(that) {\n        let that_1;\n        const this$ = this;\n        return (that instanceof FSharpSet) && ((that_1 = that, SetTreeModule_compare(FSharpSet__get_Comparer(this$), FSharpSet__get_Tree(this$), FSharpSet__get_Tree(that_1)) === 0));\n    }\n    toString() {\n        const this$ = this;\n        return (\"set [\" + join(\"; \", map_1((x) => {\n            let copyOfStruct = x;\n            return toString(copyOfStruct);\n        }, this$))) + \"]\";\n    }\n    get [Symbol.toStringTag]() {\n        return \"FSharpSet\";\n    }\n    toJSON() {\n        const this$ = this;\n        return Array.from(this$);\n    }\n    CompareTo(that) {\n        const s = this;\n        return SetTreeModule_compare(FSharpSet__get_Comparer(s), FSharpSet__get_Tree(s), FSharpSet__get_Tree(that)) | 0;\n    }\n    \"System.Collections.Generic.ICollection`1.Add2B595\"(x) {\n        throw new Error(\"ReadOnlyCollection\");\n    }\n    \"System.Collections.Generic.ICollection`1.Clear\"() {\n        throw new Error(\"ReadOnlyCollection\");\n    }\n    \"System.Collections.Generic.ICollection`1.Remove2B595\"(x) {\n        throw new Error(\"ReadOnlyCollection\");\n    }\n    \"System.Collections.Generic.ICollection`1.Contains2B595\"(x) {\n        const s = this;\n        return SetTreeModule_mem(FSharpSet__get_Comparer(s), x, FSharpSet__get_Tree(s));\n    }\n    \"System.Collections.Generic.ICollection`1.CopyToZ3B4C077E\"(arr, i) {\n        const s = this;\n        SetTreeModule_copyToArray(FSharpSet__get_Tree(s), arr, i);\n    }\n    \"System.Collections.Generic.ICollection`1.get_IsReadOnly\"() {\n        return true;\n    }\n    \"System.Collections.Generic.ICollection`1.get_Count\"() {\n        const s = this;\n        return FSharpSet__get_Count(s) | 0;\n    }\n    \"System.Collections.Generic.IReadOnlyCollection`1.get_Count\"() {\n        const s = this;\n        return FSharpSet__get_Count(s) | 0;\n    }\n    GetEnumerator() {\n        const s = this;\n        return SetTreeModule_mkIEnumerator(FSharpSet__get_Tree(s));\n    }\n    [Symbol.iterator]() {\n        return toIterator(getEnumerator(this));\n    }\n    \"System.Collections.IEnumerable.GetEnumerator\"() {\n        const s = this;\n        return SetTreeModule_mkIEnumerator(FSharpSet__get_Tree(s));\n    }\n    get size() {\n        const s = this;\n        return FSharpSet__get_Count(s) | 0;\n    }\n    add(k) {\n        const s = this;\n        throw new Error(\"Set cannot be mutated\");\n        return s;\n    }\n    clear() {\n        throw new Error(\"Set cannot be mutated\");\n    }\n    delete(k) {\n        throw new Error(\"Set cannot be mutated\");\n        return false;\n    }\n    has(k) {\n        const s = this;\n        return FSharpSet__Contains(s, k);\n    }\n    keys() {\n        const s = this;\n        return map_1((x) => x, s);\n    }\n    values() {\n        const s = this;\n        return map_1((x) => x, s);\n    }\n    entries() {\n        const s = this;\n        return map_1((v) => [v, v], s);\n    }\n    forEach(f, thisArg) {\n        const s = this;\n        iterate_1((x) => {\n            f(x, x, s);\n        }, s);\n    }\n}\nexport function FSharpSet_$reflection(gen0) {\n    return class_type(\"Set.FSharpSet\", [gen0], FSharpSet);\n}\nexport function FSharpSet_$ctor(comparer, tree) {\n    return new FSharpSet(comparer, tree);\n}\nexport function FSharpSet__get_Comparer(set$) {\n    return set$.comparer;\n}\nexport function FSharpSet__get_Tree(set$) {\n    return set$.tree;\n}\nexport function FSharpSet_Empty(comparer) {\n    return FSharpSet_$ctor(comparer, SetTreeModule_empty());\n}\nexport function FSharpSet__Add(s, value) {\n    return FSharpSet_$ctor(FSharpSet__get_Comparer(s), SetTreeModule_add(FSharpSet__get_Comparer(s), value, FSharpSet__get_Tree(s)));\n}\nexport function FSharpSet__Remove(s, value) {\n    return FSharpSet_$ctor(FSharpSet__get_Comparer(s), SetTreeModule_remove(FSharpSet__get_Comparer(s), value, FSharpSet__get_Tree(s)));\n}\nexport function FSharpSet__get_Count(s) {\n    return SetTreeModule_count(FSharpSet__get_Tree(s));\n}\nexport function FSharpSet__Contains(s, value) {\n    return SetTreeModule_mem(FSharpSet__get_Comparer(s), value, FSharpSet__get_Tree(s));\n}\nexport function FSharpSet__Iterate(s, x) {\n    SetTreeModule_iter(x, FSharpSet__get_Tree(s));\n}\nexport function FSharpSet__Fold(s, f, z) {\n    const f_1 = f;\n    return SetTreeModule_fold((x, z_1) => f_1(z_1, x), z, FSharpSet__get_Tree(s));\n}\nexport function FSharpSet__get_IsEmpty(s) {\n    return FSharpSet__get_Tree(s) == null;\n}\nexport function FSharpSet__Partition(s, f) {\n    if (FSharpSet__get_Tree(s) == null) {\n        return [s, s];\n    }\n    else {\n        const patternInput = SetTreeModule_partition(FSharpSet__get_Comparer(s), f, FSharpSet__get_Tree(s));\n        return [FSharpSet_$ctor(FSharpSet__get_Comparer(s), patternInput[0]), FSharpSet_$ctor(FSharpSet__get_Comparer(s), patternInput[1])];\n    }\n}\nexport function FSharpSet__Filter(s, f) {\n    if (FSharpSet__get_Tree(s) == null) {\n        return s;\n    }\n    else {\n        return FSharpSet_$ctor(FSharpSet__get_Comparer(s), SetTreeModule_filter(FSharpSet__get_Comparer(s), f, FSharpSet__get_Tree(s)));\n    }\n}\nexport function FSharpSet__Map(s, f, comparer) {\n    return FSharpSet_$ctor(comparer, SetTreeModule_fold((acc, k) => SetTreeModule_add(comparer, f(k), acc), SetTreeModule_empty(), FSharpSet__get_Tree(s)));\n}\nexport function FSharpSet__Exists(s, f) {\n    return SetTreeModule_exists(f, FSharpSet__get_Tree(s));\n}\nexport function FSharpSet__ForAll(s, f) {\n    return SetTreeModule_forall(f, FSharpSet__get_Tree(s));\n}\nexport function FSharpSet_op_Subtraction(set1, set2) {\n    if (FSharpSet__get_Tree(set1) == null) {\n        return set1;\n    }\n    else if (FSharpSet__get_Tree(set2) == null) {\n        return set1;\n    }\n    else {\n        return FSharpSet_$ctor(FSharpSet__get_Comparer(set1), SetTreeModule_diff(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2)));\n    }\n}\nexport function FSharpSet_op_Addition(set1, set2) {\n    if (FSharpSet__get_Tree(set2) == null) {\n        return set1;\n    }\n    else if (FSharpSet__get_Tree(set1) == null) {\n        return set2;\n    }\n    else {\n        return FSharpSet_$ctor(FSharpSet__get_Comparer(set1), SetTreeModule_union(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2)));\n    }\n}\nexport function FSharpSet_Intersection(a, b) {\n    if (FSharpSet__get_Tree(b) == null) {\n        return b;\n    }\n    else if (FSharpSet__get_Tree(a) == null) {\n        return a;\n    }\n    else {\n        return FSharpSet_$ctor(FSharpSet__get_Comparer(a), SetTreeModule_intersection(FSharpSet__get_Comparer(a), FSharpSet__get_Tree(a), FSharpSet__get_Tree(b)));\n    }\n}\nexport function FSharpSet_IntersectionMany(sets) {\n    return reduce(FSharpSet_Intersection, sets);\n}\nexport function FSharpSet_Equality(a, b) {\n    return SetTreeModule_compare(FSharpSet__get_Comparer(a), FSharpSet__get_Tree(a), FSharpSet__get_Tree(b)) === 0;\n}\nexport function FSharpSet_Compare(a, b) {\n    return SetTreeModule_compare(FSharpSet__get_Comparer(a), FSharpSet__get_Tree(a), FSharpSet__get_Tree(b));\n}\nexport function FSharpSet__get_Choose(x) {\n    return SetTreeModule_choose(FSharpSet__get_Tree(x));\n}\nexport function FSharpSet__get_MinimumElement(x) {\n    return SetTreeModule_minimumElement(FSharpSet__get_Tree(x));\n}\nexport function FSharpSet__get_MaximumElement(x) {\n    return SetTreeModule_maximumElement(FSharpSet__get_Tree(x));\n}\nexport function FSharpSet__IsSubsetOf(x, otherSet) {\n    return SetTreeModule_subset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(x), FSharpSet__get_Tree(otherSet));\n}\nexport function FSharpSet__IsSupersetOf(x, otherSet) {\n    return SetTreeModule_subset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(otherSet), FSharpSet__get_Tree(x));\n}\nexport function FSharpSet__IsProperSubsetOf(x, otherSet) {\n    return SetTreeModule_properSubset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(x), FSharpSet__get_Tree(otherSet));\n}\nexport function FSharpSet__IsProperSupersetOf(x, otherSet) {\n    return SetTreeModule_properSubset(FSharpSet__get_Comparer(x), FSharpSet__get_Tree(otherSet), FSharpSet__get_Tree(x));\n}\nexport function FSharpSet__ToList(x) {\n    return SetTreeModule_toList(FSharpSet__get_Tree(x));\n}\nexport function FSharpSet__ToArray(x) {\n    return SetTreeModule_toArray(FSharpSet__get_Tree(x));\n}\nexport function FSharpSet__ComputeHashCode(this$) {\n    let res = 0;\n    const enumerator = getEnumerator(this$);\n    try {\n        while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n            const x_1 = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n            res = ((((res << 1) + structuralHash(x_1)) + 631) | 0);\n        }\n    }\n    finally {\n        disposeSafe(enumerator);\n    }\n    return Math.abs(res) | 0;\n}\nexport function isEmpty(set$) {\n    return FSharpSet__get_IsEmpty(set$);\n}\nexport function contains(element, set$) {\n    return FSharpSet__Contains(set$, element);\n}\nexport function add(value, set$) {\n    return FSharpSet__Add(set$, value);\n}\nexport function singleton(value, comparer) {\n    return FSharpSet__Add(FSharpSet_Empty(comparer), value);\n}\nexport function remove(value, set$) {\n    return FSharpSet__Remove(set$, value);\n}\nexport function union(set1, set2) {\n    return FSharpSet_op_Addition(set1, set2);\n}\nexport function unionMany(sets, comparer) {\n    return fold_3(FSharpSet_op_Addition, FSharpSet_Empty(comparer), sets);\n}\nexport function intersect(set1, set2) {\n    return FSharpSet_Intersection(set1, set2);\n}\nexport function intersectMany(sets) {\n    return FSharpSet_IntersectionMany(sets);\n}\nexport function iterate(action, set$) {\n    FSharpSet__Iterate(set$, action);\n}\nexport function empty(comparer) {\n    return FSharpSet_Empty(comparer);\n}\nexport function forAll(predicate, set$) {\n    return FSharpSet__ForAll(set$, predicate);\n}\nexport function exists(predicate, set$) {\n    return FSharpSet__Exists(set$, predicate);\n}\nexport function filter(predicate, set$) {\n    return FSharpSet__Filter(set$, predicate);\n}\nexport function partition(predicate, set$) {\n    return FSharpSet__Partition(set$, predicate);\n}\nexport function fold(folder, state, set$) {\n    return SetTreeModule_fold(folder, state, FSharpSet__get_Tree(set$));\n}\nexport function foldBack(folder, set$, state) {\n    return SetTreeModule_foldBack(folder, FSharpSet__get_Tree(set$), state);\n}\nexport function map(mapping, set$, comparer) {\n    return FSharpSet__Map(set$, mapping, comparer);\n}\nexport function count(set$) {\n    return FSharpSet__get_Count(set$);\n}\nexport function ofList(elements, comparer) {\n    return FSharpSet_$ctor(comparer, SetTreeModule_ofSeq(comparer, elements));\n}\nexport function ofArray(array, comparer) {\n    return FSharpSet_$ctor(comparer, SetTreeModule_ofArray(comparer, array));\n}\nexport function toList(set$) {\n    return FSharpSet__ToList(set$);\n}\nexport function toArray(set$) {\n    return FSharpSet__ToArray(set$);\n}\nexport function toSeq(set$) {\n    return map_1((x) => x, set$);\n}\nexport function ofSeq(elements, comparer) {\n    return FSharpSet_$ctor(comparer, SetTreeModule_ofSeq(comparer, elements));\n}\nexport function difference(set1, set2) {\n    return FSharpSet_op_Subtraction(set1, set2);\n}\nexport function isSubset(set1, set2) {\n    return SetTreeModule_subset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2));\n}\nexport function isSuperset(set1, set2) {\n    return SetTreeModule_subset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set2), FSharpSet__get_Tree(set1));\n}\nexport function isProperSubset(set1, set2) {\n    return SetTreeModule_properSubset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set1), FSharpSet__get_Tree(set2));\n}\nexport function isProperSuperset(set1, set2) {\n    return SetTreeModule_properSubset(FSharpSet__get_Comparer(set1), FSharpSet__get_Tree(set2), FSharpSet__get_Tree(set1));\n}\nexport function minElement(set$) {\n    return FSharpSet__get_MinimumElement(set$);\n}\nexport function maxElement(set$) {\n    return FSharpSet__get_MaximumElement(set$);\n}\nexport function unionWith(s1, s2) {\n    return fold_3((acc, x) => acc.add(x), s1, s2);\n}\nexport function newMutableSetWith(s1, s2) {\n    if (s1 instanceof HashSet) {\n        const s1_1 = s1;\n        return HashSet_$ctor_Z6150332D(s2, HashSet__get_Comparer(s1_1));\n    }\n    else {\n        return new Set(s2);\n    }\n}\nexport function intersectWith(s1, s2) {\n    const s2_1 = newMutableSetWith(s1, s2);\n    iterate_1((x) => {\n        if (!s2_1.has(x)) {\n            s1.delete(x);\n        }\n    }, s1.values());\n}\nexport function exceptWith(s1, s2) {\n    iterate_1((x) => {\n        s1.delete(x);\n    }, s2);\n}\nexport function isSubsetOf(s1, s2) {\n    const s2_1 = newMutableSetWith(s1, s2);\n    return forAll_1((value) => s2_1.has(value), s1.values());\n}\nexport function isSupersetOf(s1, s2) {\n    return forAll_1((value) => s1.has(value), s2);\n}\nexport function isProperSubsetOf(s1, s2) {\n    const s2_1 = newMutableSetWith(s1, s2);\n    if (s2_1.size > s1.size) {\n        return forAll_1((value) => s2_1.has(value), s1.values());\n    }\n    else {\n        return false;\n    }\n}\nexport function isProperSupersetOf(s1, s2) {\n    const s2_1 = cache(s2);\n    if (exists_1((arg) => !s1.has(arg), s2_1)) {\n        return forAll_1((value_2) => s1.has(value_2), s2_1);\n    }\n    else {\n        return false;\n    }\n}\n","import { filter, partition, foldBack, choose, append, iterate, cons, map, concat, empty } from \"../fable-library.4.9.0/List.js\";\nimport { join } from \"../fable-library.4.9.0/String.js\";\nimport { compare, disposeSafe } from \"../fable-library.4.9.0/Util.js\";\nimport { ofList, add, contains, empty as empty_1 } from \"../fable-library.4.9.0/Set.js\";\n\n/**\n * None - no subscriptions, also known as `[]`\n */\nexport function Sub_none() {\n    return empty();\n}\n\n/**\n * Aggregate multiple subscriptions\n */\nexport function Sub_batch(subs) {\n    return concat(subs);\n}\n\n/**\n * When emitting the message, map to another type.\n * To avoid ID conflicts with other components, scope SubIds with a prefix.\n */\nexport function Sub_map(idPrefix, f, sub) {\n    return map((tupledArg) => [cons(idPrefix, tupledArg[0]), (dispatch) => tupledArg[1]((arg) => {\n        dispatch(f(arg));\n    })], sub);\n}\n\nexport function Sub_Internal_SubId_toString(subId) {\n    return join(\"/\", subId);\n}\n\nexport function Sub_Internal_Fx_warnDupe(onError, subId) {\n    const ex = new Error(\"Duplicate SubId\");\n    return onError([\"Duplicate SubId: \" + Sub_Internal_SubId_toString(subId), ex]);\n}\n\nexport function Sub_Internal_Fx_tryStop(onError, subId, sub) {\n    try {\n        disposeSafe(sub);\n    }\n    catch (ex) {\n        onError([\"Error stopping subscription: \" + Sub_Internal_SubId_toString(subId), ex]);\n    }\n}\n\nexport function Sub_Internal_Fx_tryStart(onError, dispatch, subId, start) {\n    try {\n        return [subId, start(dispatch)];\n    }\n    catch (ex) {\n        onError([\"Error starting subscription: \" + Sub_Internal_SubId_toString(subId), ex]);\n        return void 0;\n    }\n}\n\nexport function Sub_Internal_Fx_stop(onError, subs) {\n    iterate((tupledArg) => {\n        Sub_Internal_Fx_tryStop(onError, tupledArg[0], tupledArg[1]);\n    }, subs);\n}\n\nexport function Sub_Internal_Fx_change(onError, dispatch, dupes, toStop, toKeep, toStart) {\n    iterate((subId) => {\n        Sub_Internal_Fx_warnDupe(onError, subId);\n    }, dupes);\n    iterate((tupledArg) => {\n        Sub_Internal_Fx_tryStop(onError, tupledArg[0], tupledArg[1]);\n    }, toStop);\n    return append(toKeep, choose((tupledArg_1) => Sub_Internal_Fx_tryStart(onError, dispatch, tupledArg_1[0], tupledArg_1[1]), toStart));\n}\n\nexport function Sub_Internal_NewSubs_init() {\n    return [empty(), empty_1({\n        Compare: compare,\n    }), empty()];\n}\n\nexport function Sub_Internal_NewSubs__newSubs() {\n    return Sub_Internal_NewSubs_init()[2];\n}\n\nexport function Sub_Internal_NewSubs__newKeys() {\n    return Sub_Internal_NewSubs_init()[1];\n}\n\nexport function Sub_Internal_NewSubs__dupes() {\n    return Sub_Internal_NewSubs_init()[0];\n}\n\nexport function Sub_Internal_NewSubs_update(subId, start, dupes, newKeys, newSubs) {\n    if (contains(subId, newKeys)) {\n        return [cons(subId, dupes), newKeys, newSubs];\n    }\n    else {\n        return [dupes, add(subId, newKeys), cons([subId, start], newSubs)];\n    }\n}\n\nexport function Sub_Internal_NewSubs_calculate(subs) {\n    return foldBack((tupledArg, tupledArg_1) => Sub_Internal_NewSubs_update(tupledArg[0], tupledArg[1], tupledArg_1[0], tupledArg_1[1], tupledArg_1[2]), subs, Sub_Internal_NewSubs_init());\n}\n\nexport const Sub_Internal_empty = empty();\n\nexport function Sub_Internal_diff(activeSubs, sub) {\n    const keys = ofList(map((tuple) => tuple[0], activeSubs), {\n        Compare: compare,\n    });\n    const patternInput = Sub_Internal_NewSubs_calculate(sub);\n    const newKeys = patternInput[1];\n    const dupes = patternInput[0];\n    if (keys.Equals(newKeys)) {\n        return [dupes, empty(), activeSubs, empty()];\n    }\n    else {\n        const patternInput_1 = partition((tupledArg) => contains(tupledArg[0], newKeys), activeSubs);\n        return [dupes, patternInput_1[1], patternInput_1[0], filter((tupledArg_1) => !contains(tupledArg_1[0], keys), patternInput[2])];\n    }\n}\n\n","import { singleton, concat, map, empty, iterate } from \"../fable-library.4.9.0/List.js\";\nimport { singleton as singleton_1 } from \"../fable-library.4.9.0/AsyncBuilder.js\";\nimport { startImmediate, catchAsync } from \"../fable-library.4.9.0/Async.js\";\nimport { Timer_delay } from \"./prelude.fs.js\";\n\n/**\n * Execute the commands using the supplied dispatcher\n */\nexport function Cmd_exec(onError, dispatch, cmd) {\n    iterate((call) => {\n        try {\n            call(dispatch);\n        }\n        catch (ex) {\n            onError(ex);\n        }\n    }, cmd);\n}\n\n/**\n * None - no commands, also known as `[]`\n */\nexport function Cmd_none() {\n    return empty();\n}\n\n/**\n * When emitting the message, map to another type\n */\nexport function Cmd_map(f, cmd) {\n    return map((g) => ((arg_1) => {\n        g((arg) => {\n            arg_1(f(arg));\n        });\n    }), cmd);\n}\n\n/**\n * Aggregate multiple commands\n */\nexport function Cmd_batch(cmds) {\n    return concat(cmds);\n}\n\n/**\n * Command to call the effect\n */\nexport function Cmd_ofEffect(effect) {\n    return singleton(effect);\n}\n\n/**\n * Command to evaluate a simple function and map the result\n * into success or error (of exception)\n */\nexport function Cmd_OfFunc_either(task, arg, ofSuccess, ofError) {\n    return singleton((dispatch) => {\n        try {\n            dispatch(ofSuccess(task(arg)));\n        }\n        catch (x) {\n            dispatch(ofError(x));\n        }\n    });\n}\n\n/**\n * Command to evaluate a simple function and map the success to a message\n * discarding any possible error\n */\nexport function Cmd_OfFunc_perform(task, arg, ofSuccess) {\n    return singleton((dispatch) => {\n        try {\n            dispatch(ofSuccess(task(arg)));\n        }\n        catch (x) {\n        }\n    });\n}\n\n/**\n * Command to evaluate a simple function and map the error (in case of exception)\n */\nexport function Cmd_OfFunc_attempt(task, arg, ofError) {\n    return singleton((dispatch) => {\n        try {\n            task(arg);\n        }\n        catch (x) {\n            dispatch(ofError(x));\n        }\n    });\n}\n\n/**\n * Command that will evaluate an async block and map the result\n * into success or error (of exception)\n */\nexport function Cmd_OfAsyncWith_either(start, task, arg, ofSuccess, ofError) {\n    return singleton((arg_1) => {\n        start(singleton_1.Delay(() => singleton_1.Bind(catchAsync(task(arg)), (_arg) => {\n            const r = _arg;\n            arg_1((r.tag === 1) ? ofError(r.fields[0]) : ofSuccess(r.fields[0]));\n            return singleton_1.Zero();\n        })));\n    });\n}\n\n/**\n * Command that will evaluate an async block and map the success\n */\nexport function Cmd_OfAsyncWith_perform(start, task, arg, ofSuccess) {\n    return singleton((arg_1) => {\n        start(singleton_1.Delay(() => singleton_1.Bind(catchAsync(task(arg)), (_arg) => {\n            const r = _arg;\n            if (r.tag === 0) {\n                arg_1(ofSuccess(r.fields[0]));\n                return singleton_1.Zero();\n            }\n            else {\n                return singleton_1.Zero();\n            }\n        })));\n    });\n}\n\n/**\n * Command that will evaluate an async block and map the error (of exception)\n */\nexport function Cmd_OfAsyncWith_attempt(start, task, arg, ofError) {\n    return singleton((arg_1) => {\n        start(singleton_1.Delay(() => singleton_1.Bind(catchAsync(task(arg)), (_arg) => {\n            const r = _arg;\n            if (r.tag === 1) {\n                arg_1(ofError(r.fields[0]));\n                return singleton_1.Zero();\n            }\n            else {\n                return singleton_1.Zero();\n            }\n        })));\n    });\n}\n\nexport function Cmd_OfAsync_start(x) {\n    Timer_delay(1, (_arg) => {\n        startImmediate(x);\n    });\n}\n\n/**\n * Command to call `promise` block and map the results\n */\nexport function Cmd_OfPromise_either(task, arg, ofSuccess, ofError) {\n    return singleton((dispatch) => {\n        task(arg).then((arg_3) => {\n            dispatch(ofSuccess(arg_3));\n        }).catch((arg_2) => {\n            dispatch(ofError(arg_2));\n        });\n    });\n}\n\n/**\n * Command to call `promise` block and map the success\n */\nexport function Cmd_OfPromise_perform(task, arg, ofSuccess) {\n    return singleton((dispatch) => {\n        task(arg).then((arg_1) => dispatch(ofSuccess(arg_1)));\n    });\n}\n\n/**\n * Command to call `promise` block and map the error\n */\nexport function Cmd_OfPromise_attempt(task, arg, ofError) {\n    return singleton((dispatch) => {\n        task(arg).catch((arg_2) => {\n            dispatch(ofError(arg_2));\n        });\n    });\n}\n\n","import { FSharpRef } from \"./Types.js\";\nexport function tryParse(str, defValue) {\n    // TODO: test if value is valid and in range\n    if (str != null && /\\S/.test(str)) {\n        const v = +str.replace(\"_\", \"\");\n        if (!Number.isNaN(v)) {\n            defValue.contents = v;\n            return true;\n        }\n    }\n    return false;\n}\nexport function parse(str) {\n    const defValue = new FSharpRef(0);\n    if (tryParse(str, defValue)) {\n        return defValue.contents;\n    }\n    else {\n        throw new Error(`The input string ${str} was not in a correct format.`);\n    }\n}\n// JS Number.isFinite function evals false for NaN\nexport function isPositiveInfinity(x) {\n    return x === Number.POSITIVE_INFINITY;\n}\nexport function isNegativeInfinity(x) {\n    return x === Number.NEGATIVE_INFINITY;\n}\nexport function isInfinity(x) {\n    return x === Number.POSITIVE_INFINITY || x === Number.NEGATIVE_INFINITY;\n}\nexport function max(x, y) {\n    return x > y ? x : y;\n}\nexport function min(x, y) {\n    return x < y ? x : y;\n}\nexport function maxMagnitude(x, y) {\n    return Math.abs(x) > Math.abs(y) ? x : y;\n}\nexport function minMagnitude(x, y) {\n    return Math.abs(x) < Math.abs(y) ? x : y;\n}\nexport function clamp(x, min, max) {\n    return x < min ? min : x > max ? max : x;\n}\n","import { compare } from \"./Util.js\";\nimport { unfold, delay } from \"./Seq.js\";\nimport { toUInt64, toInt64, op_Addition, fromZero } from \"./BigInt.js\";\nimport { op_Addition as op_Addition_1, fromParts } from \"./Decimal.js\";\nexport function makeRangeStepFunction(step, stop, zero, add) {\n    const stepComparedWithZero = compare(step, zero) | 0;\n    if (stepComparedWithZero === 0) {\n        throw new Error(\"The step of a range cannot be zero\");\n    }\n    const stepGreaterThanZero = stepComparedWithZero > 0;\n    return (x) => {\n        const comparedWithLast = compare(x, stop) | 0;\n        return ((stepGreaterThanZero && (comparedWithLast <= 0)) ? true : (!stepGreaterThanZero && (comparedWithLast >= 0))) ? [x, add(x, step)] : void 0;\n    };\n}\nexport function integralRangeStep(start, step, stop, zero, add) {\n    const stepFn = makeRangeStepFunction(step, stop, zero, add);\n    return delay(() => unfold(stepFn, start));\n}\nexport function rangeBigInt(start, step, stop) {\n    return integralRangeStep(start, step, stop, fromZero(), op_Addition);\n}\nexport function rangeDecimal(start, step, stop) {\n    return integralRangeStep(start, step, stop, fromParts(0, 0, 0, false, 0), op_Addition_1);\n}\nexport function rangeDouble(start, step, stop) {\n    return integralRangeStep(start, step, stop, 0, (x, y) => (x + y));\n}\nexport function rangeInt64(start, step, stop) {\n    return integralRangeStep(start, step, stop, 0n, (x, y) => toInt64(op_Addition(x, y)));\n}\nexport function rangeUInt64(start, step, stop) {\n    return integralRangeStep(start, step, stop, 0n, (x, y) => toUInt64(op_Addition(x, y)));\n}\nexport function rangeChar(start, stop) {\n    const intStop = stop.charCodeAt(0) | 0;\n    return delay(() => unfold((c) => {\n        if (c <= intStop) {\n            return [String.fromCharCode(c), c + 1];\n        }\n        else {\n            return void 0;\n        }\n    }, start.charCodeAt(0)));\n}\n","import { Union } from \"../fable-library.4.9.0/Types.js\";\nimport { class_type, union_type, int32_type, array_type } from \"../fable-library.4.9.0/Reflection.js\";\nimport { fill } from \"../fable-library.4.9.0/Array.js\";\nimport { max } from \"../fable-library.4.9.0/Double.js\";\nimport { some } from \"../fable-library.4.9.0/Option.js\";\nimport { singleton, collect, take, skip, append, delay } from \"../fable-library.4.9.0/Seq.js\";\nimport { defaultOf } from \"../fable-library.4.9.0/Util.js\";\nimport { rangeDouble } from \"../fable-library.4.9.0/Range.js\";\n\nexport class RingState$1 extends Union {\n    constructor(tag, fields) {\n        super();\n        this.tag = tag;\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Writable\", \"ReadWritable\"];\n    }\n}\n\nexport function RingState$1_$reflection(gen0) {\n    return union_type(\"Elmish.RingState`1\", [gen0], RingState$1, () => [[[\"wx\", array_type(gen0)], [\"ix\", int32_type]], [[\"rw\", array_type(gen0)], [\"wix\", int32_type], [\"rix\", int32_type]]]);\n}\n\nexport class RingBuffer$1 {\n    constructor(size) {\n        this.state = (new RingState$1(0, [fill(new Array(max(size, 10)), 0, max(size, 10), null), 0]));\n    }\n}\n\nexport function RingBuffer$1_$reflection(gen0) {\n    return class_type(\"Elmish.RingBuffer`1\", [gen0], RingBuffer$1);\n}\n\nexport function RingBuffer$1_$ctor_Z524259A4(size) {\n    return new RingBuffer$1(size);\n}\n\nexport function RingBuffer$1__Pop(__) {\n    const matchValue = __.state;\n    if (matchValue.tag === 1) {\n        const wix = matchValue.fields[1] | 0;\n        const rix = matchValue.fields[2] | 0;\n        const items = matchValue.fields[0];\n        const rix$0027 = ((rix + 1) % items.length) | 0;\n        if (rix$0027 === wix) {\n            __.state = (new RingState$1(0, [items, wix]));\n        }\n        else {\n            __.state = (new RingState$1(1, [items, wix, rix$0027]));\n        }\n        return some(items[rix]);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function RingBuffer$1__Push_2B595(__, item) {\n    const matchValue = __.state;\n    if (matchValue.tag === 1) {\n        const wix_1 = matchValue.fields[1] | 0;\n        const rix = matchValue.fields[2] | 0;\n        const items_1 = matchValue.fields[0];\n        items_1[wix_1] = item;\n        const wix$0027 = ((wix_1 + 1) % items_1.length) | 0;\n        if (wix$0027 === rix) {\n            __.state = (new RingState$1(1, [RingBuffer$1__doubleSize(__, rix, items_1), items_1.length, 0]));\n        }\n        else {\n            __.state = (new RingState$1(1, [items_1, wix$0027, rix]));\n        }\n    }\n    else {\n        const ix = matchValue.fields[1] | 0;\n        const items = matchValue.fields[0];\n        items[ix] = item;\n        const wix = ((ix + 1) % items.length) | 0;\n        __.state = (new RingState$1(1, [items, wix, ix]));\n    }\n}\n\nexport function RingBuffer$1__doubleSize(this$, ix, items) {\n    return Array.from(delay(() => append(skip(ix, items), delay(() => append(take(ix, items), delay(() => collect((matchValue) => singleton(defaultOf()), rangeDouble(0, 1, items.length))))))));\n}\n\n","import { Record } from \"../fable-library.4.9.0/Types.js\";\nimport { record_type, bool_type, class_type, string_type, tuple_type, list_type, lambda_type, unit_type } from \"../fable-library.4.9.0/Reflection.js\";\nimport { Sub_Internal_Fx_change, Sub_Internal_diff, Sub_Internal_Fx_stop, Sub_Internal_empty, Sub_none } from \"./sub.fs.js\";\nimport { curry3, curry2, uncurry2 } from \"../fable-library.4.9.0/Util.js\";\nimport { Log_toConsole, Log_onError } from \"./prelude.fs.js\";\nimport { Cmd_exec, Cmd_none } from \"./cmd.fs.js\";\nimport { map as map_1 } from \"../fable-library.4.9.0/List.js\";\nimport { RingBuffer$1__Pop, RingBuffer$1__Push_2B595, RingBuffer$1_$ctor_Z524259A4 } from \"./ring.fs.js\";\nimport { value as value_2 } from \"../fable-library.4.9.0/Option.js\";\nimport { printf, toText } from \"../fable-library.4.9.0/String.js\";\n\nexport class Program$4 extends Record {\n    constructor(init, update, subscribe, view, setState, onError, termination) {\n        super();\n        this.init = init;\n        this.update = update;\n        this.subscribe = subscribe;\n        this.view = view;\n        this.setState = setState;\n        this.onError = onError;\n        this.termination = termination;\n    }\n}\n\nexport function Program$4_$reflection(gen0, gen1, gen2, gen3) {\n    return record_type(\"Elmish.Program`4\", [gen0, gen1, gen2, gen3], Program$4, () => [[\"init\", lambda_type(gen0, tuple_type(gen1, list_type(lambda_type(lambda_type(gen2, unit_type), unit_type))))], [\"update\", lambda_type(gen2, lambda_type(gen1, tuple_type(gen1, list_type(lambda_type(lambda_type(gen2, unit_type), unit_type)))))], [\"subscribe\", lambda_type(gen1, list_type(tuple_type(list_type(string_type), lambda_type(lambda_type(gen2, unit_type), class_type(\"System.IDisposable\")))))], [\"view\", lambda_type(gen1, lambda_type(lambda_type(gen2, unit_type), gen3))], [\"setState\", lambda_type(gen1, lambda_type(lambda_type(gen2, unit_type), unit_type))], [\"onError\", lambda_type(tuple_type(string_type, class_type(\"System.Exception\")), unit_type)], [\"termination\", tuple_type(lambda_type(gen2, bool_type), lambda_type(gen1, unit_type))]]);\n}\n\n/**\n * Typical program, new commands are produced by `init` and `update` along with the new state.\n */\nexport function ProgramModule_mkProgram(init, update, view) {\n    return new Program$4(init, update, (_arg) => Sub_none(), view, uncurry2((model) => {\n        const f1 = curry2(view)(model);\n        return (arg) => {\n            f1(arg);\n        };\n    }), (tupledArg) => {\n        Log_onError(tupledArg[0], tupledArg[1]);\n    }, [(_arg_1) => false, (value_1) => {\n    }]);\n}\n\n/**\n * Simple program that produces only new state with `init` and `update`.\n */\nexport function ProgramModule_mkSimple(init, update, view) {\n    return new Program$4((arg) => [init(arg), Cmd_none()], uncurry2((msg) => {\n        const f1_1 = curry2(update)(msg);\n        return (arg_1) => [f1_1(arg_1), Cmd_none()];\n    }), (_arg) => Sub_none(), view, uncurry2((model) => {\n        const f1_2 = curry2(view)(model);\n        return (arg_2) => {\n            f1_2(arg_2);\n        };\n    }), (tupledArg) => {\n        Log_onError(tupledArg[0], tupledArg[1]);\n    }, [(_arg_1) => false, (value_1) => {\n    }]);\n}\n\n/**\n * Subscribe to external source of events, overrides existing subscription.\n * Return the subscriptions that should be active based on the current model.\n * Subscriptions will be started or stopped automatically to match.\n */\nexport function ProgramModule_withSubscription(subscribe, program) {\n    return new Program$4(program.init, program.update, subscribe, program.view, program.setState, program.onError, program.termination);\n}\n\n/**\n * Map existing subscription to external source of events.\n */\nexport function ProgramModule_mapSubscription(map, program) {\n    return new Program$4(program.init, program.update, curry2(map)(program.subscribe), program.view, program.setState, program.onError, program.termination);\n}\n\n/**\n * Trace all the updates to the console\n */\nexport function ProgramModule_withConsoleTrace(program) {\n    return new Program$4((arg) => {\n        const patternInput = program.init(arg);\n        const initModel = patternInput[0];\n        Log_toConsole(\"Initial state:\", initModel);\n        return [initModel, patternInput[1]];\n    }, (msg, model) => {\n        Log_toConsole(\"New message:\", msg);\n        const patternInput_1 = program.update(msg, model);\n        const newModel = patternInput_1[0];\n        Log_toConsole(\"Updated state:\", newModel);\n        return [newModel, patternInput_1[1]];\n    }, (model_1) => {\n        const sub = program.subscribe(model_1);\n        Log_toConsole(\"Updated subs:\", map_1((tuple) => tuple[0], sub));\n        return sub;\n    }, program.view, program.setState, program.onError, program.termination);\n}\n\n/**\n * Trace all the messages as they update the model and subscriptions\n */\nexport function ProgramModule_withTrace(trace, program) {\n    return new Program$4(program.init, (msg, model) => {\n        const patternInput = program.update(msg, model);\n        const state = patternInput[0];\n        trace(msg, state, map_1((tuple) => tuple[0], program.subscribe(state)));\n        return [state, patternInput[1]];\n    }, program.subscribe, program.view, program.setState, program.onError, program.termination);\n}\n\n/**\n * Handle dispatch loop exceptions\n */\nexport function ProgramModule_withErrorHandler(onError, program) {\n    return new Program$4(program.init, program.update, program.subscribe, program.view, program.setState, onError, program.termination);\n}\n\n/**\n * Exit criteria and the handler, overrides existing.\n */\nexport function ProgramModule_withTermination(predicate, terminate, program) {\n    return new Program$4(program.init, program.update, program.subscribe, program.view, program.setState, program.onError, [predicate, terminate]);\n}\n\n/**\n * Map existing criteria and the handler.\n */\nexport function ProgramModule_mapTermination(map, program) {\n    return new Program$4(program.init, program.update, program.subscribe, program.view, program.setState, program.onError, map(program.termination));\n}\n\n/**\n * Map existing error handler and return new `Program`\n */\nexport function ProgramModule_mapErrorHandler(map, program) {\n    return new Program$4(program.init, program.update, program.subscribe, program.view, program.setState, curry2(map)(program.onError), program.termination);\n}\n\n/**\n * Get the current error handler\n */\nexport function ProgramModule_onError(program) {\n    return program.onError;\n}\n\n/**\n * Function to render the view with the latest state\n */\nexport function ProgramModule_withSetState(setState, program) {\n    return new Program$4(program.init, program.update, program.subscribe, program.view, setState, program.onError, program.termination);\n}\n\n/**\n * Return the function to render the state\n */\nexport function ProgramModule_setState(program) {\n    return curry2(program.setState);\n}\n\n/**\n * Return the view function\n */\nexport function ProgramModule_view(program) {\n    return curry2(program.view);\n}\n\n/**\n * Return the init function\n */\nexport function ProgramModule_init(program) {\n    return program.init;\n}\n\n/**\n * Return the update function\n */\nexport function ProgramModule_update(program) {\n    return curry2(program.update);\n}\n\n/**\n * Map the program type\n */\nexport function ProgramModule_map(mapInit, mapUpdate, mapView, mapSetState, mapSubscribe, mapTermination, program) {\n    const init = curry2(mapInit)(program.init);\n    const update = curry3(mapUpdate)(curry2(program.update));\n    const view = curry3(mapView)(curry2(program.view));\n    const setState = curry3(mapSetState)(curry2(program.setState));\n    return new Program$4(init, uncurry2(update), curry2(mapSubscribe)(program.subscribe), uncurry2(view), uncurry2(setState), program.onError, mapTermination(program.termination));\n}\n\n/**\n * Start the program loop.\n * syncDispatch: specify how to serialize dispatch calls.\n * arg: argument to pass to the init() function.\n * program: program created with 'mkSimple' or 'mkProgram'.\n */\nexport function ProgramModule_runWithDispatch(syncDispatch, arg, program) {\n    let tupledArg_1;\n    const patternInput = program.init(arg);\n    const model = patternInput[0];\n    const sub = program.subscribe(model);\n    const patternInput_1 = program.termination;\n    const rb = RingBuffer$1_$ctor_Z524259A4(10);\n    let reentered = false;\n    let state = model;\n    let activeSubs = Sub_Internal_empty;\n    let terminated = false;\n    const dispatch = (msg) => {\n        if (!terminated) {\n            RingBuffer$1__Push_2B595(rb, msg);\n            if (!reentered) {\n                reentered = true;\n                processMsgs();\n                reentered = false;\n            }\n        }\n    };\n    const dispatch$0027 = curry2(syncDispatch)(dispatch);\n    const processMsgs = () => {\n        let tupledArg;\n        let nextMsg = RingBuffer$1__Pop(rb);\n        while (!terminated && (nextMsg != null)) {\n            const msg_1 = value_2(nextMsg);\n            if (patternInput_1[0](msg_1)) {\n                Sub_Internal_Fx_stop(program.onError, activeSubs);\n                patternInput_1[1](state);\n                terminated = true;\n            }\n            else {\n                const patternInput_2 = program.update(msg_1, state);\n                const model$0027 = patternInput_2[0];\n                const sub$0027 = program.subscribe(model$0027);\n                program.setState(model$0027, dispatch$0027);\n                activeSubs = ((tupledArg = Sub_Internal_diff(activeSubs, sub$0027), Sub_Internal_Fx_change(program.onError, dispatch$0027, tupledArg[0], tupledArg[1], tupledArg[2], tupledArg[3])));\n                Cmd_exec((ex) => {\n                    program.onError([toText(printf(\"Error handling the message: %A\"))(msg_1), ex]);\n                }, dispatch$0027, patternInput_2[1]);\n                state = model$0027;\n                nextMsg = RingBuffer$1__Pop(rb);\n            }\n        }\n    };\n    reentered = true;\n    program.setState(model, dispatch$0027);\n    activeSubs = ((tupledArg_1 = Sub_Internal_diff(activeSubs, sub), Sub_Internal_Fx_change(program.onError, dispatch$0027, tupledArg_1[0], tupledArg_1[1], tupledArg_1[2], tupledArg_1[3])));\n    Cmd_exec((ex_1) => {\n        program.onError([toText(printf(\"Error intitializing:\")), ex_1]);\n    }, dispatch$0027, patternInput[1]);\n    processMsgs();\n    reentered = false;\n}\n\n/**\n * Start the single-threaded dispatch loop.\n * arg: argument to pass to the 'init' function.\n * program: program created with 'mkSimple' or 'mkProgram'.\n */\nexport function ProgramModule_runWith(arg, program) {\n    ProgramModule_runWithDispatch(uncurry2((x) => x), arg, program);\n}\n\n/**\n * Start the dispatch loop with `unit` for the init() function.\n */\nexport function ProgramModule_run(program) {\n    ProgramModule_runWith(void 0, program);\n}\n\n","import { some } from \"../fable-library.4.9.0/Option.js\";\nimport Timer from \"../fable-library.4.9.0/Timer.js\";\nimport { add } from \"../fable-library.4.9.0/Observable.js\";\n\nexport function Log_onError(text, ex) {\n    console.error(some(text), ex);\n}\n\nexport function Log_toConsole(text, o) {\n    console.log(some(text), o);\n}\n\nexport function Timer_delay(interval, callback) {\n    let t;\n    let returnVal = new Timer(interval);\n    returnVal.AutoReset = false;\n    t = returnVal;\n    add(callback, t.Elapsed());\n    t.Enabled = true;\n    t.Start();\n}\n\n","export var NumberStyles;\n(function (NumberStyles) {\n    // None = 0x00000000,\n    // AllowLeadingWhite = 0x00000001,\n    // AllowTrailingWhite = 0x00000002,\n    // AllowLeadingSign = 0x00000004,\n    // AllowTrailingSign = 0x00000008,\n    // AllowParentheses = 0x00000010,\n    // AllowDecimalPoint = 0x00000020,\n    // AllowThousands = 0x00000040,\n    // AllowExponent = 0x00000080,\n    // AllowCurrencySymbol = 0x00000100,\n    NumberStyles[NumberStyles[\"AllowHexSpecifier\"] = 512] = \"AllowHexSpecifier\";\n    // Integer = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign,\n    // HexNumber = AllowLeadingWhite | AllowTrailingWhite | AllowHexSpecifier,\n    // Number = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //          AllowTrailingSign | AllowDecimalPoint | AllowThousands,\n    // Float = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //         AllowDecimalPoint | AllowExponent,\n    // Currency = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //            AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol,\n    // Any = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //       AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol | AllowExponent,\n})(NumberStyles || (NumberStyles = {}));\nfunction validResponse(regexMatch, radix) {\n    const [/*all*/ , sign, prefix, digits] = regexMatch;\n    return {\n        sign: sign || \"\",\n        prefix: prefix || \"\",\n        digits,\n        radix,\n    };\n}\nfunction getRange(unsigned, bitsize) {\n    switch (bitsize) {\n        case 8: return unsigned ? [0, 255] : [-128, 127];\n        case 16: return unsigned ? [0, 65535] : [-32768, 32767];\n        case 32: return unsigned ? [0, 4294967295] : [-2147483648, 2147483647];\n        default: throw new Error(\"Invalid bit size.\");\n    }\n}\nfunction getInvalidDigits(radix) {\n    switch (radix) {\n        case 2: return /[^0-1]/;\n        case 8: return /[^0-7]/;\n        case 10: return /[^0-9]/;\n        case 16: return /[^0-9a-fA-F]/;\n        default:\n            throw new Error(\"Invalid Base.\");\n    }\n}\nexport function getPrefix(radix) {\n    switch (radix) {\n        case 2: return \"0b\";\n        case 8: return \"0o\";\n        case 10: return \"\";\n        case 16: return \"0x\";\n        default: return \"\";\n    }\n}\nexport function getRadix(prefix, style) {\n    if (style & NumberStyles.AllowHexSpecifier) {\n        return 16;\n    }\n    else {\n        switch (prefix) {\n            case \"0b\":\n            case \"0B\": return 2;\n            case \"0o\":\n            case \"0O\": return 8;\n            case \"0x\":\n            case \"0X\": return 16;\n            default: return 10;\n        }\n    }\n}\nexport function isValid(str, style, radix) {\n    const integerRegex = /^\\s*([\\+\\-])?(0[xXoObB])?([0-9a-fA-F]+)\\s*$/;\n    const res = integerRegex.exec(str.replace(/_/g, \"\"));\n    if (res != null) {\n        const [/*all*/ , /*sign*/ , prefix, digits] = res;\n        radix = radix || getRadix(prefix, style);\n        const invalidDigits = getInvalidDigits(radix);\n        if (!invalidDigits.test(digits)) {\n            return validResponse(res, radix);\n        }\n    }\n    return null;\n}\nexport function parse(str, style, unsigned, bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        let v = Number.parseInt(res.sign + res.digits, res.radix);\n        if (!Number.isNaN(v)) {\n            const [umin, umax] = getRange(true, bitsize);\n            if (!unsigned && res.radix !== 10 && v >= umin && v <= umax) {\n                v = v << (32 - bitsize) >> (32 - bitsize);\n            }\n            const [min, max] = getRange(unsigned, bitsize);\n            if (v >= min && v <= max) {\n                return v;\n            }\n        }\n    }\n    throw new Error(`The input string ${str} was not in a correct format.`);\n}\nexport function tryParse(str, style, unsigned, bitsize, defValue) {\n    try {\n        defValue.contents = parse(str, style, unsigned, bitsize);\n        return true;\n    }\n    catch {\n        return false;\n    }\n}\nexport function op_UnaryNegation_Int8(x) {\n    return x === -128 ? x : -x;\n}\nexport function op_UnaryNegation_Int16(x) {\n    return x === -32768 ? x : -x;\n}\nexport function op_UnaryNegation_Int32(x) {\n    return x === -2147483648 ? x : -x;\n}\nexport function divRem(x, y, out) {\n    const div = ~~(x / y);\n    const rem = x % y;\n    if (out === void 0) {\n        return [div, rem];\n    }\n    else {\n        out.contents = rem;\n        return div;\n    }\n}\n","import { Record } from \"../fable-library.4.9.0/Types.js\";\nimport { obj_type, record_type, bool_type, lambda_type, class_type, unit_type } from \"../fable-library.4.9.0/Reflection.js\";\nimport { Component } from \"react\";\nimport * as react from \"react\";\nimport { equalArrays, equals } from \"../fable-library.4.9.0/Util.js\";\n\nexport function Internal_updateInputValue(value, e) {\n    if (!(e == null) && (e.value !== value)) {\n        e.value = value;\n    }\n}\n\nexport class LazyProps$1 extends Record {\n    constructor(model, render, equal) {\n        super();\n        this.model = model;\n        this.render = render;\n        this.equal = equal;\n    }\n}\n\nexport function LazyProps$1_$reflection(gen0) {\n    return record_type(\"Elmish.React.LazyProps`1\", [gen0], LazyProps$1, () => [[\"model\", gen0], [\"render\", lambda_type(unit_type, class_type(\"Fable.React.ReactElement\"))], [\"equal\", lambda_type(gen0, lambda_type(gen0, bool_type))]]);\n}\n\nexport class Components_LazyView$1 extends Component {\n    constructor(props) {\n        super(props);\n    }\n    shouldComponentUpdate(nextProps, _nextState) {\n        const this$ = this;\n        return !(this$.props).equal((this$.props).model, nextProps.model);\n    }\n    render() {\n        const this$ = this;\n        return (this$.props).render();\n    }\n}\n\nexport function Components_LazyView$1_$reflection(gen0) {\n    return class_type(\"Elmish.React.Components.LazyView`1\", [gen0], Components_LazyView$1, class_type(\"Fable.React.Component`2\", [LazyProps$1_$reflection(gen0), obj_type], Component));\n}\n\nexport function Components_LazyView$1_$ctor_Z7829D94B(props) {\n    return new Components_LazyView$1(props);\n}\n\n/**\n * Avoid rendering the view unless the model has changed.\n * equal: function to compare the previous and the new states\n * view: function to render the model\n * state: new state to render\n */\nexport function Common_lazyViewWith(equal, view, state) {\n    const props = new LazyProps$1(state, () => view(state), equal);\n    return react.createElement(Components_LazyView$1, props);\n}\n\n/**\n * Avoid rendering the view unless the model has changed.\n * equal: function to compare the previous and the new states\n * view: function to render the model using the dispatch\n * state: new state to render\n * dispatch: dispatch function\n */\nexport function Common_lazyView2With(equal, view, state, dispatch) {\n    const props = new LazyProps$1(state, () => view(state, dispatch), equal);\n    return react.createElement(Components_LazyView$1, props);\n}\n\n/**\n * Avoid rendering the view unless the model has changed.\n * equal: function to compare the previous and the new model (a tuple of two states)\n * view: function to render the model using the dispatch\n * state1: new state to render\n * state2: new state to render\n * dispatch: dispatch function\n */\nexport function Common_lazyView3With(equal, view, state1, state2, dispatch) {\n    const props = new LazyProps$1([state1, state2], () => view(state1, state2, dispatch), equal);\n    return react.createElement(Components_LazyView$1, props);\n}\n\n/**\n * Avoid rendering the view unless the model has changed.\n * view: function of model to render the view\n */\nexport function Common_lazyView(view) {\n    return (state) => Common_lazyViewWith(equals, view, state);\n}\n\n/**\n * Avoid rendering the view unless the model has changed.\n * view: function of two arguments to render the model using the dispatch\n */\nexport function Common_lazyView2(view) {\n    return (state) => ((dispatch) => Common_lazyView2With(equals, view, state, dispatch));\n}\n\n/**\n * Avoid rendering the view unless the model has changed.\n * view: function of three arguments to render the model using the dispatch\n */\nexport function Common_lazyView3(view) {\n    return (state) => ((state_1) => ((dispatch) => Common_lazyView3With(equalArrays, view, state, state_1, dispatch)));\n}\n\n","import { parse } from \"../fable-library.4.9.0/Int32.js\";\nimport * as react from \"react\";\nimport { ProgramModule_view, ProgramModule_withSetState } from \"../Fable.Elmish.4.1.0/program.fs.js\";\nimport { uncurry2 } from \"../fable-library.4.9.0/Util.js\";\nimport * as client from \"react-dom/client\";\nimport * as react_dom from \"react-dom\";\nimport { Common_lazyView2With } from \"./common.fs.js\";\n\nexport const Program_Internal_useRootApi = (() => {\n    try {\n        return parse(react.version.slice(void 0, 1 + 1), 511, false, 32) >= 18;\n    }\n    catch (matchValue) {\n        return false;\n    }\n})();\n\nexport function Program_Internal_withReactBatchedUsing(lazyView2With, placeholderId, program) {\n    let lastRequest, root;\n    return ProgramModule_withSetState(uncurry2((lastRequest = void 0, Program_Internal_useRootApi ? ((root = client.createRoot(document.getElementById(placeholderId)), (model) => ((dispatch) => {\n        if (lastRequest != null) {\n            const r = lastRequest;\n            window.cancelAnimationFrame(r);\n        }\n        lastRequest = window.requestAnimationFrame((_arg) => {\n            root.render(lazyView2With((x) => ((y) => (x === y)), ProgramModule_view(program), model, dispatch));\n        });\n    }))) : ((model_1) => ((dispatch_1) => {\n        if (lastRequest != null) {\n            const r_1 = lastRequest;\n            window.cancelAnimationFrame(r_1);\n        }\n        lastRequest = window.requestAnimationFrame((_arg_1) => {\n            react_dom.render(lazyView2With((x_1) => ((y_1) => (x_1 === y_1)), ProgramModule_view(program), model_1, dispatch_1), document.getElementById(placeholderId));\n        });\n    })))), program);\n}\n\nexport function Program_Internal_withReactSynchronousUsing(lazyView2With, placeholderId, program) {\n    let root;\n    return ProgramModule_withSetState(uncurry2(Program_Internal_useRootApi ? ((root = client.createRoot(document.getElementById(placeholderId)), (model) => ((dispatch) => {\n        root.render(lazyView2With((x) => ((y) => (x === y)), ProgramModule_view(program), model, dispatch));\n    }))) : ((model_1) => ((dispatch_1) => {\n        react_dom.render(lazyView2With((x_1) => ((y_1) => (x_1 === y_1)), ProgramModule_view(program), model_1, dispatch_1), document.getElementById(placeholderId));\n    }))), program);\n}\n\nexport function Program_Internal_withReactHydrateUsing(lazyView2With, placeholderId, program) {\n    let root;\n    return ProgramModule_withSetState(uncurry2(Program_Internal_useRootApi ? ((root = void 0, (model) => ((dispatch) => {\n        if (root != null) {\n            const root_1 = root;\n            root_1.render(lazyView2With((x_1) => ((y_1) => (x_1 === y_1)), ProgramModule_view(program), model, dispatch));\n        }\n        else {\n            root = client.hydrateRoot(document.getElementById(placeholderId), lazyView2With((x) => ((y) => (x === y)), ProgramModule_view(program), model, dispatch));\n        }\n    }))) : ((model_1) => ((dispatch_1) => {\n        react_dom.hydrate(lazyView2With((x_2) => ((y_2) => (x_2 === y_2)), ProgramModule_view(program), model_1, dispatch_1), document.getElementById(placeholderId));\n    }))), program);\n}\n\n/**\n * Renders React root component inside html element identified by placeholderId.\n * Uses `requestAnimationFrame` to batch updates to prevent drops in frame rate.\n * NOTE: This may have unexpected effects in React controlled inputs, see https://github.com/elmish/react/issues/12\n */\nexport function Program_withReactBatched(placeholderId, program) {\n    return Program_Internal_withReactBatchedUsing((equal, view, state, dispatch) => Common_lazyView2With(uncurry2(equal), uncurry2(view), state, dispatch), placeholderId, program);\n}\n\n/**\n * Renders React root component inside html element identified by placeholderId.\n * New renders are triggered immediately after an update.\n */\nexport function Program_withReactSynchronous(placeholderId, program) {\n    return Program_Internal_withReactSynchronousUsing((equal, view, state, dispatch) => Common_lazyView2With(uncurry2(equal), uncurry2(view), state, dispatch), placeholderId, program);\n}\n\n/**\n * Renders React root component inside html element identified by placeholderId using `React.hydrate`.\n */\nexport function Program_withReactHydrate(placeholderId, program) {\n    return Program_Internal_withReactHydrateUsing((equal, view, state, dispatch) => Common_lazyView2With(uncurry2(equal), uncurry2(view), state, dispatch), placeholderId, program);\n}\n\n","import { some } from \"../fable-library.4.9.0/Option.js\";\nimport { create, isLeapYear } from \"../fable-library.4.9.0/Date.js\";\nimport { parse } from \"../fable-library.4.9.0/Int32.js\";\nimport { split, isNullOrWhiteSpace } from \"../fable-library.4.9.0/String.js\";\nimport { equalsWith } from \"../fable-library.4.9.0/Array.js\";\nimport { defaultOf } from \"../fable-library.4.9.0/Util.js\";\nimport react from \"react\";\n\nexport function DateParsing_$007CBetween$007C_$007C(x, y, input) {\n    if ((input >= x) && (input <= y)) {\n        return some(void 0);\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function DateParsing_isLeapYear(year) {\n    return isLeapYear(year);\n}\n\nexport function DateParsing_$007CInt$007C_$007C(input) {\n    try {\n        return parse(input, 511, false, 32);\n    }\n    catch (matchValue) {\n        return void 0;\n    }\n}\n\n/**\n * Parses a specific yyyy-MM-dd or yyyy-MM-ddTHH:mm date format that comes out of an input element with type=\"date\"\n */\nexport function DateParsing_parse(input) {\n    try {\n        if (isNullOrWhiteSpace(input)) {\n            return void 0;\n        }\n        else {\n            const parts = split(input, [\"-\"], void 0, 0);\n            let patternInput;\n            let matchResult, month, year;\n            if (!equalsWith((x, y) => (x === y), parts, defaultOf()) && (parts.length === 2)) {\n                const activePatternResult = DateParsing_$007CInt$007C_$007C(parts[0]);\n                if (activePatternResult != null) {\n                    const activePatternResult_1 = DateParsing_$007CInt$007C_$007C(parts[1]);\n                    if (activePatternResult_1 != null) {\n                        matchResult = 0;\n                        month = activePatternResult_1;\n                        year = activePatternResult;\n                    }\n                    else {\n                        matchResult = 1;\n                    }\n                }\n                else {\n                    matchResult = 1;\n                }\n            }\n            else {\n                matchResult = 1;\n            }\n            switch (matchResult) {\n                case 0: {\n                    patternInput = [year, month, 1, 0, 0];\n                    break;\n                }\n                default: {\n                    let matchResult_1, day, month_1, year_1;\n                    if (!equalsWith((x_1, y_1) => (x_1 === y_1), parts, defaultOf()) && (parts.length === 3)) {\n                        const activePatternResult_2 = DateParsing_$007CInt$007C_$007C(parts[0]);\n                        if (activePatternResult_2 != null) {\n                            const activePatternResult_3 = DateParsing_$007CInt$007C_$007C(parts[1]);\n                            if (activePatternResult_3 != null) {\n                                const activePatternResult_4 = DateParsing_$007CInt$007C_$007C(parts[2]);\n                                if (activePatternResult_4 != null) {\n                                    matchResult_1 = 0;\n                                    day = activePatternResult_4;\n                                    month_1 = activePatternResult_3;\n                                    year_1 = activePatternResult_2;\n                                }\n                                else {\n                                    matchResult_1 = 1;\n                                }\n                            }\n                            else {\n                                matchResult_1 = 1;\n                            }\n                        }\n                        else {\n                            matchResult_1 = 1;\n                        }\n                    }\n                    else {\n                        matchResult_1 = 1;\n                    }\n                    switch (matchResult_1) {\n                        case 0: {\n                            patternInput = [year_1, month_1, day, 0, 0];\n                            break;\n                        }\n                        default: {\n                            let matchResult_2, day_1, month_2, year_2;\n                            if (!equalsWith((x_2, y_2) => (x_2 === y_2), parts, defaultOf()) && (parts.length === 3)) {\n                                const activePatternResult_5 = DateParsing_$007CInt$007C_$007C(parts[0]);\n                                if (activePatternResult_5 != null) {\n                                    const activePatternResult_6 = DateParsing_$007CInt$007C_$007C(parts[1]);\n                                    if (activePatternResult_6 != null) {\n                                        matchResult_2 = 0;\n                                        day_1 = parts[2];\n                                        month_2 = activePatternResult_6;\n                                        year_2 = activePatternResult_5;\n                                    }\n                                    else {\n                                        matchResult_2 = 1;\n                                    }\n                                }\n                                else {\n                                    matchResult_2 = 1;\n                                }\n                            }\n                            else {\n                                matchResult_2 = 1;\n                            }\n                            switch (matchResult_2) {\n                                case 0: {\n                                    if (day_1.indexOf(\"T\") >= 0) {\n                                        const matchValue = split(day_1, [\"T\"], void 0, 0);\n                                        let matchResult_3, parsedDay, time;\n                                        if (!equalsWith((x_3, y_3) => (x_3 === y_3), matchValue, defaultOf()) && (matchValue.length === 2)) {\n                                            const activePatternResult_7 = DateParsing_$007CInt$007C_$007C(matchValue[0]);\n                                            if (activePatternResult_7 != null) {\n                                                matchResult_3 = 0;\n                                                parsedDay = activePatternResult_7;\n                                                time = matchValue[1];\n                                            }\n                                            else {\n                                                matchResult_3 = 1;\n                                            }\n                                        }\n                                        else {\n                                            matchResult_3 = 1;\n                                        }\n                                        switch (matchResult_3) {\n                                            case 0: {\n                                                const matchValue_1 = split(time, [\":\"], void 0, 0);\n                                                let matchResult_4, hour, minute;\n                                                if (!equalsWith((x_4, y_4) => (x_4 === y_4), matchValue_1, defaultOf()) && (matchValue_1.length === 2)) {\n                                                    const activePatternResult_8 = DateParsing_$007CInt$007C_$007C(matchValue_1[0]);\n                                                    if (activePatternResult_8 != null) {\n                                                        const activePatternResult_9 = DateParsing_$007CInt$007C_$007C(matchValue_1[1]);\n                                                        if (activePatternResult_9 != null) {\n                                                            matchResult_4 = 0;\n                                                            hour = activePatternResult_8;\n                                                            minute = activePatternResult_9;\n                                                        }\n                                                        else {\n                                                            matchResult_4 = 1;\n                                                        }\n                                                    }\n                                                    else {\n                                                        matchResult_4 = 1;\n                                                    }\n                                                }\n                                                else {\n                                                    matchResult_4 = 1;\n                                                }\n                                                switch (matchResult_4) {\n                                                    case 0: {\n                                                        let matchResult_5;\n                                                        if (DateParsing_$007CBetween$007C_$007C(0, 59, hour) != null) {\n                                                            if (DateParsing_$007CBetween$007C_$007C(0, 59, minute) != null) {\n                                                                matchResult_5 = 0;\n                                                            }\n                                                            else {\n                                                                matchResult_5 = 1;\n                                                            }\n                                                        }\n                                                        else {\n                                                            matchResult_5 = 1;\n                                                        }\n                                                        switch (matchResult_5) {\n                                                            case 0: {\n                                                                patternInput = [year_2, month_2, parsedDay, hour, minute];\n                                                                break;\n                                                            }\n                                                            default:\n                                                                patternInput = [-1, 1, 1, 0, 0];\n                                                        }\n                                                        break;\n                                                    }\n                                                    default:\n                                                        patternInput = [-1, 1, 1, 0, 0];\n                                                }\n                                                break;\n                                            }\n                                            default:\n                                                patternInput = [-1, 1, 1, 0, 0];\n                                        }\n                                    }\n                                    else {\n                                        patternInput = [-1, 1, 1, 0, 0];\n                                    }\n                                    break;\n                                }\n                                default:\n                                    patternInput = [-1, 1, 1, 0, 0];\n                            }\n                        }\n                    }\n                }\n            }\n            const year_3 = patternInput[0] | 0;\n            const month_3 = patternInput[1] | 0;\n            const minute_1 = patternInput[4] | 0;\n            const hour_1 = patternInput[3] | 0;\n            const day_2 = patternInput[2] | 0;\n            return (year_3 <= 0) ? void 0 : ((month_3 === 2) ? ((DateParsing_$007CBetween$007C_$007C(1, 29, day_2) != null) ? (DateParsing_isLeapYear(year_3) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 2) ? ((DateParsing_$007CBetween$007C_$007C(1, 28, day_2) != null) ? (!DateParsing_isLeapYear(year_3) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 1) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 3) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 5) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 7) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 8) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 10) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 12) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0)))))))))))) : ((month_3 === 1) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 3) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 5) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 7) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 8) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 10) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 12) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0)))))))))))) : ((month_3 === 1) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 3) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 5) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 7) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 8) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 10) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 12) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))))))))))) : ((month_3 === 2) ? ((DateParsing_$007CBetween$007C_$007C(1, 28, day_2) != null) ? (!DateParsing_isLeapYear(year_3) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 1) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 3) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 5) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 7) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 8) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 10) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 12) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0)))))))))))) : ((month_3 === 1) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 3) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 5) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 7) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 8) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 10) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 12) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0)))))))))))) : ((month_3 === 1) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 3) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 5) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 7) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 8) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 10) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 12) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))))))))))) : ((month_3 === 2) ? ((DateParsing_$007CBetween$007C_$007C(1, 28, day_2) != null) ? (!DateParsing_isLeapYear(year_3) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 1) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 3) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 5) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 7) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 8) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 10) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 12) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0)))))))))))) : ((month_3 === 1) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 3) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 5) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 7) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 8) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 10) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 12) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0)))))))))))) : ((month_3 === 1) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 3) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 5) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 7) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 8) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 10) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 12) ? ((DateParsing_$007CBetween$007C_$007C(1, 31, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0))))) : ((month_3 === 4) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 6) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 9) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : ((month_3 === 11) ? ((DateParsing_$007CBetween$007C_$007C(1, 30, day_2) != null) ? create(year_3, month_3, day_2, hour_1, minute_1, 0) : void 0) : void 0)))))))))))));\n        }\n    }\n    catch (matchValue_4) {\n        return void 0;\n    }\n}\n\nexport const Interop_reactApi = react;\n\n","import { useLayoutEffectWithDeps, useLayoutEffect, useEffectWithDeps, useEffect, useDebugValue } from \"./ReactInterop.js\";\nimport { class_type } from \"../fable-library.4.9.0/Reflection.js\";\nimport { iterate } from \"../fable-library.4.9.0/Seq.js\";\nimport { unwrap, some, map, defaultArg, toArray } from \"../fable-library.4.9.0/Option.js\";\nimport { Interop_reactApi } from \"./Interop.fs.js\";\nimport { disposeSafe, defaultOf, curry2, uncurry2 } from \"../fable-library.4.9.0/Util.js\";\nimport { useState } from \"react\";\nimport * as react from \"react\";\n\nexport const ReactInterop_useDebugValueWithFormatter = useDebugValue;\n\nexport const ReactInterop_useEffect = useEffect;\n\nexport const ReactInterop_useEffectWithDeps = useEffectWithDeps;\n\nexport const ReactInterop_useLayoutEffect = useLayoutEffect;\n\nexport const ReactInterop_useLayoutEffectWithDeps = useLayoutEffectWithDeps;\n\nexport class Internal {\n    constructor() {\n    }\n}\n\nexport function Internal_$reflection() {\n    return class_type(\"Feliz.Internal\", void 0, Internal);\n}\n\nexport function Internal_$ctor() {\n    return new Internal();\n}\n\n\nexport function Internal_functionComponent_Z45822769(renderElement, name, withKey) {\n    iterate((name_1) => {\n        renderElement.displayName = name_1;\n    }, toArray(name));\n    return (props) => {\n        const props_2 = Internal_propsWithKey(withKey, props);\n        return Interop_reactApi.createElement(renderElement, props_2);\n    };\n}\n\nexport function Internal_memo_Z1716C242(renderElement, name, areEqual, withKey) {\n    const memoElementType = Interop_reactApi.memo(renderElement, uncurry2(defaultArg(map(curry2, areEqual), defaultOf())));\n    iterate((name_1) => {\n        renderElement.displayName = name_1;\n    }, toArray(name));\n    return (props) => {\n        const props_2 = Internal_propsWithKey(withKey, props);\n        return Interop_reactApi.createElement(memoElementType, props_2);\n    };\n}\n\nexport function Internal_propsWithKey(withKey, props) {\n    if (withKey == null) {\n        return props;\n    }\n    else {\n        const f = withKey;\n        props.key = f(props);\n        return props;\n    }\n}\n\nexport class React {\n    constructor() {\n    }\n}\n\nexport function React_$reflection() {\n    return class_type(\"Feliz.React\", void 0, React);\n}\n\n/**\n * Creates a disposable instance by providing the implementation of the dispose member.\n */\nexport function React_createDisposable_3A5B6456(dispose) {\n    return {\n        Dispose() {\n            dispose();\n        },\n    };\n}\n\n/**\n * The `useState` hook that creates a state variable for React function components from an initialization function.\n */\nexport function useReact_useState_FCFD9EF(initializer) {\n    return Interop_reactApi.useState(initializer);\n}\n\n/**\n * Accepts a reducer and returns the current state paired with a dispatch.\n */\nexport function useReact_useReducer_2B9E6EA0(update, initialState) {\n    const arg = update;\n    return Interop_reactApi.useReducer(arg, initialState);\n}\n\n/**\n * The `useEffect` hook that creates a disposable effect for React function components.\n * This effect has no dependencies which means the effect is re-executed on every re-render.\n * To make the effect run once (for example you subscribe once to web sockets) then provide an empty array\n * for the dependencies: `React.useEffect(disposableEffect, [| |])`.\n */\nexport function useReact_useEffect_Z5ECA432F(effect) {\n    ReactInterop_useEffect(effect);\n}\n\n/**\n * The `useEffect` hook that creates a disposable effect for React function components.\n * This effect takes an array of *dependencies*.\n * Whenever any of these dependencies change, the effect is re-executed. To execute the effect only once,\n * you have to explicitly provide an empty array for the dependencies: `React.useEffect(effect, [| |])`.\n */\nexport function useReact_useEffect_7331F961(effect, dependencies) {\n    ReactInterop_useEffectWithDeps(effect, dependencies);\n}\n\n/**\n * The `useLayoutEffect` hook that creates a disposable effect for React function components.\n * This effect has no dependencies which means the effect is re-executed on every re-render.\n * To make the effect run once (for example you subscribe once to web sockets) then provide an empty array\n * for the dependencies: `React.useLayoutEffect(disposableEffect, [| |])`.\n * The signature is identical to useEffect, but it fires synchronously after all DOM mutations. Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside useLayoutEffect will be flushed synchronously, before the browser has a chance to paint.\n */\nexport function useReact_useLayoutEffect_Z5ECA432F(effect) {\n    ReactInterop_useLayoutEffect(effect);\n}\n\n/**\n * The `useLayoutEffect` hook that creates a disposable effect for React function components.\n * This effect takes an array of *dependencies*.\n * Whenever any of these dependencies change, the effect is re-executed. To execute the effect only once,\n * you have to explicitly provide an empty array for the dependencies: `React.useLayoutEffect(effect, [| |])`.\n * The signature is identical to useEffect, but it fires synchronously after all DOM mutations. Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside useLayoutEffect will be flushed synchronously, before the browser has a chance to paint.\n */\nexport function useReact_useLayoutEffect_7331F961(effect, dependencies) {\n    ReactInterop_useLayoutEffectWithDeps(effect, dependencies);\n}\n\n/**\n * The signature is identical to useEffect, but it fires synchronously after all DOM mutations. Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside useLayoutEffect will be flushed synchronously, before the browser has a chance to paint.\n * This effect is executed on every (re)render\n */\nexport function useReact_useLayoutEffect_3A5B6456(effect) {\n    ReactInterop_useLayoutEffect((_arg) => {\n        effect();\n        return React_createDisposable_3A5B6456(() => {\n        });\n    });\n}\n\n/**\n * The signature is identical to useEffect, but it fires synchronously after all DOM mutations. Use this to read layout from the DOM and synchronously re-render. Updates scheduled inside useLayoutEffect will be flushed synchronously, before the browser has a chance to paint.\n */\nexport function useReact_useLayoutEffect_311B4086(effect, dependencies) {\n    ReactInterop_useLayoutEffectWithDeps((_arg) => {\n        effect();\n        return React_createDisposable_3A5B6456(() => {\n        });\n    }, dependencies);\n}\n\n/**\n * React hook to define and use an effect only once when a function component renders for the first time.\n * This is an alias for `React.useEffect(effect, [| |])` which explicitly provides an empty array for the dependencies of the effect which means the effect will only run once.\n */\nexport function useReact_useEffectOnce_3A5B6456(effect) {\n    const calledOnce = Interop_reactApi.useRef(false);\n    useReact_useEffect_311B4086(() => {\n        if (calledOnce.current) {\n        }\n        else {\n            calledOnce.current = true;\n            effect();\n        }\n    }, []);\n}\n\n/**\n * React hook to define and use a disposable effect only once when a function component renders for the first time.\n * This is an alias for `React.useEffect(effect, [| |])` which explicitly provides an empty array for the dependencies of the effect which means the effect will only run once.\n */\nexport function useReact_useEffectOnce_Z5ECA432F(effect) {\n    const destroyFunc = Interop_reactApi.useRef(void 0);\n    const calledOnce = Interop_reactApi.useRef(false);\n    const renderAfterCalled = Interop_reactApi.useRef(false);\n    if (calledOnce.current) {\n        renderAfterCalled.current = true;\n    }\n    useReact_useEffect_7331F961(() => {\n        let disposeOption;\n        if (calledOnce.current) {\n            disposeOption = void 0;\n        }\n        else {\n            calledOnce.current = true;\n            destroyFunc.current = some(effect());\n            disposeOption = (renderAfterCalled.current ? destroyFunc.current : void 0);\n        }\n        return {\n            Dispose() {\n                iterate((d) => {\n                    let copyOfStruct = d;\n                    disposeSafe(copyOfStruct);\n                }, toArray(disposeOption));\n            },\n        };\n    }, []);\n}\n\n/**\n * React hook to define and use a disposable effect only once when a function component renders for the first time.\n * This is an alias for `React.useEffect(effect, [| |])` which explicitly provide an empty array for the dependencies of the effect which means the effect will only run once.\n */\nexport function useReact_useEffectOnce_69320292(effect) {\n    const destroyFunc = Interop_reactApi.useRef(void 0);\n    const calledOnce = Interop_reactApi.useRef(false);\n    const renderAfterCalled = Interop_reactApi.useRef(false);\n    if (calledOnce.current) {\n        renderAfterCalled.current = true;\n    }\n    useReact_useEffect_7331F961(() => {\n        let disposeOption;\n        if (calledOnce.current) {\n            disposeOption = void 0;\n        }\n        else {\n            calledOnce.current = true;\n            destroyFunc.current = effect();\n            disposeOption = (renderAfterCalled.current ? destroyFunc.current : void 0);\n        }\n        return {\n            Dispose() {\n                iterate((d) => {\n                    let copyOfStruct = d;\n                    disposeSafe(copyOfStruct);\n                }, toArray(disposeOption));\n            },\n        };\n    }, []);\n}\n\n/**\n * The `useEffect` hook that creates an effect for React function components.\n * This effect is executed *every time* the function component re-renders.\n * \n * To make the effect run only once, write: `React.useEffect(effect, [| |])` which explicitly states\n * that this effect has no dependencies and should only run once on initial render.\n */\nexport function useReact_useEffect_3A5B6456(effect) {\n    ReactInterop_useEffect((_arg) => {\n        effect();\n        return React_createDisposable_3A5B6456(() => {\n        });\n    });\n}\n\n/**\n * The `useEffect` hook that creates an effect for React function components. This effect takes an array of *dependencies*.\n * Whenever any of these dependencies change, the effect is re-executed. To execute the effect only once,\n * you have to explicitly provide an empty array for the dependencies: `React.useEffect(effect, [| |])`.\n */\nexport function useReact_useEffect_311B4086(effect, dependencies) {\n    ReactInterop_useEffectWithDeps((_arg) => {\n        effect();\n        return React_createDisposable_3A5B6456(() => {\n        });\n    }, dependencies);\n}\n\n/**\n * Can be used to display a label for custom hooks in React DevTools.\n */\nexport function useReact_useDebugValue_Z721C83C5(value) {\n    ReactInterop_useDebugValueWithFormatter(value, (x) => x);\n}\n\n/**\n * Can be used to display a label for custom hooks in React DevTools.\n */\nexport function useReact_useDebugValue_77A55D6D(value, formatter) {\n    ReactInterop_useDebugValueWithFormatter(value, formatter);\n}\n\n/**\n * The `useCallback` hook. Returns a memoized callback. Pass an inline callback and an array of dependencies.\n * `useCallback` will return a memoized version of the callback that only changes if one of the dependencies has changed.\n */\nexport function useReact_useCallback_1CA17B65(callbackFunction, dependencies) {\n    const dependencies_1 = defaultArg(dependencies, []);\n    return Interop_reactApi.useCallback(callbackFunction, dependencies_1);\n}\n\n/**\n * Returns a mutable ref object whose .current property is initialized to the passed argument (initialValue). The returned object will persist for the full lifetime of the component.\n * \n * Essentially, useRef is like a container that can hold a mutable value in its .current property.\n */\nexport function useReact_useRef_1505(initialValue) {\n    return Interop_reactApi.useRef(initialValue);\n}\n\n/**\n * A specialized version of React.useRef() that creates a reference to an input element.\n * \n * Useful for controlling the internal properties and methods of that element, for example to enable focus().\n */\nexport function useReact_useInputRef() {\n    return useReact_useRef_1505(void 0);\n}\n\n/**\n * A specialized version of React.useRef() that creates a reference to a button element.\n */\nexport function useReact_useButtonRef() {\n    return useReact_useRef_1505(void 0);\n}\n\n/**\n * A specialized version of React.useRef() that creates a reference to a generic HTML element.\n * \n * Useful for controlling the internal properties and methods of that element, for integration with third-party libraries that require a Html element.\n */\nexport function useReact_useElementRef() {\n    return useReact_useRef_1505(void 0);\n}\n\n/**\n * The `useMemo` hook. Returns a memoized value. Pass a \"create\" function and an array of dependencies.\n * `useMemo` will only recompute the memoized value when one of the dependencies has changed.\n */\nexport function useReact_useMemo_10C6A43C(createFunction, dependencies) {\n    const dependencies_1 = defaultArg(dependencies, []);\n    return Interop_reactApi.useMemo(createFunction, dependencies_1);\n}\n\n/**\n * Creates a React function component from a function that accepts a \"props\" object and renders a result.\n * A component key can be provided in the props object, or a custom `withKey` function can be provided.\n */\nexport function React_functionComponent_Z336EF691(render, withKey) {\n    return Internal_functionComponent_Z45822769(render, void 0, unwrap(withKey));\n}\n\n/**\n * Creates a React function component from a function that accepts a \"props\" object and renders a result.\n * A component key can be provided in the props object, or a custom `withKey` function can be provided.\n */\nexport function React_functionComponent_50AC6514(name, render, withKey) {\n    return Internal_functionComponent_Z45822769(render, name, unwrap(withKey));\n}\n\n/**\n * Creates a React function component from a function that accepts a \"props\" object and renders a result.\n * A component key can be provided in the props object, or a custom `withKey` function can be provided.\n */\nexport function React_functionComponent_Z552AB1C(render, withKey) {\n    return Internal_functionComponent_Z45822769((arg) => {\n        const xs = render(arg);\n        return react.createElement(react.Fragment, {}, ...xs);\n    }, void 0, unwrap(withKey));\n}\n\n/**\n * Creates a React function component from a function that accepts a \"props\" object and renders a result.\n * A component key can be provided in the props object, or a custom `withKey` function can be provided.\n */\nexport function React_functionComponent_Z32EE5C21(name, render, withKey) {\n    return Internal_functionComponent_Z45822769((arg) => {\n        const xs = render(arg);\n        return react.createElement(react.Fragment, {}, ...xs);\n    }, name, unwrap(withKey));\n}\n\n/**\n * `React.memo` memoizes the result of a function component. Given the same props, React will skip rendering the component, and reuse the last rendered result.\n * By default it will only shallowly compare complex objects in the props object. For more control, a custom `areEqual` function can be provided.\n * A component key can be provided in the props object, or a custom `withKey` function can be provided.\n */\nexport function React_memo_Z71E4ACFA(render, withKey, areEqual) {\n    return Internal_memo_Z1716C242(render, void 0, unwrap(areEqual), unwrap(withKey));\n}\n\n/**\n * `React.memo` memoizes the result of a function component. Given the same props, React will skip rendering the component, and reuse the last rendered result.\n * By default it will only shallowly compare complex objects in the props object. For more control, a custom `areEqual` function can be provided.\n * A component key can be provided in the props object, or a custom `withKey` function can be provided.\n */\nexport function React_memo_Z496F9C23(name, render, withKey, areEqual) {\n    return Internal_memo_Z1716C242(render, name, unwrap(areEqual), unwrap(withKey));\n}\n\n/**\n * `React.memo` memoizes the result of a function component. Given the same props, React will skip rendering the component, and reuse the last rendered result.\n * By default it will only shallowly compare complex objects in the props object. For more control, a custom `areEqual` function can be provided.\n * A component key can be provided in the props object, or a custom `withKey` function can be provided.\n */\nexport function React_memo_Z7F016AD3(render, withKey, areEqual) {\n    return Internal_memo_Z1716C242((arg) => {\n        const xs = render(arg);\n        return react.createElement(react.Fragment, {}, ...xs);\n    }, void 0, unwrap(areEqual), unwrap(withKey));\n}\n\n/**\n * `React.memo` memoizes the result of a function component. Given the same props, React will skip rendering the component, and reuse the last rendered result.\n * By default it will only shallowly compare complex objects in the props object. For more control, a custom `areEqual` function can be provided.\n * A component key can be provided in the props object, or a custom `withKey` function can be provided.\n */\nexport function React_memo_Z4010840A(name, render, withKey, areEqual) {\n    return Internal_memo_Z1716C242((arg) => {\n        const xs = render(arg);\n        return react.createElement(react.Fragment, {}, ...xs);\n    }, name, unwrap(areEqual), unwrap(withKey));\n}\n\n/**\n * Creates a Context object. When React renders a component that subscribes to this Context object\n * it will read the current context value from the closest matching Provider above it in the tree.\n */\nexport function React_createContext_Z10F951C2(name, defaultValue) {\n    const contextObject = Interop_reactApi.createContext(defaultArg(defaultValue, void 0));\n    iterate((name_1) => {\n        contextObject.displayName = name_1;\n    }, toArray(name));\n    return contextObject;\n}\n\n/**\n * A Provider component that allows consuming components to subscribe to context changes.\n */\nexport function React_contextProvider_34D9BBBD(contextObject, contextValue, child) {\n    return Interop_reactApi.createElement(contextObject.Provider, {\n        value: contextValue,\n    }, child);\n}\n\n/**\n * A Provider component that allows consuming components to subscribe to context changes.\n */\nexport function React_contextProvider_138D2F56(contextObject, contextValue, children) {\n    return Interop_reactApi.createElement(contextObject.Provider, {\n        value: contextValue,\n    }, ...children);\n}\n\n/**\n * A Consumer component that subscribes to context changes.\n */\nexport function React_contextConsumer_Z68910595(contextObject, render) {\n    return Interop_reactApi.createElement(contextObject.Consumer, defaultOf(), render);\n}\n\n/**\n * A Consumer component that subscribes to context changes.\n */\nexport function React_contextConsumer_56D53A40(contextObject, render) {\n    return Interop_reactApi.createElement(contextObject.Consumer, defaultOf(), (arg) => {\n        const xs = render(arg);\n        return react.createElement(react.Fragment, {}, ...xs);\n    });\n}\n\n/**\n * The `useContext` hook. Accepts a context object (the value returned from React.createContext) and returns the current context value for that context.\n * The current context value is determined by the value prop of the nearest Provider component above the calling component in the tree.\n */\nexport function useReact_useContext_37FA55CF(contextObject) {\n    return Interop_reactApi.useContext(contextObject);\n}\n\n/**\n * Creates a callback that keeps the same reference during the entire lifecycle of the component while having access to\n * the current value of the dependencies on every call.\n * \n * This hook should only be used for (like a dispatch) functions that are not used to provide information during render.\n * \n * This is not a complete replacement for the `useCallback` hook. It returns a callback that does not need explicit\n * dependency declarations and never causes a re-render.\n */\nexport function useReact_useCallbackRef_7C4B0DD6(callback) {\n    const lastRenderCallbackRef = useReact_useRef_1505(callback);\n    const callbackRef = useReact_useCallback_1CA17B65((arg) => lastRenderCallbackRef.current(arg), []);\n    useReact_useLayoutEffect_3A5B6456(() => {\n        lastRenderCallbackRef.current = callback;\n    });\n    return callbackRef;\n}\n\nexport const React_useStateWithUpdater_1505 = useState;\n\n/**\n * Forwards a given ref, allowing you to pass it further down to a child.\n */\nexport function React_forwardRef_3790D881(render) {\n    const forwardRefType = Interop_reactApi.forwardRef((props, ref) => render([props, ref]));\n    return (tupledArg) => {\n        const propsObj = Object.assign({}, tupledArg[0]);\n        propsObj.ref = tupledArg[1];\n        return Interop_reactApi.createElement(forwardRefType, propsObj);\n    };\n}\n\n/**\n * Forwards a given ref, allowing you to pass it further down to a child.\n */\nexport function React_forwardRef_7DC3DB1A(name, render) {\n    const forwardRefType = Interop_reactApi.forwardRef((props, ref) => render([props, ref]));\n    render.displayName = name;\n    return (tupledArg) => {\n        const propsObj = Object.assign({}, tupledArg[0]);\n        propsObj.ref = tupledArg[1];\n        return Interop_reactApi.createElement(forwardRefType, propsObj);\n    };\n}\n\n/**\n * Highlights potential problems in an application by enabling additional checks\n * and warnings for descendants. As well as double rendering function components.\n * \n * This *does not do anything* in production mode. You do not need to hide it\n * with compiler directives.\n */\nexport function React_strictMode_1FEFDAB5(children) {\n    return Interop_reactApi.createElement(Interop_reactApi.StrictMode, void 0, ...children);\n}\n\n/**\n * Lets you define a component that is loaded dynamically. Which helps with code splitting.\n */\nexport function React_lazy$0027_4712D3AE(dynamicImport, props) {\n    return Interop_reactApi.createElement(Interop_reactApi.lazy(() => dynamicImport), props);\n}\n\n/**\n * Lets you define a component that is loaded dynamically. Which helps with code\n * splitting.\n */\nexport function React_lazy$0027_Z3D8450FC(dynamicImport, props) {\n    return Interop_reactApi.createElement(Interop_reactApi.lazy(dynamicImport), props);\n}\n\n/**\n * Lets you specify a loading indicator whenever a child element is not yet ready\n * to render.\n * \n * Currently this is only usable with `React.lazy'`.\n */\nexport function React_suspense_1FEFDAB5(children) {\n    let o;\n    return Interop_reactApi.createElement(Interop_reactApi.Suspense, (o = {\n        fallback: defaultOf(),\n    }, Object.assign({}, o)), ...children);\n}\n\n/**\n * Lets you specify a loading indicator whenever a child element is not yet ready\n * to render.\n * \n * Currently this is only usable with `React.lazy'`.\n */\nexport function React_suspense_36DAE502(children, fallback) {\n    let o;\n    return Interop_reactApi.createElement(Interop_reactApi.Suspense, (o = {\n        fallback: fallback,\n    }, Object.assign({}, o)), ...children);\n}\n\n/**\n * Allows you to override the behavior of a given ref.\n */\nexport function useReact_useImperativeHandle_596DDC25(ref, createHandle) {\n    Interop_reactApi.useImperativeHandle(ref, createHandle);\n}\n\n/**\n * Lets you specify a loading indicator whenever a child element is not yet ready\n * to render.\n * \n * Currently this is only usable with `React.lazy'`.\n */\nexport function useReact_useImperativeHandle_33F5CF55(ref, createHandle, dependencies) {\n    Interop_reactApi.useImperativeHandle(ref, createHandle, dependencies);\n}\n\n/**\n * The `useState` hook that creates a state variable for React function components.\n */\nexport function useFeliz_React__React_useState_Static_1505(initial) {\n    return Interop_reactApi.useState(initial);\n}\n\nexport const Feliz_React__React_useStateWithUpdater_Static_FCFD9EF = useState;\n\n","import {\n    useEffect as useEffectReact,\n    useLayoutEffect as useLayoutEffectReact,\n    useDebugValue as useDebugValueReact } from 'react'\n\nexport const useEffect = getDisposable => {\n    useEffectReact(() => {\n        const disposable = getDisposable()\n        return () => {\n            disposable.Dispose();\n        }\n    })\n}\n\nexport const useEffectWithDeps = (getDisposable, deps) => {\n    useEffectReact(() => {\n        const disposable = getDisposable()\n        return () => {\n            disposable.Dispose();\n        }\n    }, deps)\n}\n\nexport const useLayoutEffect = getDisposable => {\n    useLayoutEffectReact(() => {\n        const disposable = getDisposable()\n        return () => {\n            disposable.Dispose();\n        }\n    })\n}\n\nexport const useLayoutEffectWithDeps = (getDisposable, deps) => {\n    useLayoutEffectReact(() => {\n        const disposable = getDisposable()\n        return () => {\n            disposable.Dispose();\n        }\n    }, deps)\n}\n\nexport const useDebugValue = (value, formatter) => useDebugValueReact(value, formatter)","import { split, trimEnd, isNullOrWhiteSpace, substring, join, endsWith } from \"../fable-library.4.9.0/String.js\";\nimport { ofArray, singleton, collect, head, empty, tail, isEmpty, reverse, map } from \"../fable-library.4.9.0/List.js\";\nimport { equalsWith } from \"../fable-library.4.9.0/Array.js\";\nimport { defaultOf } from \"../fable-library.4.9.0/Util.js\";\nimport { useReact_useEffectOnce_3A5B6456, React_createDisposable_3A5B6456, useReact_useEffectOnce_Z5ECA432F, useReact_useCallbackRef_7C4B0DD6, React_memo_Z71E4ACFA } from \"../Feliz.2.7.0/React.fs.js\";\nimport { defaultArg } from \"../fable-library.4.9.0/Option.js\";\nimport { defaultOf as defaultOf_1 } from \"../fable-library.4.9.0/Util.js\";\nimport { tryParse } from \"../fable-library.4.9.0/Int32.js\";\nimport { FSharpRef } from \"../fable-library.4.9.0/Types.js\";\nimport { tryParse as tryParse_1 } from \"../fable-library.4.9.0/Long.js\";\nimport { tryParse as tryParse_2 } from \"../fable-library.4.9.0/Guid.js\";\nimport { tryParse as tryParse_3 } from \"../fable-library.4.9.0/Double.js\";\nimport { tryParse as tryParse_4 } from \"../fable-library.4.9.0/Decimal.js\";\nimport Decimal from \"../fable-library.4.9.0/Decimal.js\";\nimport { map as map_1, delay, toList } from \"../fable-library.4.9.0/Seq.js\";\n\nexport function RouterModule_String_$007CPrefix$007C(prefix, str) {\n    if (str.indexOf(prefix) === 0) {\n        return str;\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function RouterModule_String_$007CSuffix$007C(suffix, str) {\n    if (endsWith(str, suffix)) {\n        return str;\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function RouterModule_encodeQueryString(queryStringPairs) {\n    const _arg = join(\"&\", map((tupledArg) => join(\"=\", [encodeURIComponent(tupledArg[0]), encodeURIComponent(tupledArg[1])]), queryStringPairs));\n    if (_arg === \"\") {\n        return \"\";\n    }\n    else {\n        return \"?\" + _arg;\n    }\n}\n\nexport function RouterModule_encodeQueryStringInts(queryStringIntPairs) {\n    const _arg = join(\"&\", map((tupledArg) => join(\"=\", [encodeURIComponent(tupledArg[0]), tupledArg[1]]), queryStringIntPairs));\n    if (_arg === \"\") {\n        return \"\";\n    }\n    else {\n        return \"?\" + _arg;\n    }\n}\n\nfunction RouterModule_normalizeRoute(routeMode) {\n    if (routeMode === 1) {\n        return (_arg) => {\n            let activePatternResult, path, activePatternResult_1, path_1, activePatternResult_2, path_2;\n            return (activePatternResult = RouterModule_String_$007CPrefix$007C(\"/\", _arg), (activePatternResult != null) ? ((path = activePatternResult, \"#\" + path)) : ((activePatternResult_1 = RouterModule_String_$007CPrefix$007C(\"#/\", _arg), (activePatternResult_1 != null) ? ((path_1 = activePatternResult_1, path_1)) : ((activePatternResult_2 = RouterModule_String_$007CPrefix$007C(\"#\", _arg), (activePatternResult_2 != null) ? ((path_2 = activePatternResult_2, \"#/\" + substring(path_2, 1, path_2.length - 1))) : (\"#/\" + _arg))))));\n        };\n    }\n    else {\n        return (_arg_1) => {\n            let activePatternResult_3, path_4;\n            return (activePatternResult_3 = RouterModule_String_$007CPrefix$007C(\"/\", _arg_1), (activePatternResult_3 != null) ? ((path_4 = activePatternResult_3, path_4)) : (\"/\" + _arg_1));\n        };\n    }\n}\n\nexport function RouterModule_encodeParts(xs, routeMode) {\n    return RouterModule_normalizeRoute(routeMode)(join(\"/\", map((part) => {\n        if (((part.indexOf(\"?\") >= 0) ? true : (part.indexOf(\"#\") === 0)) ? true : (part.indexOf(\"/\") === 0)) {\n            return part;\n        }\n        else {\n            return encodeURIComponent(part);\n        }\n    }, xs)));\n}\n\n/**\n * Safely returns tuple of list items without last one and last item\n */\nexport function RouterModule_trySeparateLast(xs) {\n    const matchValue = reverse(xs);\n    if (!isEmpty(matchValue)) {\n        if (isEmpty(tail(matchValue))) {\n            return [empty(), head(matchValue)];\n        }\n        else {\n            return [reverse(tail(matchValue)), head(matchValue)];\n        }\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function RouterModule_nav(xs, mode, routeMode) {\n    if (mode === 1) {\n        history.pushState(void 0, \"\", RouterModule_encodeParts(xs, routeMode));\n    }\n    else {\n        history.replaceState(void 0, \"\", RouterModule_encodeParts(xs, routeMode));\n    }\n    const ev = document.createEvent(\"CustomEvent\");\n    ev.initEvent(\"CUSTOM_NAVIGATION_EVENT\", true, true);\n    window.dispatchEvent(ev);\n}\n\n/**\n * Parses the URL into multiple path segments\n */\nexport function RouterModule_urlSegments(path, mode) {\n    return collect((segment) => {\n        if (isNullOrWhiteSpace(segment)) {\n            return empty();\n        }\n        else {\n            const segment_1 = trimEnd(segment, \"#\");\n            if (segment_1 === \"?\") {\n                return empty();\n            }\n            else if (RouterModule_String_$007CPrefix$007C(\"?\", segment_1) != null) {\n                return singleton(segment_1);\n            }\n            else {\n                const matchValue = segment_1.split(\"?\");\n                if (!equalsWith((x, y) => (x === y), matchValue, defaultOf()) && (matchValue.length === 1)) {\n                    const value = matchValue[0];\n                    return singleton(decodeURIComponent(value));\n                }\n                else if (!equalsWith((x_1, y_1) => (x_1 === y_1), matchValue, defaultOf()) && (matchValue.length === 2)) {\n                    if (matchValue[1] === \"\") {\n                        const value_1 = matchValue[0];\n                        return singleton(decodeURIComponent(value_1));\n                    }\n                    else {\n                        const value_2 = matchValue[0];\n                        const query = matchValue[1];\n                        return ofArray([decodeURIComponent(value_2), \"?\" + query]);\n                    }\n                }\n                else {\n                    return empty();\n                }\n            }\n        }\n    }, ofArray(split((RouterModule_String_$007CPrefix$007C(\"#\", path) != null) ? substring(path, 1, path.length - 1) : ((mode === 1) ? ((RouterModule_String_$007CSuffix$007C(\"#\", path) != null) ? \"\" : ((RouterModule_String_$007CSuffix$007C(\"#/\", path) != null) ? \"\" : path)) : path), [\"/\"], void 0, 0)));\n}\n\nexport function RouterModule_onUrlChange(routeMode, urlChanged, ev) {\n    return urlChanged(RouterModule_urlSegments((routeMode === 2) ? (window.location.pathname + window.location.search) : window.location.hash, routeMode));\n}\n\nexport const RouterModule_router = React_memo_Z71E4ACFA((input) => {\n    const onChange = useReact_useCallbackRef_7C4B0DD6((ev) => {\n        const urlChanged = defaultArg(input.onUrlChanged, (value) => {\n        });\n        RouterModule_onUrlChange(defaultArg(input.hashMode, 1), urlChanged, ev);\n    });\n    useReact_useEffectOnce_Z5ECA432F(() => {\n        if (((window.navigator.userAgent).indexOf(\"Trident\") >= 0) ? true : ((window.navigator.userAgent).indexOf(\"MSIE\") >= 0)) {\n            window.addEventListener(\"hashchange\", onChange);\n        }\n        else {\n            window.addEventListener(\"popstate\", onChange);\n        }\n        window.addEventListener(\"CUSTOM_NAVIGATION_EVENT\", onChange);\n        return React_createDisposable_3A5B6456(() => {\n            if (((window.navigator.userAgent).indexOf(\"Trident\") >= 0) ? true : ((window.navigator.userAgent).indexOf(\"MSIE\") >= 0)) {\n                window.removeEventListener(\"hashchange\", onChange);\n            }\n            else {\n                window.removeEventListener(\"popstate\", onChange);\n            }\n            window.removeEventListener(\"CUSTOM_NAVIGATION_EVENT\", onChange);\n        });\n    });\n    useReact_useEffectOnce_3A5B6456(() => {\n        const ev_1 = document.createEvent(\"CustomEvent\");\n        ev_1.initEvent(\"CUSTOM_NAVIGATION_EVENT\", true, true);\n        window.dispatchEvent(ev_1);\n    });\n    const matchValue = input.application;\n    return (matchValue == null) ? defaultOf_1() : matchValue;\n});\n\nexport function Route_$007CInt$007C_$007C(input) {\n    let matchValue;\n    let outArg = 0;\n    matchValue = [tryParse(input, 511, false, 32, new FSharpRef(() => outArg, (v) => {\n        outArg = (v | 0);\n    })), outArg];\n    if (matchValue[0]) {\n        return matchValue[1];\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function Route_$007CInt64$007C_$007C(input) {\n    let matchValue;\n    let outArg = 0n;\n    matchValue = [tryParse_1(input, 511, false, 64, new FSharpRef(() => outArg, (v) => {\n        outArg = v;\n    })), outArg];\n    if (matchValue[0]) {\n        return matchValue[1];\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function Route_$007CGuid$007C_$007C(input) {\n    let matchValue;\n    let outArg = \"00000000-0000-0000-0000-000000000000\";\n    matchValue = [tryParse_2(input, new FSharpRef(() => outArg, (v) => {\n        outArg = v;\n    })), outArg];\n    if (matchValue[0]) {\n        return matchValue[1];\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function Route_$007CNumber$007C_$007C(input) {\n    let matchValue;\n    let outArg = 0;\n    matchValue = [tryParse_3(input, new FSharpRef(() => outArg, (v) => {\n        outArg = v;\n    })), outArg];\n    if (matchValue[0]) {\n        return matchValue[1];\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function Route_$007CDecimal$007C_$007C(input) {\n    let matchValue;\n    let outArg = new Decimal(\"0\");\n    matchValue = [tryParse_4(input, new FSharpRef(() => outArg, (v) => {\n        outArg = v;\n    })), outArg];\n    if (matchValue[0]) {\n        return matchValue[1];\n    }\n    else {\n        return void 0;\n    }\n}\n\nexport function Route_$007CBool$007C_$007C(input) {\n    const matchValue = input.toLocaleLowerCase();\n    switch (matchValue) {\n        case \"1\":\n        case \"true\":\n            return true;\n        case \"0\":\n        case \"false\":\n            return false;\n        case \"\":\n            return true;\n        default:\n            return void 0;\n    }\n}\n\n/**\n * Used to parse the query string parameter of the route.\n * \n * For example to match against\n * \n * `/users?id={value}`\n * \n * You can pattern match:\n * \n * `[ \"users\"; Route.Query [ \"id\", value ] ] -> value`\n * \n * When `{value}` is an integer then you can pattern match:\n * \n * `[ \"users\"; Route.Query [ \"id\", Route.Int userId ] ] -> userId`\n */\nexport function Route_$007CQuery$007C_$007C(input) {\n    try {\n        const urlParams = new URLSearchParams(input);\n        return toList(delay(() => map_1((entry) => [entry[0], entry[1]], urlParams.entries())));\n    }\n    catch (matchValue) {\n        return void 0;\n    }\n}\n\n","import { Union } from \"./fable_modules/fable-library.4.9.0/Types.js\";\nimport { union_type } from \"./fable_modules/fable-library.4.9.0/Reflection.js\";\nimport { append, singleton, empty, tail, head, isEmpty } from \"./fable_modules/fable-library.4.9.0/List.js\";\nimport { RouterModule_trySeparateLast, RouterModule_encodeQueryString, RouterModule_nav } from \"./fable_modules/Feliz.Router.4.0.0/Router.fs.js\";\nimport { map, defaultArgWith } from \"./fable_modules/fable-library.4.9.0/Option.js\";\nimport { Cmd_ofEffect } from \"./fable_modules/Fable.Elmish.4.1.0/cmd.fs.js\";\n\nexport class Page extends Union {\n    constructor(tag, fields) {\n        super();\n        this.tag = tag;\n        this.fields = fields;\n    }\n    cases() {\n        return [\"Install\", \"Use\", \"DateRange\"];\n    }\n}\n\nexport function Page_$reflection() {\n    return union_type(\"Docs.Router.Page\", [], Page, () => [[], [], []]);\n}\n\nexport const PageModule_defaultPage = new Page(0, []);\n\nexport function PageModule_parseFromUrlSegments(_arg) {\n    let matchResult;\n    if (isEmpty(_arg)) {\n        matchResult = 2;\n    }\n    else {\n        switch (head(_arg)) {\n            case \"use\": {\n                if (isEmpty(tail(_arg))) {\n                    matchResult = 0;\n                }\n                else {\n                    matchResult = 3;\n                }\n                break;\n            }\n            case \"DateRange\": {\n                if (isEmpty(tail(_arg))) {\n                    matchResult = 1;\n                }\n                else {\n                    matchResult = 3;\n                }\n                break;\n            }\n            default:\n                matchResult = 3;\n        }\n    }\n    switch (matchResult) {\n        case 0:\n            return new Page(1, []);\n        case 1:\n            return new Page(2, []);\n        case 2:\n            return new Page(0, []);\n        default:\n            return PageModule_defaultPage;\n    }\n}\n\nexport function PageModule_noQueryString(segments) {\n    return [segments, empty()];\n}\n\nexport function PageModule_toUrlSegments(_arg) {\n    switch (_arg.tag) {\n        case 2:\n            return PageModule_noQueryString(singleton(\"DateRange\"));\n        case 1:\n            return PageModule_noQueryString(singleton(\"use\"));\n        default:\n            return PageModule_noQueryString(empty());\n    }\n}\n\nexport function Router_goToUrl(e) {\n    e.preventDefault();\n    RouterModule_nav(singleton(e.currentTarget.attributes.href.value), 1, 1);\n}\n\nexport function Router_navigatePage(p) {\n    const tupledArg = PageModule_toUrlSegments(p);\n    const queryString = tupledArg[1];\n    defaultArgWith(map((tupledArg_1) => {\n        RouterModule_nav(append(tupledArg_1[0], singleton(tupledArg_1[1] + RouterModule_encodeQueryString(queryString))), 1, 1);\n    }, RouterModule_trySeparateLast(tupledArg[0])), () => {\n        RouterModule_nav(singleton(RouterModule_encodeQueryString(queryString)), 1, 1);\n    });\n}\n\nexport function Cmd_navigatePage(p) {\n    const tupledArg = PageModule_toUrlSegments(p);\n    return Cmd_ofEffect((_arg_1) => {\n        const queryString_1 = tupledArg[1];\n        defaultArgWith(map((tupledArg_1) => {\n            RouterModule_nav(append(tupledArg_1[0], singleton(tupledArg_1[1] + RouterModule_encodeQueryString(queryString_1))), 1, 1);\n        }, RouterModule_trySeparateLast(tupledArg[0])), () => {\n            RouterModule_nav(singleton(RouterModule_encodeQueryString(queryString_1)), 1, 1);\n        });\n    });\n}\n\n","import { reverse, empty, cons, fold } from \"../fable-library.4.9.0/List.js\";\nimport { toString } from \"../fable-library.4.9.0/Types.js\";\nimport { join } from \"../fable-library.4.9.0/String.js\";\n\nexport function Helpers_extractClasses(xs) {\n    return fold((tupledArg, x) => {\n        const classes = tupledArg[0];\n        const props = tupledArg[1];\n        const matchValue = x;\n        if (matchValue[0] === \"className\") {\n            return [cons(toString(matchValue[1]), classes), props];\n        }\n        else {\n            return [classes, cons(x, props)];\n        }\n    }, [empty(), empty()], reverse(xs));\n}\n\nexport function Helpers_combineClasses(cn, xs) {\n    const tupledArg = Helpers_extractClasses(xs);\n    return cons([\"className\", join(\" \", cons(cn, tupledArg[0]))], tupledArg[1]);\n}\n\n","import { empty, singleton, append, delay, toList, mapIndexed } from \"./fable_modules/fable-library.4.9.0/Seq.js\";\nimport { createElement } from \"react\";\nimport { int32ToString, createObj } from \"./fable_modules/fable-library.4.9.0/Util.js\";\nimport { Interop_reactApi } from \"./fable_modules/Feliz.2.7.0/Interop.fs.js\";\nimport { printf, toText, split } from \"./fable_modules/fable-library.4.9.0/String.js\";\nimport { ofArray, singleton as singleton_1 } from \"./fable_modules/fable-library.4.9.0/List.js\";\nimport { Helpers_combineClasses } from \"./fable_modules/Feliz.DaisyUI.4.2.0/DaisyUI.fs.js\";\n\nexport function linedMockupCode(code) {\n    const children = mapIndexed((i, l) => createElement(\"pre\", createObj(toList(delay(() => append(singleton([\"data-prefix\", int32ToString(i + 1)]), delay(() => append((l.indexOf(\"// \") >= 0) ? singleton([\"className\", \"text-warning\"]) : empty(), delay(() => {\n        let elems;\n        return singleton((elems = [createElement(\"code\", {\n            children: [l],\n        })], [\"children\", Interop_reactApi.Children.toArray(Array.from(elems))]));\n    })))))))), split(code, [\"\\n\"], void 0, 0));\n    return createElement(\"div\", {\n        className: \"mockup-code\",\n        children: Interop_reactApi.Children.toArray(Array.from(children)),\n    });\n}\n\nexport function codedView(title, code, example) {\n    let elm_4, elm_6;\n    const elm = ofArray([createElement(\"div\", {\n        className: \"description\",\n        children: Interop_reactApi.Children.toArray([title]),\n    }), (elm_4 = ofArray([(elm_6 = singleton_1(linedMockupCode(code)), createElement(\"div\", {\n        className: \"grid flex-1 h-full\",\n        children: Interop_reactApi.Children.toArray(Array.from(elm_6)),\n    })), createElement(\"div\", createObj(Helpers_combineClasses(\"divider\", ofArray([[\"className\", \"divider-horizontal\"], [\"children\", \"👉\"], [\"className\", \"text-neutral\"], [\"className\", \"after:bg-opacity-30 before:bg-opacity-30\"]])))), createElement(\"div\", {\n        className: \"grid flex-1\",\n        children: Interop_reactApi.Children.toArray([example]),\n    })]), createElement(\"div\", {\n        className: \"flex flex-row w-full\",\n        children: Interop_reactApi.Children.toArray(Array.from(elm_4)),\n    }))]);\n    return createElement(\"div\", {\n        className: \"mb-10\",\n        children: Interop_reactApi.Children.toArray(Array.from(elm)),\n    });\n}\n\nexport function codedWithPictureView(title, code, imageScr) {\n    let elm_4, elm_6, elm_8;\n    const elm = ofArray([createElement(\"div\", {\n        className: \"description\",\n        children: Interop_reactApi.Children.toArray([title]),\n    }), (elm_4 = ofArray([(elm_6 = singleton_1(linedMockupCode(code)), createElement(\"div\", {\n        className: \"grid flex-1 h-full\",\n        children: Interop_reactApi.Children.toArray(Array.from(elm_6)),\n    })), createElement(\"div\", createObj(Helpers_combineClasses(\"divider\", ofArray([[\"className\", \"divider-horizontal\"], [\"children\", \"👉\"], [\"className\", \"text-neutral\"], [\"className\", \"after:bg-opacity-30 before:bg-opacity-30\"]])))), (elm_8 = singleton_1(createElement(\"img\", {\n        src: imageScr,\n    })), createElement(\"div\", {\n        className: \"grid flex-1\",\n        children: Interop_reactApi.Children.toArray(Array.from(elm_8)),\n    }))]), createElement(\"div\", {\n        className: \"flex flex-row w-full\",\n        children: Interop_reactApi.Children.toArray(Array.from(elm_4)),\n    }))]);\n    return createElement(\"div\", {\n        className: \"mb-10\",\n        children: Interop_reactApi.Children.toArray(Array.from(elm)),\n    });\n}\n\nexport function codedWithTextExampleView(title, code, example) {\n    let elm_4, elm_6, elm_8;\n    const elm = ofArray([createElement(\"div\", {\n        className: \"description\",\n        children: Interop_reactApi.Children.toArray([title]),\n    }), (elm_4 = ofArray([(elm_6 = singleton_1(linedMockupCode(code)), createElement(\"div\", {\n        className: \"grid flex-1 h-full\",\n        children: Interop_reactApi.Children.toArray(Array.from(elm_6)),\n    })), createElement(\"div\", createObj(Helpers_combineClasses(\"divider\", ofArray([[\"className\", \"divider-horizontal\"], [\"children\", \"👉\"], [\"className\", \"text-neutral\"], [\"className\", \"after:bg-opacity-30 before:bg-opacity-30\"]])))), (elm_8 = singleton_1(linedMockupCode(example)), createElement(\"div\", {\n        className: \"grid flex-1 h-full\",\n        children: Interop_reactApi.Children.toArray(Array.from(elm_8)),\n    }))]), createElement(\"div\", {\n        className: \"flex flex-row w-full\",\n        children: Interop_reactApi.Children.toArray(Array.from(elm_4)),\n    }))]);\n    return createElement(\"div\", {\n        className: \"mb-10\",\n        children: Interop_reactApi.Children.toArray(Array.from(elm)),\n    });\n}\n\nexport function codedNoExampleView(title, code) {\n    let elm_4, elm_6;\n    const elm = ofArray([createElement(\"div\", {\n        className: \"description\",\n        children: Interop_reactApi.Children.toArray([title]),\n    }), (elm_4 = singleton_1((elm_6 = singleton_1(linedMockupCode(code)), createElement(\"div\", {\n        className: \"grid flex-1 h-full\",\n        children: Interop_reactApi.Children.toArray(Array.from(elm_6)),\n    }))), createElement(\"div\", {\n        className: \"flex flex-row w-full\",\n        children: Interop_reactApi.Children.toArray(Array.from(elm_4)),\n    }))]);\n    return createElement(\"div\", {\n        className: \"mb-10\",\n        children: Interop_reactApi.Children.toArray(Array.from(elm)),\n    });\n}\n\nexport function fixDocsView(fileName, client) {\n    const children = singleton_1(createElement(\"a\", {\n        href: toText(printf(\"https://github.com/tforkmann/Feliz.DateRange/blob/main/src/Docs/views/Feliz.DateRange/%s.fs\"))(fileName),\n        children: (\"Fix docs file \" + fileName) + \" here\",\n    }));\n    return createElement(\"div\", {\n        children: Interop_reactApi.Children.toArray(Array.from(children)),\n    });\n}\n\n","import { createElement } from \"react\";\nimport React from \"react\";\nimport * as react from \"react\";\nimport { Interop_reactApi } from \"../fable_modules/Feliz.2.7.0/Interop.fs.js\";\nimport { linedMockupCode } from \"../SharedView.js\";\nimport { ofArray, singleton } from \"../fable_modules/fable-library.4.9.0/List.js\";\n\nexport function UseView() {\n    let elm_2, elm_4;\n    const xs_4 = [createElement(\"div\", {\n        className: \"description\",\n        children: Interop_reactApi.Children.toArray([\"After installation just open proper namespace:\"]),\n    }), (elm_2 = singleton(linedMockupCode(\"open Feliz.DateRange\")), createElement(\"div\", {\n        className: \"max-w-xl\",\n        children: Interop_reactApi.Children.toArray(Array.from(elm_2)),\n    })), (elm_4 = ofArray([\"Now you can start using library. Everything important starts with \", createElement(\"code\", {\n        className: \"code\",\n        children: \"DateRange.*\",\n    }), \" module.\"]), createElement(\"div\", {\n        className: \"description\",\n        children: Interop_reactApi.Children.toArray(Array.from(elm_4)),\n    }))];\n    return react.createElement(react.Fragment, {}, ...xs_4);\n}\n\n","/**\n * DateTimeOffset functions.\n *\n * Note: DateOffset instances are always DateObjects in local\n * timezone (because JS dates are all kinds of messed up).\n * A local date returns UTC epoch when `.getTime()` is called.\n *\n * However, this means that in order to construct an UTC date\n * from a DateOffset with offset of +5 hours, you first need\n * to subtract those 5 hours, than add the \"local\" offset.\n * As said, all kinds of messed up.\n *\n * Basically; invariant: date.getTime() always return UTC time.\n */\nimport { fromFloat64, toFloat64 } from \"./BigInt.js\";\nimport DateTime, { create as createDate, dateOffsetToString, daysInMonth, parseRaw, ticksToUnixEpochMilliseconds, unixEpochMillisecondsToTicks } from \"./Date.js\";\nimport { compareDates, padWithZeros } from \"./Util.js\";\nexport default function DateTimeOffset(value, offset) {\n    checkOffsetInRange(offset);\n    const d = new Date(value);\n    d.offset = offset != null ? offset : new Date().getTimezoneOffset() * -60000;\n    return d;\n}\nexport function offset(value) {\n    return value.offset || 0;\n}\nfunction checkOffsetInRange(offset) {\n    if (offset != null && offset !== 0) {\n        if (offset % 60000 !== 0) {\n            throw new Error(\"Offset must be specified in whole minutes.\");\n        }\n        if (Math.abs(offset / 3600000) > 14) {\n            throw new Error(\"Offset must be within plus or minus 14 hours.\");\n        }\n    }\n}\nexport function fromDate(date, offset) {\n    let offset2 = 0;\n    switch (date.kind) {\n        case 1 /* DateKind.UTC */:\n            if (offset != null && offset !== 0) {\n                throw new Error(\"The UTC Offset for Utc DateTime instances must be 0.\");\n            }\n            offset2 = 0;\n            break;\n        case 2 /* DateKind.Local */:\n            offset2 = date.getTimezoneOffset() * -60000;\n            if (offset != null && offset !== offset2) {\n                throw new Error(\"The UTC Offset of the local dateTime parameter does not match the offset argument.\");\n            }\n            break;\n        case 0 /* DateKind.Unspecified */:\n        default:\n            if (offset == null) {\n                offset2 = date.getTimezoneOffset() * -60000;\n            }\n            else {\n                offset2 = offset;\n            }\n            break;\n    }\n    return DateTimeOffset(date.getTime(), offset2);\n}\nexport function fromTicks(ticks, offset) {\n    const ms = ticksToUnixEpochMilliseconds(ticks) - offset;\n    return DateTimeOffset(ms, offset);\n}\nexport function fromUnixTimeMilliseconds(ms) {\n    return DateTimeOffset(toFloat64(ms), 0);\n}\nexport function fromUnixTimeSeconds(seconds) {\n    return DateTimeOffset(toFloat64(seconds * 1000n), 0);\n}\nexport function getUtcTicks(date) {\n    return unixEpochMillisecondsToTicks(date.getTime(), 0);\n}\nexport function minValue() {\n    // This is \"0001-01-01T00:00:00.000Z\", actual JS min value is -8640000000000000\n    return DateTimeOffset(-62135596800000, 0);\n}\nexport function maxValue() {\n    // This is \"9999-12-31T23:59:59.999Z\", actual JS max value is 8640000000000000\n    return DateTimeOffset(253402300799999, 0);\n}\nexport function parse(str) {\n    const [date, offsetMatch] = parseRaw(str);\n    const offset = offsetMatch == null\n        ? date.getTimezoneOffset() * -60000\n        : (offsetMatch === \"Z\" ? 0 : offsetMatch * 60000);\n    return DateTimeOffset(date.getTime(), offset);\n}\nexport function tryParse(v, defValue) {\n    try {\n        defValue.contents = parse(v);\n        return true;\n    }\n    catch (_err) {\n        return false;\n    }\n}\nexport function create(year, month, day, h, m, s, ms, offset) {\n    if (offset == null) {\n        offset = ms;\n        ms = 0;\n    }\n    checkOffsetInRange(offset);\n    let date;\n    if (offset === 0) {\n        date = new Date(Date.UTC(year, month - 1, day, h, m, s, ms));\n        if (year <= 99) {\n            date.setUTCFullYear(year, month - 1, day);\n        }\n    }\n    else {\n        const str = padWithZeros(year, 4) + \"-\" +\n            padWithZeros(month, 2) + \"-\" +\n            padWithZeros(day, 2) + \"T\" +\n            padWithZeros(h, 2) + \":\" +\n            padWithZeros(m, 2) + \":\" +\n            padWithZeros(s, 2) + \".\" +\n            padWithZeros(ms, 3) +\n            dateOffsetToString(offset);\n        date = new Date(str);\n    }\n    const dateValue = date.getTime();\n    if (isNaN(dateValue)) {\n        throw new Error(\"The parameters describe an unrepresentable Date\");\n    }\n    return DateTimeOffset(dateValue, offset);\n}\nexport function now() {\n    const date = new Date();\n    const offset = date.getTimezoneOffset() * -60000;\n    return DateTimeOffset(date.getTime(), offset);\n}\nexport function utcNow() {\n    const date = now();\n    return DateTimeOffset(date.getTime(), 0);\n}\nexport function toUniversalTime(date) {\n    return DateTime(date.getTime(), 1 /* DateKind.UTC */);\n}\nexport function toLocalTime(date) {\n    return DateTime(date.getTime(), 2 /* DateKind.Local */);\n}\nexport function timeOfDay(d) {\n    const d2 = new Date(d.getTime() + (d.offset ?? 0));\n    return d2.getUTCHours() * 3600000\n        + d2.getUTCMinutes() * 60000\n        + d2.getUTCSeconds() * 1000\n        + d2.getUTCMilliseconds();\n}\nexport function date(d) {\n    const d2 = new Date(d.getTime() + (d.offset ?? 0));\n    return createDate(d2.getUTCFullYear(), d2.getUTCMonth() + 1, d2.getUTCDate(), 0, 0, 0, 0);\n}\nexport function day(d) {\n    return new Date(d.getTime() + (d.offset ?? 0)).getUTCDate();\n}\nexport function hour(d) {\n    return new Date(d.getTime() + (d.offset ?? 0)).getUTCHours();\n}\nexport function millisecond(d) {\n    return new Date(d.getTime() + (d.offset ?? 0)).getUTCMilliseconds();\n}\nexport function minute(d) {\n    return new Date(d.getTime() + (d.offset ?? 0)).getUTCMinutes();\n}\nexport function month(d) {\n    return new Date(d.getTime() + (d.offset ?? 0)).getUTCMonth() + 1;\n}\nexport function second(d) {\n    return new Date(d.getTime() + (d.offset ?? 0)).getUTCSeconds();\n}\nexport function year(d) {\n    return new Date(d.getTime() + (d.offset ?? 0)).getUTCFullYear();\n}\nexport function dayOfWeek(d) {\n    return new Date(d.getTime() + (d.offset ?? 0)).getUTCDay();\n}\nexport function dayOfYear(d) {\n    const d2 = new Date(d.getTime() + (d.offset ?? 0));\n    const _year = d2.getUTCFullYear();\n    const _month = d2.getUTCMonth() + 1;\n    let _day = d2.getUTCDate();\n    for (let i = 1; i < _month; i++) {\n        _day += daysInMonth(_year, i);\n    }\n    return _day;\n}\nexport function add(d, ts) {\n    return DateTimeOffset(d.getTime() + ts, (d.offset ?? 0));\n}\nexport function addDays(d, v) {\n    return add(d, v * 86400000);\n}\nexport function addHours(d, v) {\n    return add(d, v * 3600000);\n}\nexport function addMinutes(d, v) {\n    return add(d, v * 60000);\n}\nexport function addSeconds(d, v) {\n    return add(d, v * 1000);\n}\nexport function addMilliseconds(d, v) {\n    return add(d, v);\n}\nexport function addTicks(d, v) {\n    return add(d, toFloat64(v / 10000n));\n}\nexport function addYears(d, v) {\n    const newMonth = d.getUTCMonth() + 1;\n    const newYear = d.getUTCFullYear() + v;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, d.getUTCDate());\n    return create(newYear, newMonth, newDay, d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds(), (d.offset ?? 0));\n}\nexport function addMonths(d, v) {\n    const d2 = new Date(d.getTime() + (d.offset ?? 0));\n    let newMonth = d2.getUTCMonth() + 1 + v;\n    let newMonth_ = 0;\n    let yearOffset = 0;\n    if (newMonth > 12) {\n        newMonth_ = newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12);\n        newMonth = newMonth_;\n    }\n    else if (newMonth < 1) {\n        newMonth_ = 12 + newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12) + (newMonth_ === 12 ? -1 : 0);\n        newMonth = newMonth_;\n    }\n    const newYear = d2.getUTCFullYear() + yearOffset;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, d2.getUTCDate());\n    return create(newYear, newMonth, newDay, d2.getUTCHours(), d2.getUTCMinutes(), d2.getUTCSeconds(), d2.getUTCMilliseconds(), (d.offset ?? 0));\n}\nexport function subtract(d, that) {\n    return typeof that === \"number\"\n        ? DateTimeOffset(d.getTime() - that, (d.offset ?? 0))\n        : d.getTime() - that.getTime();\n}\nexport function equals(d1, d2) {\n    return d1.getTime() === d2.getTime();\n}\nexport function equalsExact(d1, d2) {\n    return d1.getTime() === d2.getTime() && d1.offset === d2.offset;\n}\nexport function compare(d1, d2) {\n    return compareDates(d1, d2);\n}\nexport const compareTo = compare;\nexport function op_Addition(x, y) {\n    return add(x, y);\n}\nexport function op_Subtraction(x, y) {\n    return subtract(x, y);\n}\nexport function toOffset(d, offset) {\n    return DateTimeOffset(d.getTime(), offset);\n}\nexport function toUnixTimeMilliseconds(d) {\n    return fromFloat64(d.getTime());\n}\nexport function toUnixTimeSeconds(d) {\n    return fromFloat64(d.getTime() / 1000.0);\n}\n","import { DateRangePicker as DateRangePicker_1 } from \"react-date-range\";\n\nexport const DateRangePicker = DateRangePicker_1;\n\n","import { ProgramModule_map, ProgramModule_withSetState, ProgramModule_runWith, ProgramModule_init } from \"../Fable.Elmish.4.1.0/program.fs.js\";\nimport { clear, getEnumerator, equals, disposeSafe, uncurry2, uncurry3, isDisposable } from \"../fable-library.4.9.0/Util.js\";\nimport { Cmd_none } from \"../Fable.Elmish.4.1.0/cmd.fs.js\";\nimport { class_type } from \"../fable-library.4.9.0/Reflection.js\";\nimport { useEffect, useState } from \"react\";\nimport { useSyncExternalStore } from \"use-sync-external-store/shim\";\n\nclass Util_ElmishState$3 {\n    constructor(program, arg, dependencies) {\n        this.arg = arg;\n        this.dependencies = dependencies;\n        const program_1 = program();\n        const queuedMessages = [];\n        this.finalDispatch = void 0;\n        let patternInput_1;\n        const patternInput = ProgramModule_init(program_1)(this.arg);\n        let model = patternInput[0];\n        let cmd = patternInput[1];\n        patternInput_1 = [[model, (msg) => {\n            const matchValue = this.finalDispatch;\n            if (matchValue == null) {\n                void (queuedMessages.push(msg));\n            }\n            else {\n                matchValue(msg);\n            }\n        }, false, queuedMessages], cmd];\n        this.state = patternInput_1[0];\n        this.cmd = patternInput_1[1];\n        this.subscribe = ((callback) => {\n            let dispose = false;\n            const needsDispose = isDisposable(this.state[0]);\n            ProgramModule_runWith(this.arg, ProgramModule_withSetState((model_5, dispatch_1) => {\n                const patternInput_5 = this.state;\n                this.finalDispatch = dispatch_1;\n                this.state = [model_5, patternInput_5[1], true, queuedMessages];\n                if (!(model_5 === patternInput_5[0])) {\n                    callback();\n                }\n            }, ProgramModule_map((_init, _arg) => {\n                const cmd$0027 = this.cmd;\n                this.cmd = Cmd_none();\n                return [this.state[0], cmd$0027];\n            }, (update, msg_2, model_4) => update(msg_2)(this.state[0]), uncurry3((x) => x), uncurry3((x_1) => x_1), uncurry2((x_2) => x_2), (tupledArg) => [(msg_1) => (tupledArg[0](msg_1) ? true : (needsDispose && dispose)), (model_3) => {\n                const matchValue_2 = model_3;\n                if (isDisposable(matchValue_2)) {\n                    const disp = matchValue_2;\n                    disposeSafe(disp);\n                }\n                else {\n                    tupledArg[1](model_3);\n                }\n            }], program_1)));\n            return () => {\n                dispose = true;\n            };\n        });\n    }\n}\n\nfunction Util_ElmishState$3_$reflection(gen0, gen1, gen2) {\n    return class_type(\"Feliz.UseElmish.Util.ElmishState`3\", [gen0, gen1, gen2], Util_ElmishState$3);\n}\n\nfunction Util_ElmishState$3_$ctor_Z29FF63CF(program, arg, dependencies) {\n    return new Util_ElmishState$3(program, arg, dependencies);\n}\n\nfunction Util_ElmishState$3__get_State(_) {\n    return _.state;\n}\n\nfunction Util_ElmishState$3__get_Subscribe(_) {\n    return _.subscribe;\n}\n\nfunction Util_ElmishState$3__IsOutdated_1954DBC6(_, arg$0027, dependencies$0027) {\n    if (!equals(_.arg, arg$0027)) {\n        return true;\n    }\n    else {\n        return !equals(_.dependencies, dependencies$0027);\n    }\n}\n\nexport function React_useElmish_Z6C327F2E(program, arg, dependencies) {\n    const patternInput = useState(() => Util_ElmishState$3_$ctor_Z29FF63CF(program, arg, dependencies));\n    const state = patternInput[0];\n    if (Util_ElmishState$3__IsOutdated_1954DBC6(state, arg, dependencies)) {\n        patternInput[1](Util_ElmishState$3_$ctor_Z29FF63CF(program, arg, dependencies));\n    }\n    const patternInput_1 = useSyncExternalStore(Util_ElmishState$3__get_Subscribe(state), () => Util_ElmishState$3__get_State(state));\n    const subscribed = patternInput_1[2];\n    const queuedMessages = patternInput_1[3];\n    const dispatch = patternInput_1[1];\n    useEffect(() => {\n        if (subscribed && (queuedMessages.length > 0)) {\n            let enumerator = getEnumerator(queuedMessages);\n            try {\n                while (enumerator[\"System.Collections.IEnumerator.MoveNext\"]()) {\n                    const msg = enumerator[\"System.Collections.Generic.IEnumerator`1.get_Current\"]();\n                    setTimeout(() => {\n                        dispatch(msg);\n                    });\n                }\n            }\n            finally {\n                disposeSafe(enumerator);\n            }\n            clear(queuedMessages);\n        }\n    }, [subscribed, queuedMessages]);\n    return [patternInput_1[0], dispatch];\n}\n\n","import { Record, Union } from \"../fable_modules/fable-library.4.9.0/Types.js\";\nimport { record_type, union_type, class_type } from \"../fable_modules/fable-library.4.9.0/Reflection.js\";\nimport { fromDate, create } from \"../fable_modules/fable-library.4.9.0/DateOffset.js\";\nimport { Cmd_none } from \"../fable_modules/Fable.Elmish.4.1.0/cmd.fs.js\";\nimport { createElement } from \"react\";\nimport React from \"react\";\nimport { addMonths, now as now_1 } from \"../fable_modules/fable-library.4.9.0/Date.js\";\nimport { de } from \"date-fns/locale\";\nimport { startOfDay, endOfDay, differenceInCalendarDays, addDays, endOfMonth, startOfMonth } from \"date-fns\";\nimport { op_UnaryNegation_Int32 } from \"../fable_modules/fable-library.4.9.0/Int32.js\";\nimport { Interop_reactApi } from \"../fable_modules/Feliz.2.7.0/Interop.fs.js\";\nimport { DateRangePicker as DateRangePicker_1 } from \"../fable_modules/Feliz.DateRange.0.1.2/Interop.fs.js\";\nimport { createObj } from \"../fable_modules/fable-library.4.9.0/Util.js\";\nimport { Interop_reactApi as Interop_reactApi_1 } from \"../fable_modules/Feliz.2.7.0/Interop.fs.js\";\nimport { singleton, ofArray } from \"../fable_modules/fable-library.4.9.0/List.js\";\nimport { React_useElmish_Z6C327F2E } from \"../fable_modules/Feliz.UseElmish.2.5.0/UseElmish.fs.js\";\nimport { ProgramModule_mkProgram } from \"../fable_modules/Fable.Elmish.4.1.0/program.fs.js\";\nimport { fixDocsView, codedView } from \"../SharedView.js\";\n\nexport class Msg extends Union {\n    constructor(tag, fields) {\n        super();\n        this.tag = tag;\n        this.fields = fields;\n    }\n    cases() {\n        return [\"SetStartDate\", \"SetEndDate\"];\n    }\n}\n\nexport function Msg_$reflection() {\n    return union_type(\"Docs.Pages.DateRangeView.Msg\", [], Msg, () => [[[\"Item\", class_type(\"System.DateTimeOffset\")]], [[\"Item\", class_type(\"System.DateTimeOffset\")]]]);\n}\n\nexport class State extends Record {\n    constructor(StartDate, EndDate) {\n        super();\n        this.StartDate = StartDate;\n        this.EndDate = EndDate;\n    }\n}\n\nexport function State_$reflection() {\n    return record_type(\"Docs.Pages.DateRangeView.State\", [], State, () => [[\"StartDate\", class_type(\"System.DateTimeOffset\")], [\"EndDate\", class_type(\"System.DateTimeOffset\")]]);\n}\n\nexport function init() {\n    return [new State(create(2019, 1, 1, 0, 0, 0, 0), create(2019, 1, 31, 0, 0, 0, 0)), Cmd_none()];\n}\n\nexport function update(msg, model) {\n    if (msg.tag === 1) {\n        return [new State(model.StartDate, msg.fields[0]), Cmd_none()];\n    }\n    else {\n        return [new State(msg.fields[0], model.EndDate), Cmd_none()];\n    }\n}\n\nexport function DateRangePicker(dateRangePickerInputProps) {\n    let locale;\n    const setEndDate = dateRangePickerInputProps.setEndDate;\n    const setStartDate = dateRangePickerInputProps.setStartDate;\n    const endDate = dateRangePickerInputProps.endDate;\n    const startDate = dateRangePickerInputProps.startDate;\n    const now = now_1();\n    const props_8 = [[\"months\", 2], [\"showSelectionPreview\", true], [\"moveRangeOnFirstSelection\", false], [\"direction\", \"horizontal\"], (locale = de, [\"locale\", locale]), [\"onChange\", (handler) => {\n        setStartDate(handler.range1.startDate);\n        setEndDate(handler.range1.endDate);\n    }], [\"ranges\", [{\n        startDate: startDate,\n        endDate: endDate,\n    }]], [\"staticRanges\", [{\n        label: \"Letzer Monat\",\n        range: () => {\n            const startDate_2 = fromDate(startOfMonth(addMonths(now, -1)));\n            return {\n                endDate: fromDate(endOfMonth(addMonths(now, -1))),\n                startDate: startDate_2,\n            };\n        },\n        hasCustomRendering: false,\n        isSelected: (range_1) => false,\n    }, {\n        label: \"Nächster Monat\",\n        range: () => {\n            const startDate_3 = fromDate(addDays(now, 1));\n            return {\n                endDate: fromDate(addDays(now, 30)),\n                startDate: startDate_3,\n            };\n        },\n        hasCustomRendering: false,\n        isSelected: (range_3) => false,\n    }]], [\"inputRanges\", [{\n        label: \"Tage bis heute\",\n        range: (v) => {\n            const startDate_4 = fromDate(addDays(now, op_UnaryNegation_Int32(v)));\n            return {\n                endDate: fromDate(now),\n                startDate: startDate_4,\n            };\n        },\n        getCurrentValue: (v_1) => differenceInCalendarDays(fromDate(endOfDay(now)), v_1.startDate),\n    }, {\n        label: \"Tage ab heute\",\n        range: (range_6) => {\n            const startDate_5 = fromDate(now);\n            return {\n                endDate: fromDate(addDays(now, range_6)),\n                startDate: startDate_5,\n            };\n        },\n        getCurrentValue: (range_8) => differenceInCalendarDays(range_8.endDate, fromDate(startOfDay(now))),\n    }]]];\n    return Interop_reactApi.createElement(DateRangePicker_1, createObj(props_8));\n}\n\nexport function DateRange(state, dispatch) {\n    let elems;\n    return createElement(\"div\", createObj(ofArray([[\"style\", {\n        height: 600,\n        width: 600,\n    }], (elems = [createElement(DateRangePicker, {\n        startDate: state.StartDate,\n        endDate: state.EndDate,\n        setStartDate: (date) => {\n            dispatch(new Msg(0, [date]));\n        },\n        setEndDate: (date_1) => {\n            dispatch(new Msg(1, [date_1]));\n        },\n    })], [\"children\", Interop_reactApi_1.Children.toArray(Array.from(elems))])])));\n}\n\nexport const code = \"\\n    DateRange.dateRangePicker [\\n        dateRangePicker.months 2\\n        dateRangePicker.showSelectionPreview true\\n        dateRangePicker.moveRangeOnFirstSelection false\\n        dateRangePicker.direction Direction.Horizontal\\n        dateRangePicker.locale DateTime.Locales.German\\n        dateRangePicker.onChange (fun handler ->\\n            setStartDate handler.range1.startDate\\n            setEndDate handler.range1.endDate)\\n        dateRangePicker.ranges [ dateRangePicker.range [ ranges.startDate startDate; ranges.endDate endDate ] ]\\n        dateRangePicker.staticRanges [|\\n            staticRanges.staticRange [\\n                staticRange.label \\\"Letzer Monat\\\"\\n                staticRange.range (fun _ -> {|\\n                    startDate = now.AddMonths(-1).StartOfMonth() |> DateTimeOffset\\n                    endDate = now.AddMonths(-1).EndOfMonth() |> DateTimeOffset\\n                |})\\n                staticRange.hasCustomRendering false\\n                staticRange.isSelected (fun range -> false)\\n            ]\\n            staticRanges.staticRange [\\n                staticRange.label \\\"Nächster Monat\\\"\\n                staticRange.range (fun _ -> {|\\n                    startDate = now.AddDays(1) |> DateTimeOffset\\n                    endDate = now.AddDays(30) |> DateTimeOffset\\n                |})\\n                staticRange.hasCustomRendering false\\n                staticRange.isSelected (fun range -> false)\\n            ]\\n        |]\\n        dateRangePicker.inputRanges [|\\n            inputRanges.inputRange [\\n                inputRange.label \\\"Tage bis heute\\\"\\n                inputRange.range (fun v -> {|\\n                    startDate = now.AddDays(-v) |> DateTimeOffset\\n                    endDate = now |> DateTimeOffset\\n                |})\\n                inputRange.getCurrentValue (fun v ->\\n                    ExternalDateFns.differenceInCalendarDays (now.EndOfDay() |> DateTimeOffset) v.startDate\\n                )\\n            ]\\n            inputRanges.inputRange [\\n                inputRange.label \\\"Tage ab heute\\\"\\n                inputRange.range (fun range -> {|\\n                    startDate = now |> DateTimeOffset\\n                    endDate = now.AddDays(range) |> DateTimeOffset\\n                |})\\n                inputRange.getCurrentValue (fun range ->\\n                    ExternalDateFns.differenceInCalendarDays range.endDate (now.StartOfDay() |> DateTimeOffset)\\n                )\\n            ]\\n        |]\\n    ]\\n    \";\n\nexport const title = \"DateRange\";\n\nexport function DateRangeView() {\n    let elms;\n    const patternInput = React_useElmish_Z6C327F2E(() => ProgramModule_mkProgram(init, update, (_arg, _arg_1) => {\n    }), void 0, []);\n    const children_1 = ofArray([(elms = singleton(codedView(title, code, DateRange(patternInput[0], patternInput[1]))), createElement(\"div\", {\n        className: \"content\",\n        children: Interop_reactApi_1.Children.toArray(Array.from(elms)),\n    })), fixDocsView(\"DateRange\", false)]);\n    return createElement(\"div\", {\n        children: Interop_reactApi_1.Children.toArray(Array.from(children_1)),\n    });\n}\n\n","import { createElement } from \"react\";\nimport React from \"react\";\nimport * as react from \"react\";\nimport { Interop_reactApi } from \"../fable_modules/Feliz.2.7.0/Interop.fs.js\";\nimport { createObj } from \"../fable_modules/fable-library.4.9.0/Util.js\";\nimport { singleton, ofArray } from \"../fable_modules/fable-library.4.9.0/List.js\";\n\nexport function InstallView() {\n    let elm_2, children, elems_2, elm_6, children_3, elems_6;\n    const xs_8 = [createElement(\"div\", {\n        className: \"description\",\n        children: Interop_reactApi.Children.toArray([\"Using NuGet package command\"]),\n    }), (elm_2 = singleton((children = singleton(createElement(\"pre\", createObj(ofArray([[\"data-prefix\", \"$\"], (elems_2 = [createElement(\"code\", {\n        children: [\"Install-Package Feliz.DateRange\"],\n    })], [\"children\", Interop_reactApi.Children.toArray(Array.from(elems_2))])])))), createElement(\"div\", {\n        className: \"mockup-code\",\n        children: Interop_reactApi.Children.toArray(Array.from(children)),\n    }))), createElement(\"div\", {\n        className: \"max-w-xl\",\n        children: Interop_reactApi.Children.toArray(Array.from(elm_2)),\n    })), createElement(\"div\", {\n        className: \"description\",\n        children: Interop_reactApi.Children.toArray([\"or Paket\"]),\n    }), (elm_6 = singleton((children_3 = singleton(createElement(\"pre\", createObj(ofArray([[\"data-prefix\", \"$\"], (elems_6 = [createElement(\"code\", {\n        children: [\"paket add Feliz.DateRange\"],\n    })], [\"children\", Interop_reactApi.Children.toArray(Array.from(elems_6))])])))), createElement(\"div\", {\n        className: \"mockup-code\",\n        children: Interop_reactApi.Children.toArray(Array.from(children_3)),\n    }))), createElement(\"div\", {\n        className: \"max-w-xl\",\n        children: Interop_reactApi.Children.toArray(Array.from(elm_6)),\n    }))];\n    return react.createElement(react.Fragment, {}, ...xs_8);\n}\n\n","import { Record, Union } from \"./fable_modules/fable-library.4.9.0/Types.js\";\nimport { Page, Router_goToUrl, PageModule_toUrlSegments, Cmd_navigatePage, PageModule_parseFromUrlSegments, Page_$reflection } from \"./Router.js\";\nimport { record_type, union_type, string_type } from \"./fable_modules/fable-library.4.9.0/Reflection.js\";\nimport { RouterModule_router, RouterModule_trySeparateLast, RouterModule_encodeQueryString, RouterModule_encodeParts, RouterModule_urlSegments } from \"./fable_modules/Feliz.Router.4.0.0/Router.fs.js\";\nimport { Cmd_none } from \"./fable_modules/Fable.Elmish.4.1.0/cmd.fs.js\";\nimport { createElement } from \"react\";\nimport React from \"react\";\nimport * as react from \"react\";\nimport { equals, createObj } from \"./fable_modules/fable-library.4.9.0/Util.js\";\nimport { Helpers_combineClasses } from \"./fable_modules/Feliz.DaisyUI.4.2.0/DaisyUI.fs.js\";\nimport { append as append_1, ofArray, singleton } from \"./fable_modules/fable-library.4.9.0/List.js\";\nimport { Interop_reactApi } from \"./fable_modules/Feliz.2.7.0/Interop.fs.js\";\nimport { op_PlusPlus } from \"./fable_modules/Feliz.DaisyUI.4.2.0/Operators.fs.js\";\nimport { empty, singleton as singleton_1, append, delay, toList } from \"./fable_modules/fable-library.4.9.0/Seq.js\";\nimport { map, defaultArgWith } from \"./fable_modules/fable-library.4.9.0/Option.js\";\nimport { UseView } from \"./Pages/Use.js\";\nimport { DateRangeView } from \"./Pages/DateRangeView.js\";\nimport { InstallView } from \"./Pages/Install.js\";\n\nexport class Msg extends Union {\n    constructor(tag, fields) {\n        super();\n        this.tag = tag;\n        this.fields = fields;\n    }\n    cases() {\n        return [\"UrlChanged\", \"SetTheme\"];\n    }\n}\n\nexport function Msg_$reflection() {\n    return union_type(\"Docs.View.Msg\", [], Msg, () => [[[\"Item\", Page_$reflection()]], [[\"Item\", string_type]]]);\n}\n\nexport class State extends Record {\n    constructor(Page, Theme) {\n        super();\n        this.Page = Page;\n        this.Theme = Theme;\n    }\n}\n\nexport function State_$reflection() {\n    return record_type(\"Docs.View.State\", [], State, () => [[\"Page\", Page_$reflection()], [\"Theme\", string_type]]);\n}\n\nexport function init() {\n    const nextPage = PageModule_parseFromUrlSegments(RouterModule_urlSegments(window.location.hash, 1));\n    return [new State(nextPage, \"light\"), Cmd_navigatePage(nextPage)];\n}\n\nexport function update(msg, state) {\n    if (msg.tag === 1) {\n        return [new State(state.Page, msg.fields[0]), Cmd_none()];\n    }\n    else {\n        return [new State(msg.fields[0], state.Theme), Cmd_none()];\n    }\n}\n\nfunction rightSide(state, dispatch, title, docLink, elm) {\n    let children_3, children_1, elm_1, elems_2, elements, elm_3;\n    const children_5 = ofArray([(children_3 = singleton((children_1 = singleton((elm_1 = singleton(createElement(\"label\", createObj(Helpers_combineClasses(\"btn\", ofArray([[\"className\", \"btn-square\"], [\"className\", \"btn-ghost\"], [\"htmlFor\", \"main-menu\"], (elems_2 = [createElement(\"svg\", createObj(ofArray([[\"viewBox\", (((((0 + \" \") + 0) + \" \") + 24) + \" \") + 24], [\"className\", \"inline-block w-6 h-6 stroke-current\"], (elements = singleton(createElement(\"path\", {\n        d: \"M4 6h16M4 12h16M4 18h16\",\n        strokeWidth: 2,\n    })), [\"children\", Interop_reactApi.Children.toArray(Array.from(elements))])])))], [\"children\", Interop_reactApi.Children.toArray(Array.from(elems_2))])]))))), createElement(\"div\", {\n        className: \"lg:hidden\",\n        children: Interop_reactApi.Children.toArray(Array.from(elm_1)),\n    }))), createElement(\"div\", {\n        className: \"navbar-start\",\n        children: Interop_reactApi.Children.toArray(Array.from(children_1)),\n    }))), createElement(\"div\", {\n        className: \"navbar\",\n        children: Interop_reactApi.Children.toArray(Array.from(children_3)),\n    })), (elm_3 = ofArray([createElement(\"h2\", createObj(ofArray([op_PlusPlus([\"className\", \"text-primary\"], [\"className\", \"my-6 text-5xl font-bold\"]), [\"children\", title]]))), elm]), createElement(\"div\", {\n        className: \"px-5 py-5\",\n        children: Interop_reactApi.Children.toArray(Array.from(elm_3)),\n    }))]);\n    return createElement(\"div\", {\n        className: \"drawer-content\",\n        children: Interop_reactApi.Children.toArray(Array.from(children_5)),\n    });\n}\n\nfunction leftSide(p) {\n    let elems_5, elm, elems_2, elems_4, children_5;\n    const mi = (t_1, mp_1) => {\n        const children_2 = singleton(createElement(\"a\", createObj(toList(delay(() => append(equals(p, mp_1) ? singleton_1([\"className\", \"active\"]) : empty(), delay(() => append(singleton_1([\"children\", t_1]), delay(() => {\n            let tupledArg_2, queryString_1;\n            return append(singleton_1([\"href\", (tupledArg_2 = PageModule_toUrlSegments(mp_1), (queryString_1 = tupledArg_2[1], defaultArgWith(map((tupledArg_3) => RouterModule_encodeParts(append_1(tupledArg_3[0], singleton(tupledArg_3[1] + RouterModule_encodeQueryString(queryString_1))), 1), RouterModule_trySeparateLast(tupledArg_2[0])), () => RouterModule_encodeParts(singleton(RouterModule_encodeQueryString(queryString_1)), 1))))]), delay(() => singleton_1([\"onClick\", (e_1) => {\n                Router_goToUrl(e_1);\n            }])));\n        })))))))));\n        return createElement(\"li\", {\n            children: Interop_reactApi.Children.toArray(Array.from(children_2)),\n        });\n    };\n    const children_8 = ofArray([createElement(\"label\", createObj(Helpers_combineClasses(\"drawer-overlay\", singleton([\"htmlFor\", \"main-menu\"])))), createElement(\"aside\", createObj(ofArray([[\"className\", \"flex flex-col border-r w-80 bg-base-100 text-base-content\"], (elems_5 = [(elm = ofArray([createElement(\"span\", {\n        className: \"text-primary\",\n        children: \"Feliz.DateRange\",\n    }), createElement(\"a\", createObj(ofArray([[\"href\", \"https://www.nuget.org/packages/Feliz.DateRange\"], (elems_2 = [createElement(\"img\", {\n        src: \"https://img.shields.io/nuget/v/Feliz.DateRange.svg?style=flat-square\",\n    })], [\"children\", Interop_reactApi.Children.toArray(Array.from(elems_2))])])))]), createElement(\"div\", {\n        className: \"inline-block text-3xl font-title px-5 py-5 font-bold\",\n        children: Interop_reactApi.Children.toArray(Array.from(elm)),\n    })), createElement(\"ul\", createObj(Helpers_combineClasses(\"menu\", ofArray([[\"className\", \"menu-md\"], [\"className\", \"flex flex-col p-4 pt-0\"], (elems_4 = [(children_5 = singleton(createElement(\"span\", {\n        children: [\"Docs\"],\n    })), createElement(\"li\", {\n        className: \"menu-title\",\n        children: Interop_reactApi.Children.toArray(Array.from(children_5)),\n    })), mi(\"Install\", new Page(0, [])), mi(\"Use\", new Page(1, [])), mi(\"DateRange\", new Page(2, []))], [\"children\", Interop_reactApi.Children.toArray(Array.from(elems_4))])]))))], [\"children\", Interop_reactApi.Children.toArray(Array.from(elems_5))])])))]);\n    return createElement(\"div\", {\n        className: \"drawer-side\",\n        children: Interop_reactApi.Children.toArray(Array.from(children_8)),\n    });\n}\n\nfunction inLayout(state, dispatch, title, docLink, p, elm) {\n    let elems_1, elems;\n    return createElement(\"div\", createObj(ofArray([[\"className\", \"bg-base-100 text-base-content h-screen\"], [\"data-theme\", state.Theme], (elems_1 = [createElement(\"div\", createObj(Helpers_combineClasses(\"drawer\", ofArray([[\"className\", \"lg:drawer-open\"], (elems = [createElement(\"input\", createObj(Helpers_combineClasses(\"drawer-toggle\", ofArray([[\"type\", \"checkbox\"], [\"id\", \"main-menu\"]])))), rightSide(state, dispatch, title, docLink, elm), leftSide(p)], [\"children\", Interop_reactApi.Children.toArray(Array.from(elems))])]))))], [\"children\", Interop_reactApi.Children.toArray(Array.from(elems_1))])])));\n}\n\nexport function AppView(appViewInputProps) {\n    let elements;\n    const dispatch = appViewInputProps.dispatch;\n    const state = appViewInputProps.state;\n    let patternInput;\n    const matchValue = state.Page;\n    patternInput = ((matchValue.tag === 1) ? [\"How to use\", \"/docs/use\", createElement(UseView, null)] : ((matchValue.tag === 2) ? [\"DateRange\", \"/DateRange\", createElement(DateRangeView, null)] : [\"Installation\", \"/docs/install\", createElement(InstallView, null)]));\n    return RouterModule_router(createObj(ofArray([[\"hashMode\", 1], [\"onUrlChanged\", (arg_1) => {\n        dispatch(new Msg(0, [PageModule_parseFromUrlSegments(arg_1)]));\n    }], (elements = singleton(inLayout(state, dispatch, patternInput[0], patternInput[1], state.Page, patternInput[2])), [\"application\", react.createElement(react.Fragment, {}, ...elements)])])));\n}\n\n","import { join } from \"../fable-library.4.9.0/String.js\";\nimport { ofArray, choose } from \"../fable-library.4.9.0/List.js\";\nimport { toString } from \"../fable-library.4.9.0/Types.js\";\n\nexport function op_PlusPlus(prop1, prop2) {\n    return [\"className\", join(\" \", choose((arg) => {\n        const _arg = arg;\n        if (_arg[0] === \"className\") {\n            return toString(_arg[1]);\n        }\n        else {\n            return void 0;\n        }\n    }, ofArray([prop1, prop2])))];\n}\n\n","import { ProgramModule_mkProgram, ProgramModule_run } from \"./fable_modules/Fable.Elmish.4.1.0/program.fs.js\";\nimport { Program_withReactSynchronous } from \"./fable_modules/Fable.Elmish.React.4.0.0/react.fs.js\";\nimport { AppView, update, init } from \"./View.js\";\nimport { createElement } from \"react\";\n\nProgramModule_run(Program_withReactSynchronous(\"safer-app\", ProgramModule_mkProgram(init, update, (state_1, dispatch) => createElement(AppView, {\n    state: state_1,\n    dispatch: dispatch,\n}))));\n\n"],"names":["x","Array","isArray","ArrayBuffer","isView","Dispose","sameConstructor","y","Object","getPrototypeOf","constructor","Symbol","iterator","Enumerator","iter","this","current","cur","next","value","done","Error","e","GetEnumerator","en","hasNext","undefined","padWithZeros","i","length","str","toString","date","date1","offset","kind","getTimezoneOffset","int32ToString","radix","ObjectRef","static","o","idMap","has","set","count","get","stringHash","s","h","len","charCodeAt","numberHash","combineHashCodes","hashes","h1","structuralHash","bigintHash","GetHashCode","isHashable","arrayHash","Date","getTime","dateHash","values","map","v","id","eq","equalArraysWith","Equals","isEquatable","xKeys","keys","yKeys","sort","equalObjects","xtime","ytime","compareArrays","comp","j","compareArraysWith","compare","CompareTo","isComparable","key","compareObjects","fields","obj","kv","WeakMap","curried","f","f2","a1","a2","uncurry3","a3","curry3","callStack","self","seqToString","cons","entries","k","join","name","String","Union","cases","tag","toJSON","concat","fieldStr","withParens","indexOf","unionToString","splice","other","Record","recordToJSON","recordToString","recordGetHashCode","thisNames","recordEquals","result","recordCompareTo","dateOffsetToString","isMinus","minutes","Math","abs","dateToHalfUTCString","half","toISOString","substring","dateToStringWithCustomFormat","format","utc","replace","match","rep","Number","NaN","getUTCFullYear","getFullYear","getUTCMonth","getMonth","getUTCDate","getDate","getUTCHours","getHours","getUTCMinutes","getMinutes","getUTCSeconds","getSeconds","getUTCMilliseconds","getMilliseconds","isNaN","d","addMonths","newMonth","month","newMonth_","yearOffset","floor","newYear","year","_daysInMonth","day","m","ms","UTC","setUTCFullYear","setFullYear","dateValue","min","hour","minute","second","millisecond","symbol","sd","toPrecision","dp","toExponential","BigInt","asUintN","toHex","fsFormatRegExp","printf","input","cont","lastIndex","strParts","matches","strIdx","exec","matchIndex","index","push","createPrinter","toText","arg","continuePrint","formatReplacement","flags","padLength","precision","sign","toLowerCase","isLessThan","multiply","parseInt","toFixed","toUpperCase","_provider","dateWithOffset","dateToISOStringWithOffset","dateToStringWithOffset","toUTCString","toLocaleString","toLocaleDateString","toLocaleTimeString","printOffset","dateToISOString","dateToStringWithKind","zeroFlag","minusFlag","ch","pad","_strParts","_matches","_result","padArg","args","slice","_padLength","delimiter","xs","from","isRight","splitters","options","removeEmpty","trim","filter","splits","reg","RegExp","findSplits","candidate","startIndex","substr","Some","opt","defaultValue","defThunk","mapping","target","targetIndex","start","fill","equals","array1","array2","length1","length2","head","tail","super","xs_1_mut","ys_1_mut","loop","xs_1","ys_1","matchValue","matchValue_1","xt","yt","i_mut","h_mut","t","c","ListEnumerator$1","it","_","FSharpList_get_Empty","FSharpList_Cons_305B8EAC","FSharpList__get_IsEmpty","FSharpList__get_Head","FSharpList__get_Tail","FSharpList__get_Length","res","folder","state","acc","action","unitVar","ofArrayWithTail","tail_1","ys","root","node","t_2","Enumerator_notStarted","Enumerator_alreadyFinished","Enumerator_Seq","Enumerator_FromFunctions$1","dispose","Enumerator_noReset","Enumerator_FromFunctions$1_$ctor_58C54629","Enumerator_generateWhileSome","openf","compute","closef","curr","started","x_1","finish","mkSeq","Enumerator_Seq_$ctor_673A07F2","argName","Operators_NullArg","generator","sources","outerOpt","innerOpt","finished","inner","outer","copyOfStruct","outerOpt_1","innerOpt_1","inner_1","outer_1","Enumerator_concat","ar","xs_3","enumerator","xs_5","ofSeq","generateIndexed","create","e_1","source","Enumerator_enumerateThenFinally","SetTreeLeaf$1","SetTreeLeaf$1_$ctor_2B595","SetTreeLeaf$1__get_Key","SetTreeNode$1","left","right","SetTreeNode$1_$ctor_5F465FC9","SetTreeNode$1__get_Left","SetTreeNode$1__get_Right","SetTreeNode$1__get_Height","SetTreeModule_countAux","t_mut","acc_mut","t2","tn","SetTreeModule_count","SetTreeModule_mk","l","r","tn_1","hl","hr","t2_1","SetTreeModule_rebalance","t1","t2_3","tn_2","t_3","t2_4","tn_3","t1h","t2h","t2_2","t2$0027","t2l","matchValue_2","t1$0027","matchValue_3","t1r","SetTreeModule_add","comparer","Compare","c_1","SetTreeModule_empty","SetTreeModule_mem","comparer_mut","k_mut","SetTreeModule_iter","f_mut","SetTreeModule_SetIterator$1","stack","SetTreeModule_collapseLHS","stack_mut","rest","x2","xn","SetTreeModule_mkIterator","SetTreeModule_current","SetTreeModule_alreadyFinished","SetTreeModule_notStarted","SetTreeModule_mkIEnumerator","SetTreeModule_moveNext","SetTreeModule_compare","l1_mut","l2_mut","SetTreeModule_compareStacks","l1","l2","x1_3","x2_3","x1n_2","x2n_2","matchResult","t1_6","x1_4","t2_6","x2_4","x1n_3","x2n_3","matchResult_1","t1_7","x1_5","t2_7","x2_5","x1n_4","x2n_4","c_3","x2n_5","c_2","matchResult_2","t1_8","x1_6","t2_8","x2_6","x1n_5","x2n_6","matchResult_3","t1_2","x1","x2_1","x1n","x2n","matchResult_4","t1_4","x1_2","x2_2","x1n_1","x2n_1","SetTreeModule_copyToArray","arr","SetTreeModule_ofArray","array","folder_1","reduce","fold","FSharpSet","tree","this$","FSharpSet__ComputeHashCode","that","that_1","FSharpSet__get_Comparer","FSharpSet__get_Tree","toStringTag","FSharpSet__get_Count","size","add","clear","delete","FSharpSet__Contains","forEach","thisArg","FSharpSet_$ctor","set$","FSharpSet_Empty","element","FSharpSet__Add","Sub_Internal_SubId_toString","subId","Sub_Internal_Fx_tryStop","onError","sub","ex","Sub_Internal_Fx_stop","subs","tupledArg","Sub_Internal_Fx_change","dispatch","dupes","toStop","toKeep","toStart","Sub_Internal_Fx_warnDupe","tupledArg_1","Sub_Internal_Fx_tryStart","Sub_Internal_NewSubs_calculate","Sub_Internal_NewSubs_update","newKeys","newSubs","reduceRight","delegateArg","delegateArg_1","foldBack","Sub_Internal_empty","Sub_Internal_diff","activeSubs","SetTreeModule_ofList","ie","e_mut","SetTreeModule_mkFromEnumerator","SetTreeModule_ofSeq","tuple","patternInput","patternInput_1","root2","root1","lacc","racc","t_4","t_5","Cmd_exec","cmd","call","integralRangeStep","step","stop","zero","stepFn","stepComparedWithZero","stepGreaterThanZero","comparedWithLast","makeRangeStepFunction","st_1","Enumerator_unfold","RingState$1","RingBuffer$1","RingBuffer$1__Pop","__","wix","rix","items","rix$0027","Program$4","init","update","subscribe","view","setState","termination","ProgramModule_mkProgram","_arg","model","f1","text","console","error","_arg_1","value_1","program","ProgramModule_runWithDispatch","syncDispatch","rb","reentered","terminated","dispatch$0027","msg","item","wix_1","items_1","wix$0027","ix","RingBuffer$1__Push_2B595","processMsgs","nextMsg","msg_1","patternInput_2","model$0027","sub$0027","ex_1","ProgramModule_runWith","NumberStyles","getRange","unsigned","bitsize","style","prefix","digits","AllowHexSpecifier","getRadix","invalidDigits","getInvalidDigits","test","regexMatch","validResponse","isValid","umin","umax","max","LazyProps$1","render","equal","Components_LazyView$1","Component","props","shouldComponentUpdate","nextProps","_nextState","Program_Internal_useRootApi","ReactInterop_useEffectWithDeps","getDisposable","deps","useEffect","disposable","React_createDisposable_3A5B6456","useReact_useCallbackRef_7C4B0DD6","callback","lastRenderCallbackRef","initialValue","callbackRef","callbackFunction","dependencies","dependencies_1","useReact_useCallback_1CA17B65","effect","useLayoutEffect","RouterModule_String_$007CPrefix$007C","RouterModule_String_$007CSuffix$007C","suffix","search","idx","lastIndexOf","endsWith","queryStringPairs","encodeURIComponent","RouterModule_encodeParts","routeMode","activePatternResult","path","activePatternResult_1","path_1","activePatternResult_2","path_2","activePatternResult_3","path_4","RouterModule_normalizeRoute","part","mode","history","pushState","replaceState","ev","document","createEvent","initEvent","window","dispatchEvent","RouterModule_urlSegments","zs","segment","segment_1","chars","trimEnd","split","y_1","decodeURIComponent","value_2","query","RouterModule_router","renderElement","areEqual","withKey","memoElementType","name_1","displayName","props_2","Internal_propsWithKey","Internal_memo_Z1716C242","onChange","urlChanged","onUrlChanged","location","pathname","hash","RouterModule_onUrlChange","hashMode","destroyFunc","calledOnce","renderAfterCalled","useReact_useEffect_7331F961","disposeOption","navigator","addEventListener","removeEventListener","useReact_useEffectOnce_Z5ECA432F","useReact_useEffect_311B4086","useReact_useEffectOnce_3A5B6456","ev_1","application","Page","PageModule_defaultPage","PageModule_parseFromUrlSegments","PageModule_noQueryString","segments","PageModule_toUrlSegments","Cmd_navigatePage","p","queryString_1","cn","classes","Helpers_extractClasses","linedMockupCode","code","children","createElement","elems","className","codedView","title","example","elm_4","elm_6","elm","fixDocsView","fileName","client","href","UseView","elm_2","xs_4","DateTimeOffset","checkOffsetInRange","fromDate","offset2","DateRangePicker","Util_ElmishState$3","program_1","queuedMessages","finalDispatch","ProgramModule_init","needsDispose","model_5","dispatch_1","patternInput_5","mapInit","mapUpdate","mapView","mapSetState","mapSubscribe","mapTermination","model_3","ProgramModule_map","_init","cmd$0027","msg_2","model_4","x_2","Util_ElmishState$3_$ctor_Z29FF63CF","Msg","State","StartDate","EndDate","dateRangePickerInputProps","locale","setEndDate","setStartDate","endDate","startDate","now","props_8","de","handler","range1","label","range","startDate_2","startOfMonth","endOfMonth","hasCustomRendering","isSelected","range_1","startDate_3","range_3","startDate_4","getCurrentValue","v_1","differenceInCalendarDays","endOfDay","range_6","startDate_5","range_8","startOfDay","DateRange","height","width","date_1","DateRangeView","elms","useState","arg$0027","dependencies$0027","useSyncExternalStore","Util_ElmishState$3__get_Subscribe","Util_ElmishState$3__get_State","subscribed","setTimeout","col","React_useElmish_Z6C327F2E","children_1","InstallView","elems_2","children_3","elems_6","xs_8","Theme","rightSide","docLink","elm_1","elements","elm_3","children_5","strokeWidth","prop1","prop2","leftSide","elems_5","elems_4","mi","t_1","mp_1","children_2","tupledArg_2","tupledArg_3","preventDefault","currentTarget","attributes","children_8","src","inLayout","elems_1","AppView","appViewInputProps","arg_1","ProgramModule_run","nextPage","state_1","lazyView2With","placeholderId","getElementById","model_1","Program_Internal_withReactSynchronousUsing"],"sourceRoot":""}